{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3","program":"/Users/idok/.rustup/toolchains/nightly-2021-12-01-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=84ef98f90da5d78d","-C","extra-filename=-84ef98f90da5d78d","--out-dir","/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps","-L","dependency=/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps","--extern","funty=/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps/libfunty-578317f0cef204e8.rmeta","--extern","radium=/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps/libradium-d82f93426915a6ab.rmeta","--extern","tap=/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps/libtap-7edec6f43088e2c8.rmeta","--extern","wyz=/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps/libwyz-7faf288d228727e5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/idok/.rustup/toolchains/nightly-2021-12-01-aarch64-apple-darwin"],"output":"/Users/idok/neo/zk/neo-zk-tools/target/rls/debug/deps/libbitvec-84ef98f90da5d78d.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[9051197812932434407,0]},"crate_root":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src","external_crates":[{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12080818428464079655,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","num":4,"id":{"name":"funty","disambiguator":[7221951420609749976,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","num":5,"id":{"name":"radium","disambiguator":[9909629879838656081,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","num":6,"id":{"name":"tap","disambiguator":[11512447895934554756,0]}},{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","num":7,"id":{"name":"wyz","disambiguator":[2932754873429666164,0]}}],"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":11852,"line_start":1,"line_end":307,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32620,"byte_end":32624,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"alias_span":null,"name":"core","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32650,"byte_end":32655,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"alias_span":null,"name":"funty","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45790,"byte_end":45805,"line_start":449,"line_end":449,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":3501},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":58441,"byte_end":58449,"line_start":37,"line_end":37,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":66}},{"kind":"Use","ref_id":{"krate":0,"index":3901},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220910,"byte_end":220914,"line_start":367,"line_end":367,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1008}},{"kind":"Use","ref_id":{"krate":0,"index":3902},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220910,"byte_end":220914,"line_start":367,"line_end":367,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1008}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226929,"byte_end":226937,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226940,"byte_end":226946,"line_start":11,"line_end":11,"column_start":2,"column_end":8},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226949,"byte_end":226953,"line_start":12,"line_end":12,"column_start":2,"column_end":6},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226963,"byte_end":226971,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1029},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226990,"byte_end":226998,"line_start":15,"line_end":15,"column_start":3,"column_end":11},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3901},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227002,"byte_end":227011,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3902},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227002,"byte_end":227011,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3901},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227015,"byte_end":227019,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3902},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227015,"byte_end":227019,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3923},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227023,"byte_end":227027,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3924},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227023,"byte_end":227027,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1675},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227043,"byte_end":227049,"line_start":21,"line_end":21,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1467},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227053,"byte_end":227064,"line_start":22,"line_end":22,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227068,"byte_end":227074,"line_start":23,"line_end":23,"column_start":3,"column_end":9},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3221},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227088,"byte_end":227096,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3367},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227106,"byte_end":227114,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":3398},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227123,"byte_end":227130,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":227138,"byte_end":227144,"line_start":28,"line_end":28,"column_start":2,"column_end":8},"alias_span":null,"name":"BitArr","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1184},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231897,"byte_end":231912,"line_start":105,"line_end":105,"column_start":3,"column_end":18},"alias_span":null,"name":"check_alignment","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":65},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231916,"byte_end":231923,"line_start":106,"line_end":106,"column_start":3,"column_end":10},"alias_span":null,"name":"Address","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":237},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231927,"byte_end":231932,"line_start":107,"line_end":107,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":238},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231927,"byte_end":231932,"line_start":107,"line_end":107,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3945},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231936,"byte_end":231949,"line_start":108,"line_end":108,"column_start":3,"column_end":16},"alias_span":null,"name":"MisalignError","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":259},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231953,"byte_end":231956,"line_start":109,"line_end":109,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":260},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231953,"byte_end":231956,"line_start":109,"line_end":109,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":41},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231960,"byte_end":231970,"line_start":110,"line_end":110,"column_start":3,"column_end":13},"alias_span":null,"name":"Mutability","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":316},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231974,"byte_end":231986,"line_start":111,"line_end":111,"column_start":3,"column_end":15},"alias_span":null,"name":"NullPtrError","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":7,"index":317},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":231974,"byte_end":231986,"line_start":111,"line_end":111,"column_start":3,"column_end":15},"alias_span":null,"name":"NullPtrError","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232000,"byte_end":232006,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1467},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232016,"byte_end":232027,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1675},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232042,"byte_end":232048,"line_start":116,"line_end":116,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3974},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232052,"byte_end":232063,"line_start":117,"line_end":117,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrError","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":4014},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232076,"byte_end":232088,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"alias_span":null,"name":"BitSpanError","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2510},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":357974,"byte_end":357982,"line_start":63,"line_end":63,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2513},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":357986,"byte_end":358000,"line_start":64,"line_end":64,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2517},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358004,"byte_end":358022,"line_start":65,"line_end":65,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2507},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358026,"byte_end":358034,"line_start":66,"line_end":66,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2521},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358038,"byte_end":358051,"line_start":67,"line_end":67,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4137},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358068,"byte_end":358078,"line_start":70,"line_end":70,"column_start":3,"column_end":13},"alias_span":null,"name":"BitRefIter","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4152},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358082,"byte_end":358092,"line_start":71,"line_end":71,"column_start":3,"column_end":13},"alias_span":null,"name":"BitValIter","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4272},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358096,"byte_end":358102,"line_start":72,"line_end":72,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4345},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358106,"byte_end":358117,"line_start":73,"line_end":73,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4385},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358121,"byte_end":358135,"line_start":74,"line_end":74,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4311},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358139,"byte_end":358148,"line_start":75,"line_end":75,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2635},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358152,"byte_end":358156,"line_start":76,"line_end":76,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2715},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358160,"byte_end":358167,"line_start":77,"line_end":77,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4865},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358171,"byte_end":358179,"line_start":78,"line_end":78,"column_start":3,"column_end":11},"alias_span":null,"name":"IterOnes","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4914},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358183,"byte_end":358192,"line_start":79,"line_end":79,"column_start":3,"column_end":12},"alias_span":null,"name":"IterZeros","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4420},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358196,"byte_end":358203,"line_start":80,"line_end":80,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4493},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358207,"byte_end":358219,"line_start":81,"line_end":81,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4533},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358223,"byte_end":358238,"line_start":82,"line_end":82,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4459},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358242,"byte_end":358252,"line_start":83,"line_end":83,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4683},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358256,"byte_end":358262,"line_start":84,"line_end":84,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2769},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358266,"byte_end":358275,"line_start":85,"line_end":85,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2793},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358279,"byte_end":358286,"line_start":86,"line_end":86,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2800},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358290,"byte_end":358300,"line_start":87,"line_end":87,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4593},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358304,"byte_end":358309,"line_start":88,"line_end":88,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2761},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358313,"byte_end":358321,"line_start":89,"line_end":89,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2779},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358325,"byte_end":358331,"line_start":90,"line_end":90,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":2786},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358335,"byte_end":358344,"line_start":91,"line_end":91,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":2123}},{"kind":"Use","ref_id":{"krate":0,"index":4233},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358348,"byte_end":358355,"line_start":92,"line_end":92,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":2123}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":11852,"line_start":1,"line_end":307,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":26},{"krate":0,"index":66},{"krate":0,"index":544},{"krate":0,"index":581},{"krate":0,"index":673},{"krate":0,"index":788},{"krate":0,"index":978},{"krate":0,"index":1008},{"krate":0,"index":1067},{"krate":0,"index":1116},{"krate":0,"index":2123},{"krate":0,"index":3337},{"krate":0,"index":3384}],"decl_id":null,"docs":" # `bitvec` — Addressable Bits","sig":null,"attributes":[{"value":"* # `bitvec` — Addressable Bits\n\n`bitvec` provides the foundation tools needed to implement truly single-bit\n`bool` collections and arbitrary bit-precision addressing. It builds compact\ncollections and performant [bitfield] regions with a high-level, expressive, API\nthat compiles down to the simple machine instructions you would expect.\n\n# Examples\n\nThe [`examples/`] directory of the project repository contains some programs\nthat showcase different `bitvec` features and use cases. In addition, each data\nstructure’s API documentation contains more focused samples.\n\nTo begin using `bitvec`, you need only import its [prelude]. Once in scope,\n`bitvec` can take over existing memory buffers or create entirely new values:\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = &[0u8, 1, 2, 3];\nlet data_bits = data.view_bits::<Msb0>();\n\nlet literal_bits = bits![Lsb0, u16; 1, 0, 1, 1];\nassert_eq!(literal_bits.as_raw_slice()[0], 0b1101);\n\nlet array_bool = bitarr![1; 40];\n# #[cfg(feature = \"alloc\")] {\nlet boxed_bool = bitbox![Lsb0, u32; 1; 50];\nlet vec_bool = bitvec![Msb0, usize; 1; 60];\n# }\n```\n\nThe two easiest entry points into `bitvec` are through the [`BitView`] trait,\nwhich provides extension methods on ordinary memory to view it as a\n[`BitSlice`], and the [macro] constructors, which convert token strings into\nappropriate buffers at compile time. Each data structure also has its own\nconstructor functions that create new buffers or borrow existing values.\n\nOnce in use, `bitvec`’s types obey all the same patterns and APIs that you have\ncome to expect from their analogues in the [`core`], [`alloc`], and [`std`]\nlibraries.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard libraries:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet stats: Vec<bool> = vec![\n  true, false, true, true,\n  false, false, true, false,\n];\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf: BitVec<Msb0, u8> = BitVec::new();\nio_buf.resize(16, false);\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet stats: BitVec = bitvec![\n  1, 0, 1, 1,\n  0, 0, 1, 0,\n];\n# }\n```\n\n## Type Arguments\n\nThe `bitvec` data structures are all generic over two type parameters which\ncontrol how they view and manage the memory they use. These type parameters\nallow users to precisely control the memory layout, value bit-patterns, and\ngenerated instructions, but most users of the library will not need to be\ngeneric over them. Instead, you probably either do not care about the details of\nthe underlying memory, or you have a specific and fixed layout requirement. In\neither case, you will likely select a specific combination of type arguments and\nuse it consistently throughout your project.\n\nYou *can* write your project to be generic over these type arguments, and this\nis certainly useful when writing code that is not coupled directly to memory,\nincreases complexity with little practical gain.\n\nThe default type arguments are chosen for optimal behavior in memory use and\ninstruction selection. The unadorned types [`BitArray`], [`BitSlice`],\n[`BitBox`], and [`BitVec`] can all be used in type-annotation position (`let`\nbindings, `struct` fields, and function arguments). Users who need to specify\ntheir type arguments should prefer to do so in a `type` alias, and use that\nalias throughout their project instead of the much longer fully-qualified\n`bitvec` type names:\n\n```rust\nuse bitvec::prelude::*;\n\npub type MySlice = BitSlice<Msb0, u8>;\npub type MyArray20 = BitArr!(for 20, in Msb0, u8);\n# #[cfg(feature = \"alloc\")]\npub type MyVec = BitVec<Msb0, u8>;\n\nfn make_buffer() -> MyVec {\n  MyVec::new()\n}\n```\n\nIn general, you will probably work with [`BitSlice`] borrows and [`BitVec`]\nowned buffers. The [`BitArray`] and [`BitBox`] types are provided for\ncompleteness and have their uses, but the additional constraints and frozen size\nrender them less commonly useful.\n\n## Additional Details\n\nAs a replacement for `bool` sequences, you should be able to replace old type\ndefinition and value construction sites with their corresponding items from this\nproject, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for structural [bitfields] or specialized I/O protocol buffers,\nyou should use [`BitArray`] or [`BitVec`] to manage your data buffers (for\ncompile-time statically-sized and run-time dynamically-sized, respectively), and\nthe [`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the behavior that interacts with the\n*contents* of a memory buffer. [`BitVec`] adds behavior that operates on\nallocations, and specializes [`BitSlice`] behaviors that can take advantage of\nowned buffers.\n\nThe [`domain`] module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory at aliasing\nboundaries. This removes synchronization guards where `bitvec` can prove that\ndoing so is legal and correct.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n[`BitBox`], and [`BitVec`] types all own a buffer of memory and dereference it\nto [`BitSlice`] in order to view it. In addition, you can borrow any piece of\nordinary Rust memory as a `BitSlice` view by using its borrowing constructor\nfunctions or the [`BitView`] trait’s extension methods.\n\n# Capabilities\n\n`bitvec` stands out from other bit-sequence libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its region information in\nspecially-encoded pointers *to* memory regions, rather than in the region\nitself. By using its own pointer encoding scheme, `bitvec` can use references\n(`&BitSlice<_, _>` and `&mut BitSlice<_, _>`) to manage memory accesses and fit\nseamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify both\nthe register element type used to store data and also the ordering of bits\nwithin each register element. This sidesteps the problems found in C\n[bitfields], C++ [`std::bitset`] and [`std::vector<bool>`], Python’s\n[`bitstring`], Erlang’s [`bitstream`], and other Rust libraries such as\n[`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nhard-coding it within the library, `bitvec` enables users to select the behavior\ncharacteristics they want or need without significant effort on their part.\n\nThis works by supplying two type parameters: an `O` [`BitOrder`] ordering of\nbits within a register element, and a `T` [`BitStore`] register element used for\nstorage and memory description. `T` is restricted to be only the raw unsigned\nintegers, and [`bitvec`-provided wrappers][`BitSafe`] over [atomic] and [`Cell`]\nsynchronization guards, that fit within processor registers on your target.\n\nThese parameters permit the `bitvec` type system to track memory access rules\nand bit addressing, thus enabling a nearly seamless use of [`BitSlice`]s as if\nthey were ordinary Rust slices.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to shared mutability. This mark can, depending\non your build settings, either forbid moving such slices across threads, or\nissue lock instructions to the memory bus when accessing memory. You will never\nneed to add your own guards to prevent race conditions, and [`BitSlice`]\nprovides interfaces to separate any bit-slice into its aliased and unaliased\nsubslices.\n\nWhere possible, `bitvec` uses its knowledge of bit ordering and memory\navailability to accelerate memory operations from individual bit-by-bit walks to\nbatched operations within a register. This is an area of ongoing development,\nand is an implementation detail rather than an aspect of public API.\n\n`bitvec`’s performance even when working with individual bits is as close to\nideal as a general-purpose library can be, but the width of processor registers\nmeans that no amount of performance improvement at the individual bit level can\ncompete with instructions operating on 32 or 64 bits at once. If you encounter\nperformance bottlenecks, you can escape `bitvec`’s views to operate on the\nmemory directly, or submit an issue for future work on specialized batch\nparallelization.\n\n# Project Structure\n\nYou should generally import the library [prelude], with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains the basic symbols you will need to make use of the crate:\nthe names of data structures, ordering parameters, useful traits, and\nconstructor macros. Almost all symbols begin with the prefix `Bit`; only the\norderings [`Lsb0`], [`Msb0`], and [`LocalBits`] do not. This will reduce the\nlikelihood of name collisions.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` overrides operator sigils, and `traits`\nholds all other trait implementations. The data structure’s own module typically\nonly contains its own definition and its inherent methods that are not ports of\nthe standard libraries.\n\n[atomic]: core::sync::atomic\n[bitfield]: https://en.cppreference.com/w/c/language/bit_field\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n[macro]: #macros\n[prelude]: crate::prelude\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSafe`]: crate::access::BitSafe\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell`]: core::cell::Cell\n[`LocalBits`]: crate::order::LocalBits\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n\n[`alloc`]: alloc\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`core`]: core\n[`domain`]: crate::domain\n[`examples/`]: https://github.com/myrrlyn/bitvec/tree/HEAD/examples\n[`std`]: std\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":10859,"line_start":1,"line_end":263,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":10895,"byte_end":10901,"line_start":265,"line_end":265,"column_start":35,"column_end":41}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":10934,"byte_end":10952,"line_start":266,"line_end":266,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11011,"byte_end":11044,"line_start":268,"line_end":268,"column_start":1,"column_end":34}},{"value":"allow(clippy :: single_char_add_str,)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11094,"byte_end":11162,"line_start":270,"line_end":272,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11512,"byte_end":11524,"line_start":283,"line_end":283,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11854,"byte_end":11912,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"allow(deprecated)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11914,"byte_end":11935,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11937,"byte_end":11949,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32102,"byte_end":32578,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44909,"byte_end":44924,"line_start":401,"line_end":401,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44721,"byte_end":44774,"line_start":398,"line_end":398,"column_start":1,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44810,"byte_end":44824,"line_start":399,"line_end":399,"column_start":36,"column_end":50}},{"value":"allow(clippy :: many_single_char_names, clippy :: too_many_arguments)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44827,"byte_end":44895,"line_start":400,"line_end":400,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45365,"byte_end":45380,"line_start":424,"line_end":424,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45177,"byte_end":45230,"line_start":421,"line_end":421,"column_start":1,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45266,"byte_end":45280,"line_start":422,"line_end":422,"column_start":36,"column_end":50}},{"value":"allow(clippy :: many_single_char_names, clippy :: too_many_arguments)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45283,"byte_end":45351,"line_start":423,"line_end":423,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"access","qualname":"::access","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":3471},{"krate":0,"index":3473},{"krate":0,"index":3456},{"krate":0,"index":3475},{"krate":0,"index":3477},{"krate":0,"index":3461},{"krate":0,"index":3479},{"krate":0,"index":3481},{"krate":0,"index":3466},{"krate":0,"index":3488},{"krate":0,"index":3490},{"krate":0,"index":3483},{"krate":0,"index":3497},{"krate":0,"index":3499},{"krate":0,"index":3492}],"decl_id":null,"docs":" Memory access guards.","sig":null,"attributes":[{"value":"* Memory access guards.\n\n[`bitvec`] allows a program to produce handles over memory that do not logically\nalias their bits, but may alias in hardware. This module provides a unified\ninterface for memory accesses that can be specialized to handle aliased and\nunaliased access events.\n\nThe [`BitAccess`] trait provides capabilities to access bits in memory elements\nthrough shared references, and its implementations are responsible for\ncoördinating synchronization and contention as needed.\n\nThe [`BitSafe`] trait abstracts over wrappers to the [`Cell`] and [atomic] types\nthat forbid writing through their references, even when other references to the\nsame location may write.\n\n[`BitAccess`]: crate::access::BitAccess\n[`BitSafe`]: crate::access::BitSafe\n[`Cell`]: core::cell::Cell\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":46118,"byte_end":46924,"line_start":1,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47920,"byte_end":47929,"line_start":55,"line_end":55,"column_start":11,"column_end":20},"name":"BitAccess","qualname":"::access::BitAccess","value":"BitAccess: Radium","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56}],"decl_id":null,"docs":" Abstracts over the instructions used when accessing a memory location.","sig":null,"attributes":[{"value":"* Abstracts over the instructions used when accessing a memory location.\n\nThis trait provides functions to manipulate bits in a referent memory register\nthrough the appropriate access instructions, so that use sites elsewhere in the\ncrate can select their required behavior without changing their interface.\n\nThis is automatically implemented for all types that permit shared/mutable\nmemory access to memory registers through the [`radium`] crate. Its use is\nconstrained in the [`store`] module.\n\nThis trait is only ever used by [`bitvec`] internals, and is never exposed\noutside the crate. It must be marked as public so that it can be used as an\nassociated item in [`BitStore`], even though it is never made accessible.\n\n[`BitStore`]: crate::store::BitStore\n[`bitvec`]: crate\n[`radium`]: radium\n[`store`]: crate::store\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47083,"byte_end":47909,"line_start":36,"line_end":54,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48945,"byte_end":48955,"line_start":82,"line_end":82,"column_start":5,"column_end":15},"name":"clear_bits","qualname":"::access::BitAccess::clear_bits","value":"pub fn clear_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Clears any number of bits in a memory register to `0`.","sig":null,"attributes":[{"value":"/ Clears any number of bits in a memory register to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47983,"byte_end":48041,"line_start":58,"line_end":58,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48043,"byte_end":48046,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48048,"byte_end":48122,"line_start":60,"line_end":60,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48124,"byte_end":48199,"line_start":61,"line_end":61,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48201,"byte_end":48263,"line_start":62,"line_end":62,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48265,"byte_end":48268,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48270,"byte_end":48286,"line_start":64,"line_end":64,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48288,"byte_end":48291,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48293,"byte_end":48306,"line_start":66,"line_end":66,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48308,"byte_end":48381,"line_start":67,"line_end":67,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48383,"byte_end":48457,"line_start":68,"line_end":68,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48459,"byte_end":48476,"line_start":69,"line_end":69,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48478,"byte_end":48481,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48483,"byte_end":48496,"line_start":71,"line_end":71,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48498,"byte_end":48501,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48503,"byte_end":48579,"line_start":73,"line_end":73,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48581,"byte_end":48654,"line_start":74,"line_end":74,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48656,"byte_end":48686,"line_start":75,"line_end":75,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48688,"byte_end":48691,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ Do not invert the `mask` prior to calling this function in order to save","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48693,"byte_end":48769,"line_start":77,"line_end":77,"column_start":2,"column_end":78}},{"value":"/ the unselected bits and clear the selected bits. [`BitMask`] is a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48771,"byte_end":48840,"line_start":78,"line_end":78,"column_start":2,"column_end":71}},{"value":"/ selection type, not a bitwise-operation argument.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48842,"byte_end":48895,"line_start":79,"line_end":79,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48897,"byte_end":48900,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ [`BitMask`]: crate::index::BitMask","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48902,"byte_end":48940,"line_start":81,"line_end":81,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49768,"byte_end":49776,"line_start":104,"line_end":104,"column_start":5,"column_end":13},"name":"set_bits","qualname":"::access::BitAccess::set_bits","value":"pub fn set_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Sets any number of bits in a memory register to `1`.","sig":null,"attributes":[{"value":"/ Sets any number of bits in a memory register to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49062,"byte_end":49118,"line_start":86,"line_end":86,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49120,"byte_end":49123,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49125,"byte_end":49199,"line_start":88,"line_end":88,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49201,"byte_end":49276,"line_start":89,"line_end":89,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49278,"byte_end":49340,"line_start":90,"line_end":90,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49342,"byte_end":49345,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49347,"byte_end":49363,"line_start":92,"line_end":92,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49365,"byte_end":49368,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49370,"byte_end":49383,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49385,"byte_end":49458,"line_start":95,"line_end":95,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49460,"byte_end":49534,"line_start":96,"line_end":96,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49536,"byte_end":49553,"line_start":97,"line_end":97,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49555,"byte_end":49558,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49560,"byte_end":49573,"line_start":99,"line_end":99,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49575,"byte_end":49578,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49580,"byte_end":49656,"line_start":101,"line_end":101,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49658,"byte_end":49731,"line_start":102,"line_end":102,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49733,"byte_end":49763,"line_start":103,"line_end":103,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50584,"byte_end":50595,"line_start":126,"line_end":126,"column_start":5,"column_end":16},"name":"invert_bits","qualname":"::access::BitAccess::invert_bits","value":"pub fn invert_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Inverts any number of bits in a memory register.","sig":null,"attributes":[{"value":"/ Inverts any number of bits in a memory register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49881,"byte_end":49933,"line_start":108,"line_end":108,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49935,"byte_end":49938,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49940,"byte_end":50014,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50016,"byte_end":50091,"line_start":111,"line_end":111,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50093,"byte_end":50155,"line_start":112,"line_end":112,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50157,"byte_end":50160,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50162,"byte_end":50178,"line_start":114,"line_end":114,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50180,"byte_end":50183,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50185,"byte_end":50198,"line_start":116,"line_end":116,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50200,"byte_end":50273,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50275,"byte_end":50349,"line_start":118,"line_end":118,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50351,"byte_end":50368,"line_start":119,"line_end":119,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50370,"byte_end":50373,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50375,"byte_end":50388,"line_start":121,"line_end":121,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50390,"byte_end":50393,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50395,"byte_end":50471,"line_start":123,"line_end":123,"column_start":2,"column_end":78}},{"value":"/ inverted. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50473,"byte_end":50547,"line_start":124,"line_end":124,"column_start":2,"column_end":76}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50549,"byte_end":50579,"line_start":125,"line_end":125,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51469,"byte_end":51478,"line_start":154,"line_end":154,"column_start":5,"column_end":14},"name":"write_bit","qualname":"::access::BitAccess::write_bit","value":"pub fn write_bit<O>(&Self, BitIdx<Self::Item>, bool) -> bool where O: BitOrder","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Writes a value to one bit in a memory register.","sig":null,"attributes":[{"value":"/ Writes a value to one bit in a memory register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50701,"byte_end":50752,"line_start":130,"line_end":130,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50754,"byte_end":50757,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50759,"byte_end":50780,"line_start":132,"line_end":132,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50782,"byte_end":50785,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50787,"byte_end":50813,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50815,"byte_end":50818,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50820,"byte_end":50836,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50838,"byte_end":50841,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50843,"byte_end":50856,"line_start":138,"line_end":138,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to write.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50858,"byte_end":50923,"line_start":139,"line_end":139,"column_start":2,"column_end":67}},{"value":"/ - `value`: The bit value to write into `*self` at `index`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50925,"byte_end":50987,"line_start":140,"line_end":140,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50989,"byte_end":50992,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50994,"byte_end":51007,"line_start":142,"line_end":142,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51009,"byte_end":51012,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ The bit previously stored in `*self` at `index`. As these operations are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51014,"byte_end":51090,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ required to load the `*self` value from memory in order to work, the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51092,"byte_end":51164,"line_start":145,"line_end":145,"column_start":2,"column_end":74}},{"value":"/ previous value can be retained to reduce spurious loads elsewhere in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51166,"byte_end":51242,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ crate.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51244,"byte_end":51254,"line_start":147,"line_end":147,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51256,"byte_end":51259,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51261,"byte_end":51274,"line_start":149,"line_end":149,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51276,"byte_end":51279,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ The memory register at address `self` has the bit corresponding to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51281,"byte_end":51355,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/ `index` cursor under the `O` order written with the new `value`, and all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51357,"byte_end":51433,"line_start":152,"line_end":152,"column_start":2,"column_end":78}},{"value":"/ other bits are unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51435,"byte_end":51464,"line_start":153,"line_end":153,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52291,"byte_end":52302,"line_start":181,"line_end":181,"column_start":5,"column_end":16},"name":"get_writers","qualname":"::access::BitAccess::get_writers","value":"pub fn get_writers(bool) -> for<'a>fn(: &'a Self, : BitMask<Self::Item>)","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Gets the function that writes `value` into all bits under a mask.","sig":null,"attributes":[{"value":"/ Gets the function that writes `value` into all bits under a mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51787,"byte_end":51856,"line_start":166,"line_end":166,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51858,"byte_end":51861,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51863,"byte_end":51879,"line_start":168,"line_end":168,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51881,"byte_end":51884,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ - `value`: The bit that will be directly written by the returned","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51886,"byte_end":51954,"line_start":170,"line_end":170,"column_start":2,"column_end":70}},{"value":"/   function.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51956,"byte_end":51971,"line_start":171,"line_end":171,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51973,"byte_end":51976,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51978,"byte_end":51991,"line_start":173,"line_end":173,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51993,"byte_end":51996,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ A function which, when applied to a reference and a mask, will write","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51998,"byte_end":52070,"line_start":175,"line_end":175,"column_start":2,"column_end":74}},{"value":"/ `value` into memory. If `value` is `false`, then this produces","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52072,"byte_end":52138,"line_start":176,"line_end":176,"column_start":2,"column_end":68}},{"value":"/ [`clear_bits`]; if it is `true`, then this produces [`set_bits`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52140,"byte_end":52209,"line_start":177,"line_end":177,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52211,"byte_end":52214,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ [`clear_bits`]: Self::clear_bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52216,"byte_end":52252,"line_start":179,"line_end":179,"column_start":2,"column_end":38}},{"value":"/ [`set_bits`]: Self::set_bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52254,"byte_end":52286,"line_start":180,"line_end":180,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52867,"byte_end":52874,"line_start":205,"line_end":205,"column_start":11,"column_end":18},"name":"BitSafe","qualname":"::access::BitSafe","value":"BitSafe","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"decl_id":null,"docs":" Restricts memory modification to only exclusive references.","sig":null,"attributes":[{"value":"* Restricts memory modification to only exclusive references.\n\nThe shared-mutability types do not permit locking their references to prevent\nwriting through them when inappropriate. Implementors of this trait are able to\nview aliased memory and handle other references writing to it, even though they\nthemselves may be forbidden from doing so.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52507,"byte_end":52856,"line_start":198,"line_end":204,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53058,"byte_end":53061,"line_start":210,"line_end":210,"column_start":7,"column_end":10},"name":"Mem","qualname":"::access::BitSafe::Mem","value":"type Mem: BitRegister;","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" The register type being guarded against shared mutation.","sig":null,"attributes":[{"value":"/ The register type being guarded against shared mutation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52878,"byte_end":52938,"line_start":206,"line_end":206,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52940,"byte_end":52943,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ This is only present as an extra proof that the type graph all uses the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52945,"byte_end":53020,"line_start":208,"line_end":208,"column_start":2,"column_end":77}},{"value":"/ same underlying integers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53022,"byte_end":53051,"line_start":209,"line_end":209,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53295,"byte_end":53298,"line_start":216,"line_end":216,"column_start":7,"column_end":10},"name":"Rad","qualname":"::access::BitSafe::Rad","value":"type Rad: Radium<Item = Self::Mem>;","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" The accessor type being prevented from mutating while shared.","sig":null,"attributes":[{"value":"/ The accessor type being prevented from mutating while shared.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53078,"byte_end":53143,"line_start":212,"line_end":212,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53145,"byte_end":53148,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ This is exposed as an associated type so that `BitStore` can name it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53150,"byte_end":53222,"line_start":214,"line_end":214,"column_start":2,"column_end":74}},{"value":"/ without having to re-select it based on crate configuration.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53224,"byte_end":53288,"line_start":215,"line_end":215,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53431,"byte_end":53435,"line_start":220,"line_end":220,"column_start":5,"column_end":9},"name":"load","qualname":"::access::BitSafe::load","value":"pub fn load(&Self) -> Self::Mem","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Reads the value out of memory only if a shared reference to the location\n can be produced.\n","sig":null,"attributes":[{"value":"/ Reads the value out of memory only if a shared reference to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53328,"byte_end":53404,"line_start":218,"line_end":218,"column_start":2,"column_end":78}},{"value":"/ can be produced.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53406,"byte_end":53426,"line_start":219,"line_end":219,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53563,"byte_end":53568,"line_start":224,"line_end":224,"column_start":5,"column_end":10},"name":"store","qualname":"::access::BitSafe::store","value":"pub fn store(&mut Self, Self::Mem)","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Writes a value into memory only if an exclusive reference to the\n location can be produced.\n","sig":null,"attributes":[{"value":"/ Writes a value into memory only if an exclusive reference to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53459,"byte_end":53527,"line_start":222,"line_end":222,"column_start":2,"column_end":70}},{"value":"/ location can be produced.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53529,"byte_end":53558,"line_start":223,"line_end":223,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":3471},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55103,"byte_end":55112,"line_start":281,"line_end":281,"column_start":8,"column_end":17},"name":"BitSafeU8","qualname":"::access::BitSafeU8","value":"BitSafeU8 {  }","parent":null,"children":[{"krate":0,"index":3472}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3475},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55149,"byte_end":55159,"line_start":282,"line_end":282,"column_start":9,"column_end":19},"name":"BitSafeU16","qualname":"::access::BitSafeU16","value":"BitSafeU16 {  }","parent":null,"children":[{"krate":0,"index":3476}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3479},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55197,"byte_end":55207,"line_start":283,"line_end":283,"column_start":9,"column_end":19},"name":"BitSafeU32","qualname":"::access::BitSafeU32","value":"BitSafeU32 {  }","parent":null,"children":[{"krate":0,"index":3480}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3488},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55289,"byte_end":55299,"line_start":287,"line_end":287,"column_start":14,"column_end":24},"name":"BitSafeU64","qualname":"::access::BitSafeU64","value":"BitSafeU64 {  }","parent":null,"children":[{"krate":0,"index":3489}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3497},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55346,"byte_end":55358,"line_start":289,"line_end":289,"column_start":16,"column_end":28},"name":"BitSafeUsize","qualname":"::access::BitSafeUsize","value":"BitSafeUsize {  }","parent":null,"children":[{"krate":0,"index":3498}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":170},{"krate":0,"index":279},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":530}],"decl_id":null,"docs":" A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"* A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n[`BitArray`] is equivalent to `[bool; N]`, in its operation and in its\nrelationship to the [`BitSlice`] type. It has little behavior or properties in\nits own right, and serves solely as a type capable of being used in immediate\nvalue position, and delegates to `BitSlice` for all actual work.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n[std]: https://doc.rust-lang.org/stable/std/primitive.array.html\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":57551,"byte_end":58232,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3501},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65261,"byte_end":65269,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":3504},{"krate":0,"index":3505}],"decl_id":null,"docs":" A by-value [bit-array] iterator.","sig":null,"attributes":[{"value":"* A by-value [bit-array] iterator.\n\n# Original\n\n[`array::IntoIter`](core::array::IntoIter)\n\n[bit-array]: crate::array::BitArray\n[`BitView`]: crate::view::BitView\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65065,"byte_end":65232,"line_start":26,"line_end":34,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66031,"byte_end":66042,"line_start":76,"line_end":76,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns an immutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65850,"byte_end":65924,"line_start":70,"line_end":70,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65926,"byte_end":65929,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65931,"byte_end":65945,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65947,"byte_end":65950,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](core::array::IntoIter::as_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65952,"byte_end":66011,"line_start":74,"line_end":74,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66013,"byte_end":66022,"line_start":75,"line_end":75,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66295,"byte_end":66303,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66171,"byte_end":66188,"line_start":81,"line_end":81,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66190,"byte_end":66220,"line_start":82,"line_end":82,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66222,"byte_end":66286,"line_start":83,"line_end":83,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66551,"byte_end":66566,"line_start":94,"line_end":94,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns a mutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66365,"byte_end":66436,"line_start":88,"line_end":88,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66438,"byte_end":66441,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66443,"byte_end":66457,"line_start":90,"line_end":90,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66459,"byte_end":66462,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](core::array::IntoIter::as_mut_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66464,"byte_end":66531,"line_start":92,"line_end":92,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66533,"byte_end":66542,"line_start":93,"line_end":93,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66854,"byte_end":66866,"line_start":106,"line_end":106,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66726,"byte_end":66743,"line_start":103,"line_end":103,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66745,"byte_end":66775,"line_start":104,"line_end":104,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66777,"byte_end":66845,"line_start":105,"line_end":105,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3510},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80921,"byte_end":80941,"line_start":472,"line_end":472,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"TryFromBitSliceError {  }","parent":null,"children":[{"krate":0,"index":3514}],"decl_id":null,"docs":" The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.","sig":null,"attributes":[{"value":"* The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80664,"byte_end":80833,"line_start":464,"line_end":469,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80834,"byte_end":80854,"line_start":470,"line_end":470,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":524},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61988,"byte_end":61996,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all [`Sized`] implementors of the [`BitView`] trait.\nDue to limitations in the Rust language’s const-generics implementation (it is\nboth unstable and incomplete), this must take an array type parameter directly,\nrather than register type and bit-count integer parameters. This makes it less\nconvenient to use than C++’s [`std::bitset<N>`] array type. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements [`Deref`]/[`Mut`] to\n[`BitSlice`], as well as implementing all of `BitSlice`s traits by forwarding to\nthe `BitSlice` view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit [`.as_bitslice()`] calls in user\ncode.\n\n# Limitations\n\nThis does not track start or end indices of its [`BitSlice`] view, and so that\nview will always fully span the buffer. You cannot produce, for example, an\narray of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory registers.\n- `V`: Some buffer which can be used as the basis for a [`BitSlice`] view. This\n  will usually be an array of `[T: BitRegister; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\n[`BitSlice`].\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":59133,"byte_end":60558,"line_start":69,"line_end":101,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60559,"byte_end":60562,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60563,"byte_end":60574,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60575,"byte_end":60602,"line_start":104,"line_end":104,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60603,"byte_end":60606,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60607,"byte_end":60632,"line_start":106,"line_end":106,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60633,"byte_end":60651,"line_start":107,"line_end":107,"column_start":1,"column_end":19}},{"value":"/   // creates a type declaration.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60652,"byte_end":60688,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/   fields: BitArr!(for 20, in Msb0, u8),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60689,"byte_end":60732,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60733,"byte_end":60738,"line_start":110,"line_end":110,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60739,"byte_end":60742,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60743,"byte_end":60766,"line_start":112,"line_end":112,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60767,"byte_end":60795,"line_start":113,"line_end":113,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60796,"byte_end":60810,"line_start":114,"line_end":114,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60811,"byte_end":60831,"line_start":115,"line_end":115,"column_start":1,"column_end":21}},{"value":"/       // creates a value object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60832,"byte_end":60868,"line_start":116,"line_end":116,"column_start":1,"column_end":37}},{"value":"/       // the type paramaters must be repeated.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60869,"byte_end":60919,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60920,"byte_end":60963,"line_start":118,"line_end":118,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60964,"byte_end":60973,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60974,"byte_end":60981,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60982,"byte_end":60985,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60986,"byte_end":61024,"line_start":122,"line_end":122,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61025,"byte_end":61082,"line_start":123,"line_end":123,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61083,"byte_end":61109,"line_start":124,"line_end":124,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61110,"byte_end":61117,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61118,"byte_end":61121,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61122,"byte_end":61167,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61168,"byte_end":61207,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61208,"byte_end":61243,"line_start":129,"line_end":129,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61244,"byte_end":61251,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61252,"byte_end":61255,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61256,"byte_end":61300,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61301,"byte_end":61348,"line_start":133,"line_end":133,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61349,"byte_end":61391,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61392,"byte_end":61399,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61400,"byte_end":61405,"line_start":136,"line_end":136,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61406,"byte_end":61413,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T, const N: usize>([T; elts::<T>(N)]);`, to mirror the\nbehavior of ordinary arrays `[T; N]` as they stand today.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n[`Deref`]: core::ops::Deref\n[`Mut`]: core::ops::DerefMut\n[`Sized`]: core::marker::Sized\n[`bitarr!`]: macro@crate::bitarr\n[`std::bitset<N>`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`.as_bitslice()`]: Self::as_bitslice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61414,"byte_end":61955,"line_start":138,"line_end":153,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61956,"byte_end":61976,"line_start":154,"line_end":154,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62338,"byte_end":62344,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with its memory set to zero.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with its memory set to zero.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62258,"byte_end":62318,"line_start":171,"line_end":171,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62320,"byte_end":62329,"line_start":172,"line_end":172,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62706,"byte_end":62709,"line_start":192,"line_end":192,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a buffer in a `BitArray`.","sig":null,"attributes":[{"value":"/ Wraps a buffer in a `BitArray`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62454,"byte_end":62489,"line_start":180,"line_end":180,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62491,"byte_end":62494,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62496,"byte_end":62510,"line_start":182,"line_end":182,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62512,"byte_end":62515,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62517,"byte_end":62528,"line_start":184,"line_end":184,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62530,"byte_end":62557,"line_start":185,"line_end":185,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62559,"byte_end":62562,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 2];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62564,"byte_end":62588,"line_start":187,"line_end":187,"column_start":2,"column_end":26}},{"value":"/ let bits: BitArray<Msb0, _> = BitArray::new(data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62590,"byte_end":62644,"line_start":188,"line_end":188,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(bits.len(), 16);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62646,"byte_end":62677,"line_start":189,"line_end":189,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62679,"byte_end":62686,"line_start":190,"line_end":190,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62688,"byte_end":62697,"line_start":191,"line_end":191,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63083,"byte_end":63093,"line_start":211,"line_end":211,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitArray<O, V>>::into_inner","value":"pub fn into_inner(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the `BitArray` wrapper, leaving the contained buffer.","sig":null,"attributes":[{"value":"/ Removes the `BitArray` wrapper, leaving the contained buffer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62778,"byte_end":62843,"line_start":199,"line_end":199,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62845,"byte_end":62848,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62850,"byte_end":62864,"line_start":201,"line_end":201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62866,"byte_end":62869,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62871,"byte_end":62882,"line_start":203,"line_end":203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62884,"byte_end":62911,"line_start":204,"line_end":204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62913,"byte_end":62916,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ let bitarr = bitarr![Lsb0, usize; 0; 30];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62918,"byte_end":62963,"line_start":206,"line_end":206,"column_start":2,"column_end":47}},{"value":"/ let native: [usize; 1] = bitarr.into_inner();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62965,"byte_end":63014,"line_start":207,"line_end":207,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63016,"byte_end":63023,"line_start":208,"line_end":208,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63025,"byte_end":63042,"line_start":209,"line_end":209,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63044,"byte_end":63074,"line_start":210,"line_end":210,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63269,"byte_end":63280,"line_start":220,"line_end":220,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63124,"byte_end":63162,"line_start":215,"line_end":215,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63164,"byte_end":63167,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63169,"byte_end":63209,"line_start":217,"line_end":217,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63211,"byte_end":63228,"line_start":218,"line_end":218,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63230,"byte_end":63260,"line_start":219,"line_end":219,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63503,"byte_end":63518,"line_start":229,"line_end":229,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a mutable [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63350,"byte_end":63396,"line_start":224,"line_end":224,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63398,"byte_end":63401,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63403,"byte_end":63443,"line_start":226,"line_end":226,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63445,"byte_end":63462,"line_start":227,"line_end":227,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63464,"byte_end":63494,"line_start":228,"line_end":228,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63686,"byte_end":63698,"line_start":235,"line_end":235,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying memory registers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63600,"byte_end":63666,"line_start":233,"line_end":233,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63668,"byte_end":63677,"line_start":234,"line_end":234,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63928,"byte_end":63944,"line_start":246,"line_end":246,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitArray<O, V>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying memory registers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63834,"byte_end":63908,"line_start":244,"line_end":244,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63910,"byte_end":63919,"line_start":245,"line_end":245,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64219,"byte_end":64227,"line_start":259,"line_end":259,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64108,"byte_end":64125,"line_start":256,"line_end":256,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64127,"byte_end":64157,"line_start":257,"line_end":257,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_raw_slice`\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64159,"byte_end":64210,"line_start":258,"line_end":258,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64410,"byte_end":64422,"line_start":267,"line_end":267,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64295,"byte_end":64312,"line_start":264,"line_end":264,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64314,"byte_end":64344,"line_start":265,"line_end":265,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_mut_raw_slice`\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64346,"byte_end":64401,"line_start":266,"line_end":266,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64576,"byte_end":64585,"line_start":274,"line_end":274,"column_start":9,"column_end":18},"name":"as_buffer","qualname":"<BitArray<O, V>>::as_buffer","value":"pub fn as_buffer(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Views the interior buffer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64486,"byte_end":64516,"line_start":271,"line_end":271,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64518,"byte_end":64535,"line_start":272,"line_end":272,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64537,"byte_end":64567,"line_start":273,"line_end":273,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64717,"byte_end":64730,"line_start":281,"line_end":281,"column_start":9,"column_end":22},"name":"as_mut_buffer","qualname":"<BitArray<O, V>>::as_mut_buffer","value":"pub fn as_mut_buffer(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Mutably views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Mutably views the interior buffer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64619,"byte_end":64657,"line_start":278,"line_end":278,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64659,"byte_end":64676,"line_start":279,"line_end":279,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64678,"byte_end":64708,"line_start":280,"line_end":280,"column_start":2,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":581},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":3566},{"krate":0,"index":3578},{"krate":0,"index":3553},{"krate":0,"index":3596},{"krate":0,"index":3608},{"krate":0,"index":3583},{"krate":0,"index":639},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":3626},{"krate":0,"index":3637},{"krate":0,"index":3613},{"krate":0,"index":3654},{"krate":0,"index":3665},{"krate":0,"index":3641},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":658},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":3669},{"krate":0,"index":3672},{"krate":0,"index":3675},{"krate":0,"index":3678}],"decl_id":null,"docs":" Representations of the [`BitSlice`] region memory model.","sig":null,"attributes":[{"value":"* Representations of the [`BitSlice`] region memory model.\n\nThis module allows any [`BitSlice`] region to be decomposed into domains that\nrestricts [`T::Alias`] markers to only the edge elements that may require them.\n\nSpecifically, any given [`BitSlice`] region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the [`BitSlice`] handle\nare known to not have any other write-capable handles to them, and in the case\nof an `&mut BitSlice` handle specifically, no other views at all. As such, the\ndomain view of this memory is able to remove the aliasing marker type and permit\ndirect memory access to the underlying buffer for the duration of its existence.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`T::Alias`]: crate::store::BitStore::Alias\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":85242,"byte_end":86130,"line_start":1,"line_end":19,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":3566},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95583,"byte_end":95592,"line_start":363,"line_end":363,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Unalias>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3570},{"krate":0,"index":3574}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86508,"byte_end":86569,"line_start":53,"line_end":53,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86572,"byte_end":86589,"line_start":54,"line_end":54,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86592,"byte_end":86595,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86598,"byte_end":86667,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86670,"byte_end":86736,"line_start":57,"line_end":57,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86739,"byte_end":86810,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86813,"byte_end":86882,"line_start":59,"line_end":59,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86885,"byte_end":86956,"line_start":60,"line_end":60,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86959,"byte_end":87027,"line_start":61,"line_end":61,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87030,"byte_end":87076,"line_start":62,"line_end":62,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87079,"byte_end":87082,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87085,"byte_end":87157,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87160,"byte_end":87223,"line_start":65,"line_end":65,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87226,"byte_end":87280,"line_start":66,"line_end":66,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87283,"byte_end":87286,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87289,"byte_end":87356,"line_start":68,"line_end":68,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87359,"byte_end":87431,"line_start":69,"line_end":69,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87434,"byte_end":87486,"line_start":70,"line_end":70,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87489,"byte_end":87492,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87495,"byte_end":87567,"line_start":72,"line_end":72,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87570,"byte_end":87638,"line_start":73,"line_end":73,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87641,"byte_end":87651,"line_start":74,"line_end":74,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87654,"byte_end":87657,"line_start":75,"line_end":75,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87660,"byte_end":87675,"line_start":76,"line_end":76,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87678,"byte_end":87681,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87684,"byte_end":87740,"line_start":78,"line_end":78,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87743,"byte_end":87746,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87749,"byte_end":87770,"line_start":80,"line_end":80,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87773,"byte_end":87776,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87779,"byte_end":87842,"line_start":82,"line_end":82,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87845,"byte_end":87908,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87911,"byte_end":87948,"line_start":84,"line_end":84,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87951,"byte_end":87954,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87957,"byte_end":87981,"line_start":86,"line_end":86,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87984,"byte_end":87987,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87990,"byte_end":88060,"line_start":88,"line_end":88,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88063,"byte_end":88131,"line_start":89,"line_end":89,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88134,"byte_end":88158,"line_start":90,"line_end":90,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88161,"byte_end":88164,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88167,"byte_end":88207,"line_start":92,"line_end":92,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88210,"byte_end":88247,"line_start":93,"line_end":93,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88250,"byte_end":88293,"line_start":94,"line_end":94,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":3596},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95607,"byte_end":95619,"line_start":364,"line_end":364,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Unalias>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3600},{"krate":0,"index":3604}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86508,"byte_end":86569,"line_start":53,"line_end":53,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86572,"byte_end":86589,"line_start":54,"line_end":54,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86592,"byte_end":86595,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86598,"byte_end":86667,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86670,"byte_end":86736,"line_start":57,"line_end":57,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86739,"byte_end":86810,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86813,"byte_end":86882,"line_start":59,"line_end":59,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86885,"byte_end":86956,"line_start":60,"line_end":60,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86959,"byte_end":87027,"line_start":61,"line_end":61,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87030,"byte_end":87076,"line_start":62,"line_end":62,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87079,"byte_end":87082,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87085,"byte_end":87157,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87160,"byte_end":87223,"line_start":65,"line_end":65,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87226,"byte_end":87280,"line_start":66,"line_end":66,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87283,"byte_end":87286,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87289,"byte_end":87356,"line_start":68,"line_end":68,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87359,"byte_end":87431,"line_start":69,"line_end":69,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87434,"byte_end":87486,"line_start":70,"line_end":70,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87489,"byte_end":87492,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87495,"byte_end":87567,"line_start":72,"line_end":72,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87570,"byte_end":87638,"line_start":73,"line_end":73,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87641,"byte_end":87651,"line_start":74,"line_end":74,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87654,"byte_end":87657,"line_start":75,"line_end":75,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87660,"byte_end":87675,"line_start":76,"line_end":76,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87678,"byte_end":87681,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87684,"byte_end":87740,"line_start":78,"line_end":78,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87743,"byte_end":87746,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87749,"byte_end":87770,"line_start":80,"line_end":80,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87773,"byte_end":87776,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87779,"byte_end":87842,"line_start":82,"line_end":82,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87845,"byte_end":87908,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87911,"byte_end":87948,"line_start":84,"line_end":84,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87951,"byte_end":87954,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87957,"byte_end":87981,"line_start":86,"line_end":86,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87984,"byte_end":87987,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87990,"byte_end":88060,"line_start":88,"line_end":88,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88063,"byte_end":88131,"line_start":89,"line_end":89,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88134,"byte_end":88158,"line_start":90,"line_end":90,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88161,"byte_end":88164,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88167,"byte_end":88207,"line_start":92,"line_end":92,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88210,"byte_end":88247,"line_start":93,"line_end":93,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88250,"byte_end":88293,"line_start":94,"line_end":94,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":3626},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":103973,"byte_end":103979,"line_start":652,"line_end":652,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        body: &'a [T::Unalias],\n        tail: Option<(&'a T, BitEnd<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3629},{"krate":0,"index":3633}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95953,"byte_end":96014,"line_start":387,"line_end":387,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96017,"byte_end":96034,"line_start":388,"line_end":388,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96037,"byte_end":96040,"line_start":389,"line_end":389,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96043,"byte_end":96112,"line_start":390,"line_end":390,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96115,"byte_end":96181,"line_start":391,"line_end":391,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96184,"byte_end":96255,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96258,"byte_end":96327,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96330,"byte_end":96401,"line_start":394,"line_end":394,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96404,"byte_end":96472,"line_start":395,"line_end":395,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96475,"byte_end":96521,"line_start":396,"line_end":396,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96524,"byte_end":96527,"line_start":397,"line_end":397,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96530,"byte_end":96594,"line_start":398,"line_end":398,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96597,"byte_end":96668,"line_start":399,"line_end":399,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96671,"byte_end":96742,"line_start":400,"line_end":400,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96745,"byte_end":96811,"line_start":401,"line_end":401,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96814,"byte_end":96875,"line_start":402,"line_end":402,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96878,"byte_end":96881,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96884,"byte_end":96899,"line_start":404,"line_end":404,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96902,"byte_end":96905,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96908,"byte_end":96964,"line_start":406,"line_end":406,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96967,"byte_end":96970,"line_start":407,"line_end":407,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96973,"byte_end":96994,"line_start":408,"line_end":408,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96997,"byte_end":97000,"line_start":409,"line_end":409,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97003,"byte_end":97066,"line_start":410,"line_end":410,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97069,"byte_end":97106,"line_start":411,"line_end":411,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97109,"byte_end":97112,"line_start":412,"line_end":412,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97115,"byte_end":97131,"line_start":413,"line_end":413,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97134,"byte_end":97137,"line_start":414,"line_end":414,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97140,"byte_end":97209,"line_start":415,"line_end":415,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97212,"byte_end":97283,"line_start":416,"line_end":416,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97286,"byte_end":97357,"line_start":417,"line_end":417,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97360,"byte_end":97432,"line_start":418,"line_end":418,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97435,"byte_end":97497,"line_start":419,"line_end":419,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97500,"byte_end":97571,"line_start":420,"line_end":420,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97574,"byte_end":97584,"line_start":421,"line_end":421,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97587,"byte_end":97590,"line_start":422,"line_end":422,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97593,"byte_end":97660,"line_start":423,"line_end":423,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97663,"byte_end":97727,"line_start":424,"line_end":424,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97730,"byte_end":97797,"line_start":425,"line_end":425,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97800,"byte_end":97872,"line_start":426,"line_end":426,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97875,"byte_end":97945,"line_start":427,"line_end":427,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97948,"byte_end":97951,"line_start":428,"line_end":428,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97954,"byte_end":97997,"line_start":429,"line_end":429,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98000,"byte_end":98049,"line_start":430,"line_end":430,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98052,"byte_end":98092,"line_start":431,"line_end":431,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98095,"byte_end":98144,"line_start":432,"line_end":432,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98147,"byte_end":98194,"line_start":433,"line_end":433,"column_start":3,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":3654},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":103990,"byte_end":103999,"line_start":653,"line_end":653,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Access,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Access)>,\n        body: &'a mut [T::Unalias],\n        tail: Option<(&'a T::Access, BitEnd<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3657},{"krate":0,"index":3661}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95953,"byte_end":96014,"line_start":387,"line_end":387,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96017,"byte_end":96034,"line_start":388,"line_end":388,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96037,"byte_end":96040,"line_start":389,"line_end":389,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96043,"byte_end":96112,"line_start":390,"line_end":390,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96115,"byte_end":96181,"line_start":391,"line_end":391,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96184,"byte_end":96255,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96258,"byte_end":96327,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96330,"byte_end":96401,"line_start":394,"line_end":394,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96404,"byte_end":96472,"line_start":395,"line_end":395,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96475,"byte_end":96521,"line_start":396,"line_end":396,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96524,"byte_end":96527,"line_start":397,"line_end":397,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96530,"byte_end":96594,"line_start":398,"line_end":398,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96597,"byte_end":96668,"line_start":399,"line_end":399,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96671,"byte_end":96742,"line_start":400,"line_end":400,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96745,"byte_end":96811,"line_start":401,"line_end":401,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96814,"byte_end":96875,"line_start":402,"line_end":402,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96878,"byte_end":96881,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96884,"byte_end":96899,"line_start":404,"line_end":404,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96902,"byte_end":96905,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96908,"byte_end":96964,"line_start":406,"line_end":406,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96967,"byte_end":96970,"line_start":407,"line_end":407,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96973,"byte_end":96994,"line_start":408,"line_end":408,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96997,"byte_end":97000,"line_start":409,"line_end":409,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97003,"byte_end":97066,"line_start":410,"line_end":410,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97069,"byte_end":97106,"line_start":411,"line_end":411,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97109,"byte_end":97112,"line_start":412,"line_end":412,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97115,"byte_end":97131,"line_start":413,"line_end":413,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97134,"byte_end":97137,"line_start":414,"line_end":414,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97140,"byte_end":97209,"line_start":415,"line_end":415,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97212,"byte_end":97283,"line_start":416,"line_end":416,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97286,"byte_end":97357,"line_start":417,"line_end":417,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97360,"byte_end":97432,"line_start":418,"line_end":418,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97435,"byte_end":97497,"line_start":419,"line_end":419,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97500,"byte_end":97571,"line_start":420,"line_end":420,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97574,"byte_end":97584,"line_start":421,"line_end":421,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97587,"byte_end":97590,"line_start":422,"line_end":422,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97593,"byte_end":97660,"line_start":423,"line_end":423,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97663,"byte_end":97727,"line_start":424,"line_end":424,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97730,"byte_end":97797,"line_start":425,"line_end":425,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97800,"byte_end":97872,"line_start":426,"line_end":426,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97875,"byte_end":97945,"line_start":427,"line_end":427,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97948,"byte_end":97951,"line_start":428,"line_end":428,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97954,"byte_end":97997,"line_start":429,"line_end":429,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98000,"byte_end":98049,"line_start":430,"line_end":430,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98052,"byte_end":98092,"line_start":431,"line_end":431,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98095,"byte_end":98144,"line_start":432,"line_end":432,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98147,"byte_end":98194,"line_start":433,"line_end":433,"column_start":3,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":673},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":739},{"krate":0,"index":749},{"krate":0,"index":759},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":777},{"krate":0,"index":782},{"krate":0,"index":785}],"decl_id":null,"docs":" Batched load/store access to bitfields.","sig":null,"attributes":[{"value":"* Batched load/store access to bitfields.\n\nThis module provides load/store access to bitfield regions that emulates the\nordinary memory bus. This functionality enables any [`BitSlice`] span to be used\nas a memory region, and provides the basis of a library-level analogue to the\nbitfield language feature found in C and C++. Additionally, orderings that have\ncontiguous positions can transfer more than one bit in an operation, allowing a\nperformance acceleration over sequential bit-by-bit traversal.\n\nThe [`BitField`] trait is open for implementation. Rust’s implementation rules\ncurrently disallow a crate to implement a foreign trait on a foreign type, even\nwhen parameterized over a local type. If you need such a `BitField`\nimplementation with a new `BitOrder` type, please file an issue.\n\n# Batched Behavior\n\nThe first purpose of [`BitField`] is to provide access to [`BitSlice`] regions\nas if they were an ordinary memory location. However, this can be done through\nthe `BitSlice` sequential API. The second purpose of this trait is to accelerate\nsuch access by using the parallel memory bus to transfer more than one bit at a\ntime when the region permits it. As such, implementors should provide a transfer\nbehavior based on shift/mask operations wherever possible, for as wide a span in\na memory element as possible.\n\n# Register Bit Order Preservation\n\nAs a default assumption, each element of the underlying memory region used to\nstore part of a value should not reörder the bit-pattern of that value. While\nthe [`BitOrder`] argument is used to determine which segments of the memory\nregister are live for the purposes of this transfer, it should not be used to\nmap each individual bit of the transferred value to a corresponding bit of the\nstorage element. As an example, the [`Lsb0`] and [`Msb0`] implementations both\nstore the value `12u8` in memory as a four-bit span with its two\nmore-significant bits set and its two less-significant bits cleared; the\ndifference is only in *which* bits of an element are used to store the span.\n\n# Endianness\n\nThe `_le` and `_be` methods of [`BitField`] refer to the order in which\nsuccessive `T` elements of a storage region are assigned numeric significance\nduring a transfer. Within any particular `T` element, the ordering of its memory\nis not governed by the `BitField` trait.\n\nThe provided [`BitOrder`] implementors [`Lsb0`] and [`Msb0`] use the local\nmachine’s byte ordering, and do not reörder bytes during transfer.\n\n## `_le` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_le`]\nbreaks `M` into chunks from the least significant edge. The least significant\nchunk is placed in the lowest-addressed element `T`, then the next more\nsignificant chunk is placed in the successive address, until the most\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_le`]\nuses the same chunking behavior: the lowest-addressed `T` contains the least\nsignificant chunk of the returned `M`, then each successive address contains a\nmore significant chunk, until the highest address contains the most significant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b11010_011;\n//              STUVW XYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b011_00000, 0b000_11010],\n//   XYZ               STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b00000_011, 0b11010_000],\n//         XYZ    STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the lower three bits of `val` were placed into the element at the\nlower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which* three\nbits in the element were considered to be indexed by `5 .. 8`, but [`store_le`]\nalways placed the least three bits of `val`, *in ordinary register order*, into\nelement `[0]`. Similarly, the higher five bits of `val` were placed into element\n`[1]`; `Lsb0` and `Msb0` selected *which* five bits in the element were indexed\nby `8 .. 13`, and the bits retained their register order.\n\n## `_be` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_be`]\nbreaks `M` into chunks from the most significant edge. The most significant\nchunk is placed in the lowest-addressed element `T`, then the next less\nsignificant chunk is placed in the successive address, until the least\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_be`]\nuses the same chunking behavior: the lowest-addressed `T` contains the most\nsignificant chunk of the returned `M`, then each successive address contains a\nless significant chunk, until the highest address contains the least\nsignificant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b110_10011;\n//              STU VWXYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b110_00000, 0b000_10011],\n//   STU              VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b00000_110, 0b10011_000],\n//         STU    VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the higher three bits of `val` were placed into the element at\nthe lower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which*\nthree bits in the element were considered to be indexed by `5 .. 8`, but\n[`store_be`] always placed the greatest three bits of `val`, *in ordinary*\n*register order*, into element `[0]`. Similarly, the lower five bits of `val`\nwere placed into element `[1]`; `Lsb0` and `Msb0` selected *which* five bits in\nthe element were indexed by `8 .. 13`, and the bits retained their register\norder.\n\n# `M` and `T` Relationships\n\n`BitField` permits any type of (unsigned) integer `M` to be stored into or\nloaded from a bit-slice region with any storage type `T`. While the examples\nused `u8` for both, for brevity of writing out values, `BitField` will still\noperate correctly for any other combination of types.\n\n`Bitfield` implementations use the processor’s own concept of integer registers\nto operate. As such, the byte-wise memory access patterns for types wider than\n`u8` depends on your processor’s byte-endianness, as well as which `BitField`\nmethod and which `BitOrder` implementation you are using.\n\n`BitField` only operates within processor registers; traffic of `T` elements\nbetween the memory bank and the processor register is controlled entirely by the\nprocessor.\n\nIf you do not want to introduce the processor’s byte-endianness as a variable\nthat affects the in-memory representation of stored integers, stick to\n`BitSlice<_, u8>` as the bit-field driver. `BitSlice<Msb0, u8>` will fill memory\nin a way that matches a debugger or other memory inspections.\n\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`load_be`]: crate::field::BitField::load_be\n[`load_le`]: crate::field::BitField::load_le\n[`store_be`]: crate::field::BitField::store_be\n[`store_le`]: crate::field::BitField::store_le\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":106515,"byte_end":114385,"line_start":1,"line_end":201,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":726},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116731,"byte_end":116739,"line_start":282,"line_end":282,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":737}],"decl_id":null,"docs":" Performs C-style bitfield access through a [`BitSlice`].","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a [`BitSlice`].\n\nThis trait transfers data between a [`BitSlice`] region and a local integer. The\ntrait functions always place the live bits of the value against the least\nsignificant bit edge of the local integer (the return value of the load methods,\nand the argument value of the store methods).\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no more than the [`M::BITS`] element width.\n\n# Target-Specific Behavior\n\nWhen you are using this trait to manage memory that never leaves your machine,\nyou can use the [`load`] and [`store`] methods. However, if you are using this\ntrait to operate on a de/serialization buffer, where the exact bit pattern in\nmemory is important to your work and/or you need to be aware of the processor\nbyte endianness, you must not use these methods.\n\nInstead, use [`load_le`], [`load_be`], [`store_le`], or[`store_be`] directly.\n\nThe un-suffixed methods choose their implementation based on the target\nprocessor byte endianness; the suffixed methods have a consistent and fixed\nbehavior.\n\n# Element- and Bit- Ordering Combinations\n\nThe `_le` and `_be` method suffices refer to the significance of successive\nelements `T` in memory, while the `BitOrder` trait refers to the order that bits\nwithin a single element `T` are traversed. The `BitField` methods and the\n`BitOrder` implementors are ***not*** related.\n\nWhen a load or store operation is contained in only one memory element, then the\n`_le` and `_be` methods have the same behavior. They differ when the operation\nmust touch more than one element.\n\nThe module documentation contains a more detailed explanation, and examples, for\nthis behavior.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`M::BITS`]: funty::IsNumber::BITS\n[`load`]: Self::load\n[`load_be`]: Self::load_be\n[`load_le`]: Self::load_le\n[`store`]: Self::store\n[`store_be`]: Self::store_be\n[`store_le`]: Self::store_le\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":114756,"byte_end":116720,"line_start":235,"line_end":281,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118207,"byte_end":118211,"line_start":323,"line_end":323,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116743,"byte_end":116802,"line_start":283,"line_end":283,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116804,"byte_end":116807,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116809,"byte_end":116876,"line_start":285,"line_end":285,"column_start":2,"column_end":69}},{"value":"/ [`BitMemory`]. Any further transformation must be done by the user.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116878,"byte_end":116949,"line_start":286,"line_end":286,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116951,"byte_end":116954,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116956,"byte_end":116986,"line_start":288,"line_end":288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116988,"byte_end":116991,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116993,"byte_end":117054,"line_start":290,"line_end":290,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117056,"byte_end":117059,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117061,"byte_end":117129,"line_start":292,"line_end":292,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117131,"byte_end":117197,"line_start":293,"line_end":293,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117199,"byte_end":117221,"line_start":294,"line_end":294,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117223,"byte_end":117226,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ If you are using this function from a region that crosses multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117228,"byte_end":117298,"line_start":296,"line_end":296,"column_start":2,"column_end":72}},{"value":"/ elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117300,"byte_end":117367,"line_start":297,"line_end":297,"column_start":2,"column_end":69}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117369,"byte_end":117423,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117425,"byte_end":117428,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117430,"byte_end":117446,"line_start":300,"line_end":300,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117448,"byte_end":117451,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117453,"byte_end":117527,"line_start":302,"line_end":302,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117529,"byte_end":117605,"line_start":303,"line_end":303,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117607,"byte_end":117683,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117685,"byte_end":117697,"line_start":305,"line_end":305,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117699,"byte_end":117702,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117704,"byte_end":117717,"line_start":307,"line_end":307,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117719,"byte_end":117722,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117724,"byte_end":117799,"line_start":309,"line_end":309,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117801,"byte_end":117824,"line_start":310,"line_end":310,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117826,"byte_end":117829,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117831,"byte_end":117843,"line_start":312,"line_end":312,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117845,"byte_end":117848,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117850,"byte_end":117924,"line_start":314,"line_end":314,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117926,"byte_end":117949,"line_start":315,"line_end":315,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117951,"byte_end":117954,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117956,"byte_end":117996,"line_start":317,"line_end":317,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117998,"byte_end":118036,"line_start":318,"line_end":318,"column_start":2,"column_end":40}},{"value":"/ [`load_be`]: Self::load_be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118038,"byte_end":118068,"line_start":319,"line_end":319,"column_start":2,"column_end":32}},{"value":"/ [`load_le`]: Self::load_le","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118070,"byte_end":118100,"line_start":320,"line_end":320,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118102,"byte_end":118149,"line_start":321,"line_end":321,"column_start":2,"column_end":49}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118186,"byte_end":118200,"line_start":322,"line_end":322,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119980,"byte_end":119985,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118382,"byte_end":118452,"line_start":332,"line_end":332,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118454,"byte_end":118457,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118459,"byte_end":118522,"line_start":334,"line_end":334,"column_start":2,"column_end":65}},{"value":"/ [`BitMemory`]. Any other types must first be transformed by the user.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118524,"byte_end":118597,"line_start":335,"line_end":335,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118599,"byte_end":118602,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118604,"byte_end":118634,"line_start":337,"line_end":337,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118636,"byte_end":118639,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118641,"byte_end":118702,"line_start":339,"line_end":339,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118704,"byte_end":118707,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118709,"byte_end":118778,"line_start":341,"line_end":341,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118780,"byte_end":118847,"line_start":342,"line_end":342,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118849,"byte_end":118871,"line_start":343,"line_end":343,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118873,"byte_end":118876,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ If you are using this function to store into a region that crosses","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118878,"byte_end":118948,"line_start":345,"line_end":345,"column_start":2,"column_end":72}},{"value":"/ multiple elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118950,"byte_end":119026,"line_start":346,"line_end":346,"column_start":2,"column_end":78}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119028,"byte_end":119082,"line_start":347,"line_end":347,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119084,"byte_end":119087,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119089,"byte_end":119105,"line_start":349,"line_end":349,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119107,"byte_end":119110,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119112,"byte_end":119188,"line_start":351,"line_end":351,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119190,"byte_end":119264,"line_start":352,"line_end":352,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119266,"byte_end":119340,"line_start":353,"line_end":353,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119342,"byte_end":119361,"line_start":354,"line_end":354,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119363,"byte_end":119438,"line_start":355,"line_end":355,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119440,"byte_end":119465,"line_start":356,"line_end":356,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119467,"byte_end":119470,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119472,"byte_end":119486,"line_start":358,"line_end":358,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119488,"byte_end":119491,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119493,"byte_end":119566,"line_start":360,"line_end":360,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119568,"byte_end":119593,"line_start":361,"line_end":361,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119595,"byte_end":119598,"line_start":362,"line_end":362,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119600,"byte_end":119612,"line_start":363,"line_end":363,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119614,"byte_end":119617,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119619,"byte_end":119693,"line_start":365,"line_end":365,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119695,"byte_end":119718,"line_start":366,"line_end":366,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119720,"byte_end":119723,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119725,"byte_end":119765,"line_start":368,"line_end":368,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119767,"byte_end":119805,"line_start":369,"line_end":369,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119807,"byte_end":119854,"line_start":370,"line_end":370,"column_start":2,"column_end":49}},{"value":"/ [`store_be`]: Self::store_be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119856,"byte_end":119888,"line_start":371,"line_end":371,"column_start":2,"column_end":34}},{"value":"/ [`store_le`]: Self::store_le","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119890,"byte_end":119922,"line_start":372,"line_end":372,"column_start":2,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119959,"byte_end":119973,"line_start":373,"line_end":373,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122732,"byte_end":122739,"line_start":463,"line_end":463,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120153,"byte_end":120217,"line_start":383,"line_end":383,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120219,"byte_end":120222,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120224,"byte_end":120294,"line_start":385,"line_end":385,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120296,"byte_end":120369,"line_start":386,"line_end":386,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120371,"byte_end":120446,"line_start":387,"line_end":387,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120448,"byte_end":120510,"line_start":388,"line_end":388,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120512,"byte_end":120515,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120517,"byte_end":120533,"line_start":390,"line_end":390,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120535,"byte_end":120538,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120540,"byte_end":120614,"line_start":392,"line_end":392,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120616,"byte_end":120692,"line_start":393,"line_end":393,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120694,"byte_end":120770,"line_start":394,"line_end":394,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120772,"byte_end":120784,"line_start":395,"line_end":395,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120786,"byte_end":120789,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120791,"byte_end":120804,"line_start":397,"line_end":397,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120806,"byte_end":120809,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120811,"byte_end":120886,"line_start":399,"line_end":399,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120888,"byte_end":120959,"line_start":400,"line_end":400,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120961,"byte_end":121034,"line_start":401,"line_end":401,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121036,"byte_end":121112,"line_start":402,"line_end":402,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121114,"byte_end":121158,"line_start":403,"line_end":403,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121160,"byte_end":121163,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121165,"byte_end":121177,"line_start":405,"line_end":405,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121179,"byte_end":121182,"line_start":406,"line_end":406,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121184,"byte_end":121258,"line_start":407,"line_end":407,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121260,"byte_end":121283,"line_start":408,"line_end":408,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121285,"byte_end":121288,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121290,"byte_end":121304,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121306,"byte_end":121309,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121311,"byte_end":121382,"line_start":412,"line_end":412,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121384,"byte_end":121397,"line_start":413,"line_end":413,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121399,"byte_end":121402,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121404,"byte_end":121415,"line_start":415,"line_end":415,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121417,"byte_end":121444,"line_start":416,"line_end":416,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121446,"byte_end":121449,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121451,"byte_end":121479,"line_start":418,"line_end":418,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121481,"byte_end":121513,"line_start":419,"line_end":419,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121515,"byte_end":121530,"line_start":420,"line_end":420,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121532,"byte_end":121575,"line_start":421,"line_end":421,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121577,"byte_end":121615,"line_start":422,"line_end":422,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121617,"byte_end":121620,"line_start":423,"line_end":423,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121622,"byte_end":121644,"line_start":424,"line_end":424,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1011_1000, 0b1_0000000","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121646,"byte_end":121689,"line_start":425,"line_end":425,"column_start":2,"column_end":45}},{"value":"/ //        XYZ    PQRS TUVW    O","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121691,"byte_end":121726,"line_start":426,"line_end":426,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121728,"byte_end":121735,"line_start":427,"line_end":427,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121737,"byte_end":121740,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121742,"byte_end":121780,"line_start":429,"line_end":429,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121782,"byte_end":121797,"line_start":430,"line_end":430,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121799,"byte_end":121823,"line_start":431,"line_end":431,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121825,"byte_end":121840,"line_start":432,"line_end":432,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121842,"byte_end":121852,"line_start":433,"line_end":433,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121854,"byte_end":121883,"line_start":434,"line_end":434,"column_start":2,"column_end":31}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121885,"byte_end":121913,"line_start":435,"line_end":435,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121915,"byte_end":121921,"line_start":436,"line_end":436,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121923,"byte_end":121930,"line_start":437,"line_end":437,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121932,"byte_end":121935,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121937,"byte_end":122006,"line_start":439,"line_end":439,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementors:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122008,"byte_end":122046,"line_start":440,"line_end":440,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122048,"byte_end":122051,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122053,"byte_end":122064,"line_start":442,"line_end":442,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122066,"byte_end":122093,"line_start":443,"line_end":443,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122095,"byte_end":122098,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122100,"byte_end":122163,"line_start":445,"line_end":445,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122165,"byte_end":122239,"line_start":446,"line_end":446,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122241,"byte_end":122308,"line_start":447,"line_end":447,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122310,"byte_end":122369,"line_start":448,"line_end":448,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122371,"byte_end":122419,"line_start":449,"line_end":449,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122421,"byte_end":122424,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122426,"byte_end":122441,"line_start":451,"line_end":451,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122443,"byte_end":122499,"line_start":452,"line_end":452,"column_start":2,"column_end":58}},{"value":"/   0b111001,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122501,"byte_end":122516,"line_start":453,"line_end":453,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122518,"byte_end":122524,"line_start":454,"line_end":454,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122526,"byte_end":122541,"line_start":455,"line_end":455,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122543,"byte_end":122599,"line_start":456,"line_end":456,"column_start":2,"column_end":58}},{"value":"/   0b000111,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122601,"byte_end":122616,"line_start":457,"line_end":457,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122618,"byte_end":122624,"line_start":458,"line_end":458,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122626,"byte_end":122633,"line_start":459,"line_end":459,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122635,"byte_end":122638,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122640,"byte_end":122678,"line_start":461,"line_end":461,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122680,"byte_end":122727,"line_start":462,"line_end":462,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125382,"byte_end":125389,"line_start":547,"line_end":547,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122778,"byte_end":122839,"line_start":466,"line_end":466,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122841,"byte_end":122844,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122846,"byte_end":122915,"line_start":468,"line_end":468,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122917,"byte_end":122991,"line_start":469,"line_end":469,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122993,"byte_end":123068,"line_start":470,"line_end":470,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123070,"byte_end":123132,"line_start":471,"line_end":471,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123134,"byte_end":123137,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123139,"byte_end":123155,"line_start":473,"line_end":473,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123157,"byte_end":123160,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123162,"byte_end":123236,"line_start":475,"line_end":475,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123238,"byte_end":123314,"line_start":476,"line_end":476,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123316,"byte_end":123392,"line_start":477,"line_end":477,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123394,"byte_end":123406,"line_start":478,"line_end":478,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123408,"byte_end":123411,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123413,"byte_end":123426,"line_start":480,"line_end":480,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123428,"byte_end":123431,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123433,"byte_end":123508,"line_start":482,"line_end":482,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123510,"byte_end":123581,"line_start":483,"line_end":483,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123583,"byte_end":123655,"line_start":484,"line_end":484,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123657,"byte_end":123733,"line_start":485,"line_end":485,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123735,"byte_end":123780,"line_start":486,"line_end":486,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123782,"byte_end":123785,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123787,"byte_end":123799,"line_start":488,"line_end":488,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123801,"byte_end":123804,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123806,"byte_end":123880,"line_start":490,"line_end":490,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123882,"byte_end":123905,"line_start":491,"line_end":491,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123907,"byte_end":123910,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123912,"byte_end":123926,"line_start":493,"line_end":493,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123928,"byte_end":123931,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123933,"byte_end":124004,"line_start":495,"line_end":495,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124006,"byte_end":124019,"line_start":496,"line_end":496,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124021,"byte_end":124024,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124026,"byte_end":124037,"line_start":498,"line_end":498,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124039,"byte_end":124066,"line_start":499,"line_end":499,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124068,"byte_end":124071,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124073,"byte_end":124101,"line_start":501,"line_end":501,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124103,"byte_end":124135,"line_start":502,"line_end":502,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124137,"byte_end":124152,"line_start":503,"line_end":503,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124154,"byte_end":124197,"line_start":504,"line_end":504,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124199,"byte_end":124237,"line_start":505,"line_end":505,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124239,"byte_end":124242,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124244,"byte_end":124266,"line_start":507,"line_end":507,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1000_1011, 0b1_0000000","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124268,"byte_end":124311,"line_start":508,"line_end":508,"column_start":2,"column_end":45}},{"value":"/ //        OPQ    RSTU VWXY    Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124313,"byte_end":124348,"line_start":509,"line_end":509,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124350,"byte_end":124357,"line_start":510,"line_end":510,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124359,"byte_end":124362,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124364,"byte_end":124402,"line_start":512,"line_end":512,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124404,"byte_end":124419,"line_start":513,"line_end":513,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124421,"byte_end":124445,"line_start":514,"line_end":514,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124447,"byte_end":124462,"line_start":515,"line_end":515,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124464,"byte_end":124474,"line_start":516,"line_end":516,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124476,"byte_end":124505,"line_start":517,"line_end":517,"column_start":2,"column_end":31}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124507,"byte_end":124535,"line_start":518,"line_end":518,"column_start":2,"column_end":30}},{"value":"/ # \"{:012b}\",","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124537,"byte_end":124553,"line_start":519,"line_end":519,"column_start":2,"column_end":18}},{"value":"/ # val,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124555,"byte_end":124565,"line_start":520,"line_end":520,"column_start":2,"column_end":12}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124567,"byte_end":124573,"line_start":521,"line_end":521,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124575,"byte_end":124582,"line_start":522,"line_end":522,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124584,"byte_end":124587,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124589,"byte_end":124658,"line_start":524,"line_end":524,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124660,"byte_end":124701,"line_start":525,"line_end":525,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124703,"byte_end":124706,"line_start":526,"line_end":526,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124708,"byte_end":124719,"line_start":527,"line_end":527,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124721,"byte_end":124748,"line_start":528,"line_end":528,"column_start":2,"column_end":29}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124750,"byte_end":124813,"line_start":529,"line_end":529,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124815,"byte_end":124889,"line_start":530,"line_end":530,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124891,"byte_end":124958,"line_start":531,"line_end":531,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124960,"byte_end":125019,"line_start":532,"line_end":532,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125021,"byte_end":125069,"line_start":533,"line_end":533,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125071,"byte_end":125074,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125076,"byte_end":125091,"line_start":535,"line_end":535,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125093,"byte_end":125149,"line_start":536,"line_end":536,"column_start":2,"column_end":58}},{"value":"/   0b011110,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125151,"byte_end":125166,"line_start":537,"line_end":537,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125168,"byte_end":125174,"line_start":538,"line_end":538,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125176,"byte_end":125191,"line_start":539,"line_end":539,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125193,"byte_end":125249,"line_start":540,"line_end":540,"column_start":2,"column_end":58}},{"value":"/   0b110001,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125251,"byte_end":125266,"line_start":541,"line_end":541,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125268,"byte_end":125274,"line_start":542,"line_end":542,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125276,"byte_end":125283,"line_start":543,"line_end":543,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125285,"byte_end":125288,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125290,"byte_end":125328,"line_start":545,"line_end":545,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125330,"byte_end":125377,"line_start":546,"line_end":546,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128301,"byte_end":128309,"line_start":631,"line_end":631,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125428,"byte_end":125489,"line_start":550,"line_end":550,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125491,"byte_end":125494,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125496,"byte_end":125566,"line_start":552,"line_end":552,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125568,"byte_end":125641,"line_start":553,"line_end":553,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125643,"byte_end":125718,"line_start":554,"line_end":554,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125720,"byte_end":125782,"line_start":555,"line_end":555,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125784,"byte_end":125787,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125789,"byte_end":125805,"line_start":557,"line_end":557,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125807,"byte_end":125810,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125812,"byte_end":125888,"line_start":559,"line_end":559,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125890,"byte_end":125964,"line_start":560,"line_end":560,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125966,"byte_end":126040,"line_start":561,"line_end":561,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126042,"byte_end":126061,"line_start":562,"line_end":562,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126063,"byte_end":126138,"line_start":563,"line_end":563,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126140,"byte_end":126165,"line_start":564,"line_end":564,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126167,"byte_end":126170,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126172,"byte_end":126186,"line_start":566,"line_end":566,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126188,"byte_end":126191,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126193,"byte_end":126266,"line_start":568,"line_end":568,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126268,"byte_end":126341,"line_start":569,"line_end":569,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126343,"byte_end":126416,"line_start":570,"line_end":570,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126418,"byte_end":126494,"line_start":571,"line_end":571,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126496,"byte_end":126540,"line_start":572,"line_end":572,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126542,"byte_end":126545,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126547,"byte_end":126559,"line_start":574,"line_end":574,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126561,"byte_end":126564,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126566,"byte_end":126640,"line_start":576,"line_end":576,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126642,"byte_end":126665,"line_start":577,"line_end":577,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126667,"byte_end":126670,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126672,"byte_end":126686,"line_start":579,"line_end":579,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126688,"byte_end":126691,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126693,"byte_end":126764,"line_start":581,"line_end":581,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126766,"byte_end":126779,"line_start":582,"line_end":582,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126781,"byte_end":126784,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126786,"byte_end":126797,"line_start":584,"line_end":584,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126799,"byte_end":126826,"line_start":585,"line_end":585,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126828,"byte_end":126831,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126833,"byte_end":126861,"line_start":587,"line_end":587,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126863,"byte_end":126895,"line_start":588,"line_end":588,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126897,"byte_end":126912,"line_start":589,"line_end":589,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126914,"byte_end":126957,"line_start":590,"line_end":590,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126959,"byte_end":126997,"line_start":591,"line_end":591,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126999,"byte_end":127002,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127004,"byte_end":127026,"line_start":593,"line_end":593,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1011_1000, 0b0000000_1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127028,"byte_end":127071,"line_start":594,"line_end":594,"column_start":2,"column_end":45}},{"value":"/ //  XYZ          PQRS TUVW            O","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127073,"byte_end":127116,"line_start":595,"line_end":595,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127118,"byte_end":127125,"line_start":596,"line_end":596,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127127,"byte_end":127130,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127132,"byte_end":127170,"line_start":598,"line_end":598,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127172,"byte_end":127187,"line_start":599,"line_end":599,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127189,"byte_end":127213,"line_start":600,"line_end":600,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127215,"byte_end":127230,"line_start":601,"line_end":601,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127232,"byte_end":127242,"line_start":602,"line_end":602,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110u16,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127244,"byte_end":127276,"line_start":603,"line_end":603,"column_start":2,"column_end":34}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127278,"byte_end":127306,"line_start":604,"line_end":604,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127308,"byte_end":127314,"line_start":605,"line_end":605,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127316,"byte_end":127323,"line_start":606,"line_end":606,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127325,"byte_end":127328,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127330,"byte_end":127397,"line_start":608,"line_end":608,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127399,"byte_end":127440,"line_start":609,"line_end":609,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127442,"byte_end":127445,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127447,"byte_end":127458,"line_start":611,"line_end":611,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127460,"byte_end":127487,"line_start":612,"line_end":612,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127489,"byte_end":127534,"line_start":613,"line_end":613,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127536,"byte_end":127581,"line_start":614,"line_end":614,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127583,"byte_end":127586,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127588,"byte_end":127656,"line_start":616,"line_end":616,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127658,"byte_end":127737,"line_start":617,"line_end":617,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127739,"byte_end":127811,"line_start":618,"line_end":618,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127813,"byte_end":127885,"line_start":619,"line_end":619,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127887,"byte_end":127951,"line_start":620,"line_end":620,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       16  19","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127953,"byte_end":128006,"line_start":621,"line_end":621,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128008,"byte_end":128011,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_le(0b111001u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128013,"byte_end":128054,"line_start":623,"line_end":623,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_le(0b000111u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128056,"byte_end":128097,"line_start":624,"line_end":624,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128099,"byte_end":128145,"line_start":625,"line_end":625,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128147,"byte_end":128193,"line_start":626,"line_end":626,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128195,"byte_end":128202,"line_start":627,"line_end":627,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128204,"byte_end":128207,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128209,"byte_end":128247,"line_start":629,"line_end":629,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128249,"byte_end":128296,"line_start":630,"line_end":630,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131227,"byte_end":131235,"line_start":715,"line_end":715,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128357,"byte_end":128415,"line_start":634,"line_end":634,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128417,"byte_end":128420,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128422,"byte_end":128491,"line_start":636,"line_end":636,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128493,"byte_end":128567,"line_start":637,"line_end":637,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128569,"byte_end":128644,"line_start":638,"line_end":638,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128646,"byte_end":128708,"line_start":639,"line_end":639,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128710,"byte_end":128713,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128715,"byte_end":128731,"line_start":641,"line_end":641,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128733,"byte_end":128736,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128738,"byte_end":128814,"line_start":643,"line_end":643,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128816,"byte_end":128890,"line_start":644,"line_end":644,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128892,"byte_end":128966,"line_start":645,"line_end":645,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128968,"byte_end":128987,"line_start":646,"line_end":646,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128989,"byte_end":129064,"line_start":647,"line_end":647,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129066,"byte_end":129091,"line_start":648,"line_end":648,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129093,"byte_end":129096,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129098,"byte_end":129112,"line_start":650,"line_end":650,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129114,"byte_end":129117,"line_start":651,"line_end":651,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129119,"byte_end":129192,"line_start":652,"line_end":652,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129194,"byte_end":129267,"line_start":653,"line_end":653,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129269,"byte_end":129341,"line_start":654,"line_end":654,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129343,"byte_end":129419,"line_start":655,"line_end":655,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129421,"byte_end":129466,"line_start":656,"line_end":656,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129468,"byte_end":129471,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129473,"byte_end":129485,"line_start":658,"line_end":658,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129487,"byte_end":129490,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129492,"byte_end":129566,"line_start":660,"line_end":660,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129568,"byte_end":129591,"line_start":661,"line_end":661,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129593,"byte_end":129596,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129598,"byte_end":129612,"line_start":663,"line_end":663,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129614,"byte_end":129617,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129619,"byte_end":129690,"line_start":665,"line_end":665,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129692,"byte_end":129705,"line_start":666,"line_end":666,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129707,"byte_end":129710,"line_start":667,"line_end":667,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129712,"byte_end":129723,"line_start":668,"line_end":668,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129725,"byte_end":129752,"line_start":669,"line_end":669,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129754,"byte_end":129757,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129759,"byte_end":129787,"line_start":671,"line_end":671,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129789,"byte_end":129821,"line_start":672,"line_end":672,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129823,"byte_end":129838,"line_start":673,"line_end":673,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129840,"byte_end":129883,"line_start":674,"line_end":674,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129885,"byte_end":129923,"line_start":675,"line_end":675,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129925,"byte_end":129928,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129930,"byte_end":129952,"line_start":677,"line_end":677,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1000_1011, 0b0000000_1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129954,"byte_end":129997,"line_start":678,"line_end":678,"column_start":2,"column_end":45}},{"value":"/ //  OPQ          RSTU VWXY            Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129999,"byte_end":130042,"line_start":679,"line_end":679,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130044,"byte_end":130051,"line_start":680,"line_end":680,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130053,"byte_end":130056,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130058,"byte_end":130096,"line_start":682,"line_end":682,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130098,"byte_end":130113,"line_start":683,"line_end":683,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130115,"byte_end":130139,"line_start":684,"line_end":684,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130141,"byte_end":130156,"line_start":685,"line_end":685,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130158,"byte_end":130168,"line_start":686,"line_end":686,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1u16,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130170,"byte_end":130202,"line_start":687,"line_end":687,"column_start":2,"column_end":34}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130204,"byte_end":130232,"line_start":688,"line_end":688,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130234,"byte_end":130240,"line_start":689,"line_end":689,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130242,"byte_end":130249,"line_start":690,"line_end":690,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130251,"byte_end":130254,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130256,"byte_end":130323,"line_start":692,"line_end":692,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130325,"byte_end":130366,"line_start":693,"line_end":693,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130368,"byte_end":130371,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130373,"byte_end":130384,"line_start":695,"line_end":695,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130386,"byte_end":130413,"line_start":696,"line_end":696,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130415,"byte_end":130460,"line_start":697,"line_end":697,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130462,"byte_end":130507,"line_start":698,"line_end":698,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130509,"byte_end":130512,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130514,"byte_end":130582,"line_start":700,"line_end":700,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130584,"byte_end":130663,"line_start":701,"line_end":701,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130665,"byte_end":130737,"line_start":702,"line_end":702,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130739,"byte_end":130811,"line_start":703,"line_end":703,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130813,"byte_end":130877,"line_start":704,"line_end":704,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       16  19","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130879,"byte_end":130932,"line_start":705,"line_end":705,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130934,"byte_end":130937,"line_start":706,"line_end":706,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_be(0b011110u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130939,"byte_end":130980,"line_start":707,"line_end":707,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_be(0b110001u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130982,"byte_end":131023,"line_start":708,"line_end":708,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131025,"byte_end":131071,"line_start":709,"line_end":709,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131073,"byte_end":131119,"line_start":710,"line_end":710,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131121,"byte_end":131128,"line_start":711,"line_end":711,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131130,"byte_end":131133,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131135,"byte_end":131173,"line_start":713,"line_end":713,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131175,"byte_end":131222,"line_start":714,"line_end":714,"column_start":2,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":788},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":826},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":3681},{"krate":0,"index":3685},{"krate":0,"index":3688},{"krate":0,"index":3690},{"krate":0,"index":3693},{"krate":0,"index":3695},{"krate":0,"index":3698},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3707},{"krate":0,"index":3711},{"krate":0,"index":839},{"krate":0,"index":863},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":3714},{"krate":0,"index":3718},{"krate":0,"index":3721},{"krate":0,"index":3723},{"krate":0,"index":3726},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3735},{"krate":0,"index":3738},{"krate":0,"index":3740},{"krate":0,"index":3744},{"krate":0,"index":876},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":3747},{"krate":0,"index":3751},{"krate":0,"index":3754},{"krate":0,"index":3756},{"krate":0,"index":3759},{"krate":0,"index":3761},{"krate":0,"index":3764},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3773},{"krate":0,"index":3777},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":3780},{"krate":0,"index":3784},{"krate":0,"index":3787},{"krate":0,"index":3789},{"krate":0,"index":3792},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3801},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3810},{"krate":0,"index":908},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":3813},{"krate":0,"index":3816},{"krate":0,"index":3819},{"krate":0,"index":3821},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3829},{"krate":0,"index":3833},{"krate":0,"index":3836},{"krate":0,"index":3838},{"krate":0,"index":3842},{"krate":0,"index":927},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":3845},{"krate":0,"index":3848},{"krate":0,"index":3851},{"krate":0,"index":3853},{"krate":0,"index":3856},{"krate":0,"index":3858},{"krate":0,"index":3861},{"krate":0,"index":3865},{"krate":0,"index":3868},{"krate":0,"index":3870},{"krate":0,"index":3874},{"krate":0,"index":944},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":966},{"krate":0,"index":970},{"krate":0,"index":974}],"decl_id":null,"docs":" Well-typed counters and register descriptors.","sig":null,"attributes":[{"value":"* Well-typed counters and register descriptors.\n\nThis module provides session types which encode a strict chain of modification\nto map semantic indices within a [`BitSlice`] to the electrical register values\nused to interact with the memory bus.\n\nThe main advantage of the types in this module is that they provide\nregister-dependent range requirements for counter values, making it impossible\nto have an index out of bounds for a register. They also create a sequence of\ntype transformations that assure the library about the continued validity of\neach value in its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, [`bitvec`] can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nthat it requires. This chain of assurance means that memory operations can be\nconfident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces [`BitIdx`] values from region computation. These types\ncannot be publicly constructed, and are only ever the result of pointer\nanalysis. As such, they rely on correctness of the memory regions provided to\nlibrary entry points, and those entry points can leverage the Rust type system\nto ensure safety there.\n\n[`BitIdx`] is transformed to [`BitPos`] through the [`BitOrder`] trait. The\n[`order`] module provides verification functions that implementors can use to\ndemonstrate correctness. `BitPos` is the seed type that describes memory\noperations, and is used to create selection masks [`BitSel`] and [`BitMask`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitMask`]: crate::index::BitMask\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`BitSel`]: crate::index::BitSel\n[`BitSlice`]: crate::slice::BitSlice\n[`bitvec`]: crate\n[`order`]: crate::order\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":159277,"byte_end":161146,"line_start":1,"line_end":40,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3681},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":162909,"byte_end":162915,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":3683},{"krate":0,"index":3684}],"decl_id":null,"docs":" A semantic index counter within a register element `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark a semantic\nindex within some register element. It is a virtual index, and is the stored\nvalue used in pointer encodings to track region start information.\n\nIt is translated to an electrical index through the [`BitOrder`] trait. This\nvirtual index is the only counter that can be used for address computation, and\nonce lowered to an electrical index through [`BitOrder::at`], the electrical\naddress can only be used for instruction selection.\n\n# Type Parameters\n\n- `R`: The register element that this index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can never be constructed outside of the [`bitvec`] crate. It is passed\nin to [`BitOrder`] implementations, which may use it to construct electrical\nposition, selection, or mask values from it. All values of this type constructed\nby [`bitvec`] are known to be correct in their region; no other construction\nsite can be trusted.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: funty::IsNumber::BITS\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":161403,"byte_end":162755,"line_start":69,"line_end":102,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":162807,"byte_end":162827,"line_start":104,"line_end":104,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":841},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163198,"byte_end":163202,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitIdx::<R>::LAST","value":"Self","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" The inclusive maximum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum index within an element `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163132,"byte_end":163186,"line_start":118,"line_end":118,"column_start":2,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":842},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163325,"byte_end":163329,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitIdx::<R>::ZERO","value":"Self","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" The inclusive minimum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum index within an element `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163259,"byte_end":163313,"line_start":123,"line_end":123,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163860,"byte_end":163863,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"new","qualname":"<BitIdx<R>>::new","value":"pub fn new(u8) -> Result<Self, BitIdxError<R>>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good index into an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163381,"byte_end":163450,"line_start":129,"line_end":129,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163452,"byte_end":163455,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163457,"byte_end":163473,"line_start":131,"line_end":131,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163475,"byte_end":163478,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163480,"byte_end":163555,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163557,"byte_end":163616,"line_start":134,"line_end":134,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163618,"byte_end":163621,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163623,"byte_end":163636,"line_start":136,"line_end":136,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163638,"byte_end":163641,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as either a valid or invalid index by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163643,"byte_end":163713,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/ whether it is within the valid range `0 .. R::BITS`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163715,"byte_end":163771,"line_start":139,"line_end":139,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163773,"byte_end":163776,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163778,"byte_end":163808,"line_start":141,"line_end":141,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163810,"byte_end":163840,"line_start":142,"line_end":142,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163842,"byte_end":163851,"line_start":143,"line_end":143,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164624,"byte_end":164637,"line_start":171,"line_end":171,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164032,"byte_end":164104,"line_start":151,"line_end":151,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164106,"byte_end":164109,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164111,"byte_end":164127,"line_start":153,"line_end":153,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164129,"byte_end":164132,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164134,"byte_end":164209,"line_start":155,"line_end":155,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164211,"byte_end":164270,"line_start":156,"line_end":156,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164272,"byte_end":164275,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164277,"byte_end":164290,"line_start":158,"line_end":158,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164292,"byte_end":164295,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164297,"byte_end":164347,"line_start":160,"line_end":160,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164349,"byte_end":164352,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164354,"byte_end":164366,"line_start":162,"line_end":162,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164368,"byte_end":164371,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164373,"byte_end":164439,"line_start":164,"line_end":164,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164441,"byte_end":164514,"line_start":165,"line_end":165,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164516,"byte_end":164528,"line_start":166,"line_end":166,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164530,"byte_end":164533,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164535,"byte_end":164565,"line_start":168,"line_end":168,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164567,"byte_end":164597,"line_start":169,"line_end":169,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164599,"byte_end":164608,"line_start":170,"line_end":170,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165051,"byte_end":165055,"line_start":190,"line_end":190,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitIdx<R>>::cast","value":"pub fn cast<S>(Self) -> Result<BitIdx<S>, BitIdxError<S>> where S: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Casts to a new index type.","sig":null,"attributes":[{"value":"/ Casts to a new index type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164830,"byte_end":164860,"line_start":184,"line_end":184,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164862,"byte_end":164865,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ This will always succeed if `self.into_inner()` is a valid index in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164867,"byte_end":164942,"line_start":186,"line_end":186,"column_start":2,"column_end":77}},{"value":"/ `S` register; it will return an error if the `self` index is too wide","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164944,"byte_end":165017,"line_start":187,"line_end":187,"column_start":2,"column_end":75}},{"value":"/ for `S`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165019,"byte_end":165031,"line_start":188,"line_end":188,"column_start":2,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165033,"byte_end":165042,"line_start":189,"line_end":189,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165286,"byte_end":165296,"line_start":197,"line_end":197,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdx<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the index wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the index wrapper, leaving the internal counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165164,"byte_end":165224,"line_start":195,"line_end":195,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165261,"byte_end":165275,"line_start":196,"line_end":196,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165623,"byte_end":165627,"line_start":212,"line_end":212,"column_start":9,"column_end":13},"name":"next","qualname":"<BitIdx<R>>::next","value":"pub fn next(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Increments an index counter, wrapping at the back edge of the register.","sig":null,"attributes":[{"value":"/ Increments an index counter, wrapping at the back edge of the register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165327,"byte_end":165402,"line_start":201,"line_end":201,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165404,"byte_end":165407,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165409,"byte_end":165425,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165427,"byte_end":165430,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to increment.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165432,"byte_end":165469,"line_start":205,"line_end":205,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165471,"byte_end":165474,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165476,"byte_end":165489,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165491,"byte_end":165494,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The next index after `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165496,"byte_end":165536,"line_start":209,"line_end":209,"column_start":2,"column_end":42}},{"value":"/ - `.1`: Indicates that the new index is in the next register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165538,"byte_end":165603,"line_start":210,"line_end":210,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165605,"byte_end":165614,"line_start":211,"line_end":211,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166075,"byte_end":166079,"line_start":231,"line_end":231,"column_start":9,"column_end":13},"name":"prev","qualname":"<BitIdx<R>>::prev","value":"pub fn prev(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Decrements an index counter, wrapping at the front edge of the register.","sig":null,"attributes":[{"value":"/ Decrements an index counter, wrapping at the front edge of the register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165769,"byte_end":165845,"line_start":220,"line_end":220,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165847,"byte_end":165850,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165852,"byte_end":165868,"line_start":222,"line_end":222,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165870,"byte_end":165873,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to decrement.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165875,"byte_end":165912,"line_start":224,"line_end":224,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165914,"byte_end":165917,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165919,"byte_end":165932,"line_start":226,"line_end":226,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165934,"byte_end":165937,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The previous index before `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165939,"byte_end":165984,"line_start":228,"line_end":228,"column_start":2,"column_end":47}},{"value":"/ - `.1`: Indicates that the new index is in the previous register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":165986,"byte_end":166055,"line_start":229,"line_end":229,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166057,"byte_end":166066,"line_start":230,"line_end":230,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166530,"byte_end":166538,"line_start":246,"line_end":246,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166225,"byte_end":166299,"line_start":239,"line_end":239,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166301,"byte_end":166304,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::at::<R>`], which is the only public, safe,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166306,"byte_end":166374,"line_start":241,"line_end":241,"column_start":2,"column_end":70}},{"value":"/ constructor for a position counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166376,"byte_end":166415,"line_start":242,"line_end":242,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166417,"byte_end":166420,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`O::at::<R>`]: crate::order::BitOrder::at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166422,"byte_end":166468,"line_start":244,"line_end":244,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166505,"byte_end":166519,"line_start":245,"line_end":245,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166917,"byte_end":166923,"line_start":258,"line_end":258,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166606,"byte_end":166678,"line_start":251,"line_end":251,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166680,"byte_end":166683,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::select::<R>`], which is the only public, safe,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166685,"byte_end":166757,"line_start":253,"line_end":253,"column_start":2,"column_end":74}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166759,"byte_end":166794,"line_start":254,"line_end":254,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166796,"byte_end":166799,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ [`O::select::<R>`]: crate::order::BitOrder::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166801,"byte_end":166855,"line_start":256,"line_end":256,"column_start":2,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166892,"byte_end":166906,"line_start":257,"line_end":257,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167212,"byte_end":167216,"line_start":269,"line_end":269,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166995,"byte_end":167056,"line_start":263,"line_end":263,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167058,"byte_end":167061,"line_start":264,"line_end":264,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167063,"byte_end":167109,"line_start":265,"line_end":265,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167111,"byte_end":167114,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167116,"byte_end":167150,"line_start":267,"line_end":267,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167187,"byte_end":167201,"line_start":268,"line_end":268,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168189,"byte_end":168194,"line_start":300,"line_end":300,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitEnd<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all indices between an inclusive start and exclusive end\n point.","sig":null,"attributes":[{"value":"/ Iterates over all indices between an inclusive start and exclusive end","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167294,"byte_end":167368,"line_start":274,"line_end":274,"column_start":2,"column_end":76}},{"value":"/ point.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167370,"byte_end":167380,"line_start":275,"line_end":275,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167382,"byte_end":167385,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167387,"byte_end":167461,"line_start":277,"line_end":277,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167463,"byte_end":167537,"line_start":278,"line_end":278,"column_start":2,"column_end":76}},{"value":"/ not supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167539,"byte_end":167610,"line_start":279,"line_end":279,"column_start":2,"column_end":73}},{"value":"/ [`Range<BitIdx<R>>`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167612,"byte_end":167637,"line_start":280,"line_end":280,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167639,"byte_end":167642,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167644,"byte_end":167660,"line_start":282,"line_end":282,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167662,"byte_end":167665,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167667,"byte_end":167741,"line_start":284,"line_end":284,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167743,"byte_end":167780,"line_start":285,"line_end":285,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167782,"byte_end":167857,"line_start":286,"line_end":286,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167859,"byte_end":167904,"line_start":287,"line_end":287,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167906,"byte_end":167909,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167911,"byte_end":167924,"line_start":289,"line_end":289,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167926,"byte_end":167929,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167931,"byte_end":168001,"line_start":291,"line_end":291,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168003,"byte_end":168006,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168008,"byte_end":168026,"line_start":293,"line_end":293,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168028,"byte_end":168031,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168033,"byte_end":168075,"line_start":295,"line_end":295,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168077,"byte_end":168080,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168082,"byte_end":168125,"line_start":297,"line_end":297,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitIdx<R>>`]: core::ops::Range","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168127,"byte_end":168169,"line_start":298,"line_end":298,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168171,"byte_end":168180,"line_start":299,"line_end":299,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168580,"byte_end":168589,"line_start":314,"line_end":314,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitIdx<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible index values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible index values.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168516,"byte_end":168560,"line_start":312,"line_end":312,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168562,"byte_end":168571,"line_start":313,"line_end":313,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169601,"byte_end":169607,"line_start":342,"line_end":342,"column_start":9,"column_end":15},"name":"offset","qualname":"<BitIdx<R>>::offset","value":"pub fn offset(Self, isize) -> (isize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the jump distance for some number of bits away from a starting\n index.","sig":null,"attributes":[{"value":"/ Computes the jump distance for some number of bits away from a starting","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168725,"byte_end":168800,"line_start":321,"line_end":321,"column_start":2,"column_end":77}},{"value":"/ index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168802,"byte_end":168812,"line_start":322,"line_end":322,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168814,"byte_end":168817,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ This computes the number of elements by which to adjust a base pointer,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168819,"byte_end":168894,"line_start":324,"line_end":324,"column_start":2,"column_end":77}},{"value":"/ and then the bit index of the destination bit in the new referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168896,"byte_end":168965,"line_start":325,"line_end":325,"column_start":2,"column_end":71}},{"value":"/ register element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168967,"byte_end":168988,"line_start":326,"line_end":326,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168990,"byte_end":168993,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168995,"byte_end":169011,"line_start":328,"line_end":328,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169013,"byte_end":169016,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ - `self`: An index within some element, from which the offset is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169018,"byte_end":169086,"line_start":330,"line_end":330,"column_start":2,"column_end":70}},{"value":"/   computed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169088,"byte_end":169103,"line_start":331,"line_end":331,"column_start":2,"column_end":17}},{"value":"/ - `by`: The distance by which to jump. Negative values move lower in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169105,"byte_end":169181,"line_start":332,"line_end":332,"column_start":2,"column_end":78}},{"value":"/   index and element-pointer space; positive values move higher.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169183,"byte_end":169250,"line_start":333,"line_end":333,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169252,"byte_end":169255,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169257,"byte_end":169270,"line_start":335,"line_end":335,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169272,"byte_end":169275,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` by which to adjust a base pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169277,"byte_end":169350,"line_start":337,"line_end":337,"column_start":2,"column_end":75}},{"value":"/   This value can be passed directly into [`ptr::offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169352,"byte_end":169413,"line_start":338,"line_end":338,"column_start":2,"column_end":63}},{"value":"/ - `.1`: The index of the destination bit within the destination element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169415,"byte_end":169491,"line_start":339,"line_end":339,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169493,"byte_end":169496,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ [`ptr::offset`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169498,"byte_end":169592,"line_start":341,"line_end":341,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172468,"byte_end":172472,"line_start":417,"line_end":417,"column_start":9,"column_end":13},"name":"span","qualname":"<BitIdx<R>>::span","value":"pub fn span(Self, usize) -> (usize, BitEnd<R>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning at `self` for `len`\n bits.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning at `self` for `len`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171630,"byte_end":171706,"line_start":394,"line_end":394,"column_start":2,"column_end":78}},{"value":"/ bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171708,"byte_end":171717,"line_start":395,"line_end":395,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171719,"byte_end":171722,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ The span information is the number of elements in the region that hold","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171724,"byte_end":171798,"line_start":397,"line_end":397,"column_start":2,"column_end":76}},{"value":"/ live bits, and the position of the tail marker after the live bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171800,"byte_end":171871,"line_start":398,"line_end":398,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171873,"byte_end":171876,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`BitEnd::span`], as the computation is identical for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171878,"byte_end":171952,"line_start":400,"line_end":400,"column_start":2,"column_end":76}},{"value":"/ the two types. Beginning a span at any `Idx` is equivalent to beginning","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171954,"byte_end":172029,"line_start":401,"line_end":401,"column_start":2,"column_end":77}},{"value":"/ it at the tail of a previous span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172031,"byte_end":172069,"line_start":402,"line_end":402,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172071,"byte_end":172074,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172076,"byte_end":172092,"line_start":404,"line_end":404,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172094,"byte_end":172097,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ - `self`: The start bit of the span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172099,"byte_end":172139,"line_start":406,"line_end":406,"column_start":2,"column_end":42}},{"value":"/ - `len`: The number of bits in the span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172141,"byte_end":172185,"line_start":407,"line_end":407,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172187,"byte_end":172190,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172192,"byte_end":172205,"line_start":409,"line_end":409,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172207,"byte_end":172210,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements, starting in the element that contains","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172212,"byte_end":172285,"line_start":411,"line_end":411,"column_start":2,"column_end":75}},{"value":"/   `self`, that contain live bits of the span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172287,"byte_end":172336,"line_start":412,"line_end":412,"column_start":2,"column_end":51}},{"value":"/ - `.1`: The tail counter of the span’s end point.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172338,"byte_end":172393,"line_start":413,"line_end":413,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172395,"byte_end":172398,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ [`BitEnd::span`]: crate::index::BitEnd::span","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172400,"byte_end":172448,"line_start":415,"line_end":415,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172450,"byte_end":172459,"line_start":416,"line_end":416,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3714},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173574,"byte_end":173585,"line_start":467,"line_end":467,"column_start":12,"column_end":23},"name":"BitIdxError","qualname":"::index::BitIdxError","value":"BitIdxError {  }","parent":null,"children":[{"krate":0,"index":3716},{"krate":0,"index":3717}],"decl_id":null,"docs":" Marks an index that is invalid for a register type.\n","sig":null,"attributes":[{"value":"/ Marks an index that is invalid for a register type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173416,"byte_end":173471,"line_start":464,"line_end":464,"column_start":1,"column_end":56}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173472,"byte_end":173492,"line_start":465,"line_end":465,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174556,"byte_end":174566,"line_start":511,"line_end":511,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdxError<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the error wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the error wrapper, leaving the internal counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174434,"byte_end":174494,"line_start":509,"line_end":509,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174531,"byte_end":174545,"line_start":510,"line_end":510,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":3747},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176629,"byte_end":176635,"line_start":583,"line_end":583,"column_start":12,"column_end":18},"name":"BitEnd","qualname":"::index::BitEnd","value":"BitEnd {  }","parent":null,"children":[{"krate":0,"index":3749},{"krate":0,"index":3750}],"decl_id":null,"docs":" A semantic index counter within *or one bit past the end of* a register\nelement `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within *or one bit past the end of* a register\nelement `R`.\n\nThis type is a counter in the ring `0 ..= R::BITS`, and serves to mark a\nsemantic index of a dead bit *after* a live region. As such, following in the\nC++ and LLVM memory model of first-live/first-dead region descriptiors, it marks\nan endpoint outside some bit-region, and may be used to compute the startpoint\nof a bit-region immediately succeeding, but not overlapping, the source.\n\nAs a dead-bit index, this *cannot* be used for indexing into a register. It is\nused only in abstract region computation.\n\nThis type is necessary in order to preserve the distinction between a dead\nmemory address that is *not* part of a buffer and a live memory address that is\nwithin a region. [`BitIdx`] is insufficient to this task, and causes buffer\nmanagement errors when used in its stead.\n\n# Type Parameters\n\n- `R`: The register element that this end index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 ..= R::BITS`. Any\nvalue greater than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can only be publicly constructed through [`BitIdx::span`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`R::BITS`]: funty::IsNumber::BITS\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":175208,"byte_end":176526,"line_start":547,"line_end":580,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176527,"byte_end":176547,"line_start":581,"line_end":581,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":886},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176908,"byte_end":176915,"line_start":595,"line_end":595,"column_start":10,"column_end":17},"name":"BitTail","qualname":"::index::BitTail","value":"BitEnd<R>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.23.0\", note = \"Renamed to `BitEnd`\")","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176837,"byte_end":176898,"line_start":594,"line_end":594,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":890},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177040,"byte_end":177044,"line_start":601,"line_end":601,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitEnd::<R>::LAST","value":"Self","parent":{"krate":0,"index":888},"children":[],"decl_id":null,"docs":" The inclusive maximum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum tail within an element `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176975,"byte_end":177028,"line_start":600,"line_end":600,"column_start":2,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":891},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177172,"byte_end":177176,"line_start":606,"line_end":606,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitEnd::<R>::ZERO","value":"Self","parent":{"krate":0,"index":888},"children":[],"decl_id":null,"docs":" The inclusive minimum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum tail within an element `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177107,"byte_end":177160,"line_start":605,"line_end":605,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177682,"byte_end":177685,"line_start":626,"line_end":626,"column_start":9,"column_end":12},"name":"new","qualname":"<BitEnd<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good tail of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good tail of an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177228,"byte_end":177294,"line_start":611,"line_end":611,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177296,"byte_end":177299,"line_start":612,"line_end":612,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177301,"byte_end":177317,"line_start":613,"line_end":613,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177319,"byte_end":177322,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a tail. This must be not less","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177324,"byte_end":177397,"line_start":615,"line_end":615,"column_start":2,"column_end":75}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177399,"byte_end":177458,"line_start":616,"line_end":616,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177460,"byte_end":177463,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177465,"byte_end":177478,"line_start":618,"line_end":618,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177480,"byte_end":177483,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177485,"byte_end":177561,"line_start":620,"line_end":620,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177563,"byte_end":177593,"line_start":621,"line_end":621,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177595,"byte_end":177598,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177600,"byte_end":177630,"line_start":623,"line_end":623,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177632,"byte_end":177662,"line_start":624,"line_end":624,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177664,"byte_end":177673,"line_start":625,"line_end":625,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178734,"byte_end":178744,"line_start":668,"line_end":668,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitEnd<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the tail wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the tail wrapper, leaving the internal counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178613,"byte_end":178672,"line_start":666,"line_end":666,"column_start":2,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178709,"byte_end":178723,"line_start":667,"line_end":667,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179477,"byte_end":179487,"line_start":692,"line_end":692,"column_start":9,"column_end":19},"name":"range_from","qualname":"<BitEnd<R>>::range_from","value":"pub fn range_from(BitIdx<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all tail indices at and after an inclusive starting point.","sig":null,"attributes":[{"value":"/ Iterates over all tail indices at and after an inclusive starting point.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178775,"byte_end":178851,"line_start":672,"line_end":672,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178853,"byte_end":178856,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178858,"byte_end":178932,"line_start":674,"line_end":674,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178934,"byte_end":179008,"line_start":675,"line_end":675,"column_start":2,"column_end":76}},{"value":"/ not yet supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179010,"byte_end":179085,"line_start":676,"line_end":676,"column_start":2,"column_end":77}},{"value":"/ [`Range<BitEnd<R>>`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179087,"byte_end":179112,"line_start":677,"line_end":677,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179114,"byte_end":179117,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179119,"byte_end":179135,"line_start":679,"line_end":679,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179137,"byte_end":179140,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179142,"byte_end":179216,"line_start":681,"line_end":681,"column_start":2,"column_end":76}},{"value":"/   tail produced by the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179218,"byte_end":179254,"line_start":682,"line_end":682,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179256,"byte_end":179259,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179261,"byte_end":179274,"line_start":684,"line_end":684,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179276,"byte_end":179279,"line_start":685,"line_end":685,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from ..=","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179281,"byte_end":179345,"line_start":686,"line_end":686,"column_start":2,"column_end":66}},{"value":"/ Self::LAST`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179347,"byte_end":179363,"line_start":687,"line_end":687,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179365,"byte_end":179368,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179370,"byte_end":179413,"line_start":689,"line_end":689,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitEnd<R>>`]: core::ops::Range","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179415,"byte_end":179457,"line_start":690,"line_end":690,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179459,"byte_end":179468,"line_start":691,"line_end":691,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180717,"byte_end":180721,"line_start":729,"line_end":729,"column_start":9,"column_end":13},"name":"span","qualname":"<BitEnd<R>>::span","value":"pub fn span(Self, usize) -> (usize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning immediately after a\n preceding region.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning immediately after a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179696,"byte_end":179772,"line_start":702,"line_end":702,"column_start":2,"column_end":78}},{"value":"/ preceding region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179774,"byte_end":179795,"line_start":703,"line_end":703,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179797,"byte_end":179800,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ The computed region of `len` bits has its start at the *live* bit that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179802,"byte_end":179876,"line_start":705,"line_end":705,"column_start":2,"column_end":76}},{"value":"/ corresponds to the `self` dead tail. The return value is the number of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179878,"byte_end":179952,"line_start":706,"line_end":706,"column_start":2,"column_end":76}},{"value":"/ memory elements containing live bits of the computed span and its tail","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179954,"byte_end":180028,"line_start":707,"line_end":707,"column_start":2,"column_end":76}},{"value":"/ marker.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180030,"byte_end":180041,"line_start":708,"line_end":708,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180043,"byte_end":180046,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180048,"byte_end":180064,"line_start":710,"line_end":710,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180066,"byte_end":180069,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ - `self`: A dead bit immediately after some region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180071,"byte_end":180126,"line_start":712,"line_end":712,"column_start":2,"column_end":57}},{"value":"/ - `len`: The number of live bits in the span starting after `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180128,"byte_end":180199,"line_start":713,"line_end":713,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180201,"byte_end":180204,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180206,"byte_end":180219,"line_start":715,"line_end":715,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180221,"byte_end":180224,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` that contain live bits in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180226,"byte_end":180294,"line_start":717,"line_end":717,"column_start":2,"column_end":70}},{"value":"/   computed region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180296,"byte_end":180318,"line_start":718,"line_end":718,"column_start":2,"column_end":24}},{"value":"/ - `.1`: The tail counter of the first dead bit after the new span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180320,"byte_end":180390,"line_start":719,"line_end":719,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180392,"byte_end":180395,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180397,"byte_end":180411,"line_start":721,"line_end":721,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180413,"byte_end":180416,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ If `len` is `0`, this returns `(0, self)`, as the span has no live bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180418,"byte_end":180494,"line_start":723,"line_end":723,"column_start":2,"column_end":78}},{"value":"/ If `self` is [`BitEnd::LAST`], then the new region starts at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180496,"byte_end":180560,"line_start":724,"line_end":724,"column_start":2,"column_end":66}},{"value":"/ [`BitIdx::ZERO`] in the next element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180562,"byte_end":180603,"line_start":725,"line_end":725,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180605,"byte_end":180608,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180610,"byte_end":180658,"line_start":727,"line_end":727,"column_start":2,"column_end":50}},{"value":"/ [`BitEnd::LAST`]: crate::index::BitEnd::LAST","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180660,"byte_end":180708,"line_start":728,"line_end":728,"column_start":2,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3780},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183129,"byte_end":183135,"line_start":817,"line_end":817,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":3782},{"krate":0,"index":3783}],"decl_id":null,"docs":" An electrical position counter within a register element `R`.","sig":null,"attributes":[{"value":"* An electrical position counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark an\nelectrical address of a real bit. It is the shift distance in the expression\n`1 << n`. It is only produced by applying a [`BitOrder::at`] transformation to\nsome [`BitIdx`] produced by this library.\n\n# Type Parameters\n\n- `R`: The register element that this position governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\na crash. In addition, [`BitOrder::at`] has a list of requirements that its\nimplementations must uphold in order to make construction of this type\nsemantically correct in a program.\n\n# Construction\n\nThis type is publicly constructible. [`bitvec`] will only request its creation\nby calling [`BitOrder::at`], and has no sites that can publicly accept untrusted\nvalues.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: funty::IsNumber::BITS\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181908,"byte_end":182975,"line_start":785,"line_end":813,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183027,"byte_end":183047,"line_start":815,"line_end":815,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183725,"byte_end":183728,"line_start":842,"line_end":842,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPos<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good position within an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183362,"byte_end":183436,"line_start":830,"line_end":830,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183438,"byte_end":183441,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183443,"byte_end":183459,"line_start":832,"line_end":832,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183461,"byte_end":183464,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183466,"byte_end":183541,"line_start":834,"line_end":834,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183543,"byte_end":183570,"line_start":835,"line_end":835,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183572,"byte_end":183575,"line_start":836,"line_end":836,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183577,"byte_end":183590,"line_start":837,"line_end":837,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183592,"byte_end":183595,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183597,"byte_end":183673,"line_start":839,"line_end":839,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183675,"byte_end":183705,"line_start":840,"line_end":840,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183707,"byte_end":183716,"line_start":841,"line_end":841,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184363,"byte_end":184376,"line_start":867,"line_end":867,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good position within an `R`\n register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good position within an `R`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183859,"byte_end":183926,"line_start":849,"line_end":849,"column_start":2,"column_end":69}},{"value":"/ register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183928,"byte_end":183941,"line_start":850,"line_end":850,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183943,"byte_end":183946,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183948,"byte_end":183964,"line_start":852,"line_end":852,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183966,"byte_end":183969,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183971,"byte_end":184046,"line_start":854,"line_end":854,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184048,"byte_end":184075,"line_start":855,"line_end":855,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184077,"byte_end":184080,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184082,"byte_end":184095,"line_start":857,"line_end":857,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184097,"byte_end":184100,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid position.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184102,"byte_end":184155,"line_start":859,"line_end":859,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184157,"byte_end":184160,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184162,"byte_end":184174,"line_start":861,"line_end":861,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184176,"byte_end":184179,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184181,"byte_end":184247,"line_start":863,"line_end":863,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184249,"byte_end":184322,"line_start":864,"line_end":864,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184324,"byte_end":184336,"line_start":865,"line_end":865,"column_start":2,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184338,"byte_end":184347,"line_start":866,"line_end":866,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184697,"byte_end":184707,"line_start":882,"line_end":882,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitPos<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the position wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the position wrapper, leaving the internal counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184572,"byte_end":184635,"line_start":880,"line_end":880,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184672,"byte_end":184686,"line_start":881,"line_end":881,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184862,"byte_end":184868,"line_start":890,"line_end":890,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self`.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184738,"byte_end":184792,"line_start":886,"line_end":886,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184794,"byte_end":184797,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ This is always `1 << self.pos`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184799,"byte_end":184834,"line_start":888,"line_end":888,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184836,"byte_end":184853,"line_start":889,"line_end":889,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185167,"byte_end":185171,"line_start":900,"line_end":900,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184950,"byte_end":185011,"line_start":894,"line_end":894,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185013,"byte_end":185016,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185018,"byte_end":185064,"line_start":896,"line_end":896,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185066,"byte_end":185069,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185071,"byte_end":185105,"line_start":898,"line_end":898,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185142,"byte_end":185156,"line_start":899,"line_end":899,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":3813},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187196,"byte_end":187202,"line_start":978,"line_end":978,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":3815}],"decl_id":null,"docs":" A one-hot selection mask for a register element `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask for a register element `R`.\n\nThis type selects exactly one bit in a register. It is used to apply test and\nwrite operations into memory.\n\n# Type Parameters\n\n- `R`: The register element this selector governs.\n\n# Validity\n\nValues of this type are required to have exactly one bit set high, and all\nothers set low.\n\n# Construction\n\nThis type is only constructed from the [`BitPos::select`] and\n[`BitOrder::select`] functions. It is always equivalent to\n`1 << BitPos::unwrap`.\n\nThe chain of custody, from known-good [`BitIdx`] values, through proven-good\n[`BitOrder`] implementations, into [`BitPos`] and then `BitSel`, proves that\nvalues of this type are always correct to apply to underlying memory.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::select`]: crate::order::BitOrder::select\n[`BitPos`]: crate::index::BitPos\n[`BitPos::select`]: crate::index::BitPos::select\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186106,"byte_end":187042,"line_start":945,"line_end":974,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187094,"byte_end":187114,"line_start":976,"line_end":976,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187823,"byte_end":187826,"line_start":1003,"line_end":1003,"column_start":9,"column_end":12},"name":"new","qualname":"<BitSel<R>>::new","value":"pub fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good selection of an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187315,"byte_end":187386,"line_start":988,"line_end":988,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187388,"byte_end":187391,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187393,"byte_end":187409,"line_start":990,"line_end":990,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187411,"byte_end":187414,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187416,"byte_end":187484,"line_start":992,"line_end":992,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187486,"byte_end":187489,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187491,"byte_end":187504,"line_start":994,"line_end":994,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187506,"byte_end":187509,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ If `value` is a power of two (exactly one bit set high and all others","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187511,"byte_end":187584,"line_start":996,"line_end":996,"column_start":2,"column_end":75}},{"value":"/ set low), it returns `Some` of a `BitSel` wrapping the `value`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187586,"byte_end":187653,"line_start":997,"line_end":997,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187655,"byte_end":187658,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::at`]: crate:order::BitOrder::at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187660,"byte_end":187707,"line_start":999,"line_end":999,"column_start":2,"column_end":49}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187709,"byte_end":187765,"line_start":1000,"line_end":1000,"column_start":2,"column_end":58}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187767,"byte_end":187803,"line_start":1001,"line_end":1001,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187805,"byte_end":187814,"line_start":1002,"line_end":1002,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188606,"byte_end":188619,"line_start":1031,"line_end":1031,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good selection of an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187957,"byte_end":188031,"line_start":1010,"line_end":1010,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188033,"byte_end":188036,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188038,"byte_end":188054,"line_start":1012,"line_end":1012,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188056,"byte_end":188059,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188061,"byte_end":188129,"line_start":1014,"line_end":1014,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188131,"byte_end":188134,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188136,"byte_end":188149,"line_start":1016,"line_end":1016,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188151,"byte_end":188154,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ `value` wrapped in a `BitSel`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188156,"byte_end":188190,"line_start":1018,"line_end":1018,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188192,"byte_end":188195,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188197,"byte_end":188209,"line_start":1020,"line_end":1020,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188211,"byte_end":188214,"line_start":1021,"line_end":1021,"column_start":2,"column_end":5}},{"value":"/ `value` **must** be a power of two: one bit set high and all others set","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188216,"byte_end":188291,"line_start":1022,"line_end":1022,"column_start":2,"column_end":77}},{"value":"/ low. In debug builds, invalid `value`s cause a panic; release builds do","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188293,"byte_end":188368,"line_start":1023,"line_end":1023,"column_start":2,"column_end":77}},{"value":"/ not check the input.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188370,"byte_end":188394,"line_start":1024,"line_end":1024,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188396,"byte_end":188399,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a [`BitOrder::select`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188401,"byte_end":188464,"line_start":1026,"line_end":1026,"column_start":2,"column_end":65}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188466,"byte_end":188516,"line_start":1027,"line_end":1027,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188518,"byte_end":188521,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188523,"byte_end":188579,"line_start":1029,"line_end":1029,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188581,"byte_end":188590,"line_start":1030,"line_end":1030,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188941,"byte_end":188951,"line_start":1043,"line_end":1043,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitSel<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the selector wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the selector wrapper, leaving the internal counter.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188816,"byte_end":188879,"line_start":1041,"line_end":1041,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188916,"byte_end":188930,"line_start":1042,"line_end":1042,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189097,"byte_end":189101,"line_start":1050,"line_end":1050,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes a bit-mask for `self`. This is a type-cast.\n","sig":null,"attributes":[{"value":"/ Computes a bit-mask for `self`. This is a type-cast.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188981,"byte_end":189037,"line_start":1047,"line_end":1047,"column_start":2,"column_end":58}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189039,"byte_end":189056,"line_start":1048,"line_end":1048,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189058,"byte_end":189088,"line_start":1049,"line_end":1049,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189221,"byte_end":189230,"line_start":1056,"line_end":1056,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible selector values.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189154,"byte_end":189201,"line_start":1054,"line_end":1054,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189203,"byte_end":189212,"line_start":1055,"line_end":1055,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3845},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190671,"byte_end":190678,"line_start":1115,"line_end":1115,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":3847}],"decl_id":null,"docs":" A multi-bit selection mask for a register `R`.","sig":null,"attributes":[{"value":"* A multi-bit selection mask for a register `R`.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batched operation on a register.\n\n# Type Parameters\n\n- `R`: The register element that this masks.\n\n# Construction\n\nThis can only be constructed by combining [`BitSel`] selection mask produced\nthrough the [`BitIdx`] and [`BitOrder`] chain of custody.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitSel`]: crate::index::BitSel\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189987,"byte_end":190568,"line_start":1094,"line_end":1112,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190569,"byte_end":190589,"line_start":1113,"line_end":1113,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":946},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190834,"byte_end":190837,"line_start":1126,"line_end":1126,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190806,"byte_end":190822,"line_start":1125,"line_end":1125,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":947},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190900,"byte_end":190904,"line_start":1128,"line_end":1128,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190870,"byte_end":190888,"line_start":1127,"line_end":1127,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191696,"byte_end":191699,"line_start":1154,"line_end":1154,"column_start":9,"column_end":12},"name":"new","qualname":"<BitMask<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190939,"byte_end":190977,"line_start":1130,"line_end":1130,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190979,"byte_end":190982,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190984,"byte_end":191059,"line_start":1132,"line_end":1132,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and instead using it only as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191061,"byte_end":191136,"line_start":1133,"line_end":1133,"column_start":2,"column_end":77}},{"value":"/ a bit-mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191138,"byte_end":191153,"line_start":1134,"line_end":1134,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191155,"byte_end":191158,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191160,"byte_end":191176,"line_start":1136,"line_end":1136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191178,"byte_end":191181,"line_start":1137,"line_end":1137,"column_start":2,"column_end":5}},{"value":"/ - `value`: Some integer to use as a bit-mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191183,"byte_end":191232,"line_start":1138,"line_end":1138,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191234,"byte_end":191237,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191239,"byte_end":191252,"line_start":1140,"line_end":1140,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191254,"byte_end":191257,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ The `value` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191259,"byte_end":191333,"line_start":1142,"line_end":1142,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191335,"byte_end":191338,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating [`BitSel`] values using the `Sum` implementation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191340,"byte_end":191413,"line_start":1144,"line_end":1144,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191415,"byte_end":191418,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191420,"byte_end":191432,"line_start":1146,"line_end":1146,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191434,"byte_end":191437,"line_start":1147,"line_end":1147,"column_start":2,"column_end":5}},{"value":"/ The `value` must be computed from a set of valid bit positions in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191439,"byte_end":191512,"line_start":1148,"line_end":1148,"column_start":2,"column_end":75}},{"value":"/ caller’s context.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191514,"byte_end":191537,"line_start":1149,"line_end":1149,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191539,"byte_end":191542,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::mask`]: crate::order::BitOrder::mask","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191544,"byte_end":191596,"line_start":1151,"line_end":1151,"column_start":2,"column_end":54}},{"value":"/ [`BitSel`]: crate::index::BitSel","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191598,"byte_end":191634,"line_start":1152,"line_end":1152,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191671,"byte_end":191685,"line_start":1153,"line_end":1153,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191867,"byte_end":191877,"line_start":1160,"line_end":1160,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitMask<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the mask wrapper, leaving the internal value.\n","sig":null,"attributes":[{"value":"/ Removes the mask wrapper, leaving the internal value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191748,"byte_end":191805,"line_start":1158,"line_end":1158,"column_start":2,"column_end":59}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191842,"byte_end":191856,"line_start":1159,"line_end":1159,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192196,"byte_end":192200,"line_start":1175,"line_end":1175,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(&Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether the mask contains a given selector bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191908,"byte_end":191965,"line_start":1164,"line_end":1164,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191967,"byte_end":191970,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191972,"byte_end":191988,"line_start":1166,"line_end":1166,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191990,"byte_end":191993,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191995,"byte_end":192008,"line_start":1168,"line_end":1168,"column_start":2,"column_end":15}},{"value":"/ - `sel`: Some single selection bit to test in `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192010,"byte_end":192067,"line_start":1169,"line_end":1169,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192069,"byte_end":192072,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192074,"byte_end":192087,"line_start":1171,"line_end":1171,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192089,"byte_end":192092,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ Whether `self` is set high at `sel`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192094,"byte_end":192134,"line_start":1173,"line_end":1173,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192171,"byte_end":192185,"line_start":1174,"line_end":1174,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192547,"byte_end":192553,"line_start":1190,"line_end":1190,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector bit into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector bit into an existing mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192272,"byte_end":192321,"line_start":1179,"line_end":1179,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192323,"byte_end":192326,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192328,"byte_end":192344,"line_start":1181,"line_end":1181,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192346,"byte_end":192349,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192351,"byte_end":192368,"line_start":1183,"line_end":1183,"column_start":2,"column_end":19}},{"value":"/ - `sel`: A selector bit to set in `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192370,"byte_end":192415,"line_start":1184,"line_end":1184,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192417,"byte_end":192420,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192422,"byte_end":192435,"line_start":1186,"line_end":1186,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192437,"byte_end":192440,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ The bit at `sel` is set high in `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192442,"byte_end":192485,"line_start":1188,"line_end":1188,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192522,"byte_end":192536,"line_start":1189,"line_end":1189,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192884,"byte_end":192891,"line_start":1205,"line_end":1205,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192612,"byte_end":192665,"line_start":1194,"line_end":1194,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192667,"byte_end":192670,"line_start":1195,"line_end":1195,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192672,"byte_end":192688,"line_start":1196,"line_end":1196,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192690,"byte_end":192693,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192695,"byte_end":192707,"line_start":1198,"line_end":1198,"column_start":2,"column_end":14}},{"value":"/ - `sel`: A selector bit to set in `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192709,"byte_end":192753,"line_start":1199,"line_end":1199,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192755,"byte_end":192758,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192760,"byte_end":192773,"line_start":1201,"line_end":1201,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192775,"byte_end":192778,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with `sel` set high.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192780,"byte_end":192822,"line_start":1203,"line_end":1203,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192859,"byte_end":192873,"line_start":1204,"line_end":1204,"column_start":37,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":978},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3880},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3888},{"krate":0,"index":995},{"krate":0,"index":3889},{"krate":0,"index":3892},{"krate":0,"index":3895},{"krate":0,"index":996},{"krate":0,"index":3898},{"krate":0,"index":999},{"krate":0,"index":1001},{"krate":0,"index":1003},{"krate":0,"index":1006}],"decl_id":null,"docs":" Memory element descriptions.","sig":null,"attributes":[{"value":"* Memory element descriptions.\n\nThis module describes memory integers and processor registers used to hold and\nmanipulate [`bitvec`] data buffers.\n\nThe [`BitMemory`] trait adds descriptive information to the unsigned integers\navailable in the language.\n\nThe [`BitRegister`] trait marks the unsigned integers that correspond to\nprocessor registers, and can therefore be used for buffer control. The integers\nthat are `BitMemory` but not `BitRegister` can be composed out of register\nvalues, but are unable to be used in buffer type parameters.\n\n[`BitMemory`]: crate::mem::BitMemory\n[`BitRegister`]: crate::mem::BitRegister\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":203949,"byte_end":204594,"line_start":1,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":988},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205098,"byte_end":205107,"line_start":33,"line_end":33,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"decl_id":null,"docs":" Description of an integer memory element.","sig":null,"attributes":[{"value":"* Description of an integer memory element.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the project to adequately describe the memory bus.\nThis trait has **no** bearing on the processor instructions or registers used to\ninteract with memory. It solely describes integers that can exist on a system.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":204664,"byte_end":205087,"line_start":24,"line_end":32,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":989},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205221,"byte_end":205225,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205138,"byte_end":205213,"line_start":34,"line_end":34,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":990},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205427,"byte_end":205431,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":988},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n This is the value with the least significant `INDX`-many bits set high.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205269,"byte_end":205342,"line_start":37,"line_end":37,"column_start":2,"column_end":75}},{"value":"/ This is the value with the least significant `INDX`-many bits set high.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205344,"byte_end":205419,"line_start":38,"line_end":38,"column_start":2,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":991},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205762,"byte_end":205773,"line_start":49,"line_end":49,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::mem::BitRegister","value":"BitRegister: BitMemory + BitOps","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"decl_id":null,"docs":" Description of a processor register.","sig":null,"attributes":[{"value":"* Description of a processor register.\n\nThis trait provides information used to describe processor registers. It only\nneeds to contain constant values for `1` and `!0`; the rest of its information\nis contained in the presence or absence of its implementation on particular\nintegers.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205463,"byte_end":205751,"line_start":42,"line_end":48,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":992},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205825,"byte_end":205828,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitRegister::ONE","value":"Self","parent":{"krate":0,"index":991},"children":[],"decl_id":null,"docs":" The literal `1`.\n","sig":null,"attributes":[{"value":"/ The literal `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205797,"byte_end":205817,"line_start":50,"line_end":50,"column_start":2,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":993},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205866,"byte_end":205869,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitRegister::ALL","value":"Self","parent":{"krate":0,"index":991},"children":[],"decl_id":null,"docs":" The literal `!0`.\n","sig":null,"attributes":[{"value":"/ The literal `!0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205837,"byte_end":205858,"line_start":52,"line_end":52,"column_start":2,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":999},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":206900,"byte_end":206904,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":206516,"byte_end":206871,"line_start":89,"line_end":101,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":208180,"byte_end":208186,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":3901},{"krate":0,"index":3903},{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3908},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3913},{"krate":0,"index":3916},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3921},{"krate":0,"index":1038},{"krate":0,"index":3923},{"krate":0,"index":3925},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3930},{"krate":0,"index":3932},{"krate":0,"index":3933},{"krate":0,"index":3935},{"krate":0,"index":3938},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3943},{"krate":0,"index":1047},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n[`bitvec`] data structures are parametric over any ordering of bits within a\nregister type. The [`BitOrder`] trait translates a cursor position (indicated by\nthe [`BitIdx`] type) to an electrical position (indicated by the [`BitPos`]\ntype) within that register, thereby defining the order of traversal over a\nregister.\n\nImplementors of [`BitOrder`] are required to satisfy a set of requirements on\ntheir transform function, and must have identical behavior to the\ndefault-provided trait functions if they choose to override them for\nperformance. These can all be proven by use of the [`verify`] or\n[`verify_for_type`] functions in the implementor’s test suite.\n\n[`BitOrder`] is a stateless trait, and implementors should be zero-sized types.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`bitvec`]: crate\n[`verify`]: crate::order::verify\n[`verify_for_type`]: crate::order::verify_for_type\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":209071,"byte_end":210072,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212431,"byte_end":212439,"line_start":105,"line_end":105,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder: 'static","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n[`bitvec`] structures store and operate on semantic index counters, not\nelectrical bit positions. The [`BitOrder::at`] function takes a semantic\nordering, [`BitIdx`], and produces a corresponding electrical position,\n[`BitPos`].\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect, and have unspecified behavior. The best-case\noutcome is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. There\nare verification functions that you can use in your test suite; however, it is\nnot yet possible to prove correctness at compile-time.\n\nThis is an `unsafe trait` to implement because you are responsible for upholding\nthe stated requirements.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nThe [`verify`] and [`verify_for_type`] functions are available for your test\nsuites. They ensure that a `BitOrder` implementation satisfies the requirements\nwhen invoked for a given register type.\n\n# Examples\n\nImplementations are not required to remain contiguous over a register. This\nexample swizzles the high and low halves of each byte, but any translation is\nvalid as long as it satisfies the strict one-to-one requirement of\nindex-to-position.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":210175,"byte_end":211747,"line_start":36,"line_end":75,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211748,"byte_end":211751,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211752,"byte_end":211763,"line_start":77,"line_end":77,"column_start":1,"column_end":12}},{"value":"/ use bitvec::{","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211764,"byte_end":211781,"line_start":78,"line_end":78,"column_start":1,"column_end":18}},{"value":"/   prelude::BitOrder,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211782,"byte_end":211806,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/   // Additional symbols:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211807,"byte_end":211835,"line_start":80,"line_end":80,"column_start":1,"column_end":29}},{"value":"/   index::{BitIdx, BitPos},","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211836,"byte_end":211866,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/   mem::BitRegister,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211867,"byte_end":211890,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211891,"byte_end":211897,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211898,"byte_end":211901,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ pub struct HiLo;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211902,"byte_end":211922,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/ unsafe impl BitOrder for HiLo {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211923,"byte_end":211958,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/   fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":211959,"byte_end":212017,"line_start":87,"line_end":87,"column_start":1,"column_end":59}},{"value":"/     BitPos::new(idx.into_inner() ^ 4).unwrap()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212018,"byte_end":212068,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212069,"byte_end":212076,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212077,"byte_end":212082,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212083,"byte_end":212086,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212087,"byte_end":212098,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/ #[cfg(test)]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212099,"byte_end":212115,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"/ fn prove_hilo() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212116,"byte_end":212137,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/   bitvec::order::verify::<HiLo>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212138,"byte_end":212176,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212177,"byte_end":212182,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212183,"byte_end":212190,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212191,"byte_end":212194,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212195,"byte_end":212231,"line_start":99,"line_end":99,"column_start":1,"column_end":37}},{"value":"/ [`BitOrder::at`]: Self::at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212232,"byte_end":212262,"line_start":100,"line_end":100,"column_start":1,"column_end":31}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212263,"byte_end":212299,"line_start":101,"line_end":101,"column_start":1,"column_end":37}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212300,"byte_end":212321,"line_start":102,"line_end":102,"column_start":1,"column_end":22}},{"value":"/ [`verify`]: crate::order::verify","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212322,"byte_end":212358,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"/ [`verify_for_type`]: crate::order::verify_for_type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212359,"byte_end":212413,"line_start":104,"line_end":104,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214823,"byte_end":214825,"line_start":169,"line_end":169,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212452,"byte_end":212518,"line_start":106,"line_end":106,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212520,"byte_end":212523,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212525,"byte_end":212600,"line_start":108,"line_end":108,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be correct.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212602,"byte_end":212664,"line_start":109,"line_end":109,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212666,"byte_end":212669,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212671,"byte_end":212692,"line_start":111,"line_end":111,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212694,"byte_end":212697,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and position govern.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212699,"byte_end":212763,"line_start":113,"line_end":113,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212765,"byte_end":212768,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212770,"byte_end":212786,"line_start":115,"line_end":115,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212788,"byte_end":212791,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212793,"byte_end":212858,"line_start":117,"line_end":117,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212860,"byte_end":212863,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212865,"byte_end":212878,"line_start":119,"line_end":119,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212880,"byte_end":212883,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within the register `R`. See","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212885,"byte_end":212960,"line_start":121,"line_end":121,"column_start":2,"column_end":77}},{"value":"/ the [`BitPos`] documentation for what electrical positions are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":212962,"byte_end":213028,"line_start":122,"line_end":122,"column_start":2,"column_end":68}},{"value":"/ considered to mean.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213030,"byte_end":213053,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213055,"byte_end":213058,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213060,"byte_end":213078,"line_start":125,"line_end":125,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213080,"byte_end":213083,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213085,"byte_end":213159,"line_start":127,"line_end":127,"column_start":2,"column_end":76}},{"value":"/ input and output values, for all possible `R` type parameters:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213161,"byte_end":213227,"line_start":128,"line_end":128,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213229,"byte_end":213232,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213234,"byte_end":213249,"line_start":130,"line_end":130,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213251,"byte_end":213254,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the range","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213256,"byte_end":213321,"line_start":132,"line_end":132,"column_start":2,"column_end":67}},{"value":"/ [`BitIdx::ZERO`] to [`BitIdx::LAST`], and produce a value in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213323,"byte_end":213396,"line_start":133,"line_end":133,"column_start":2,"column_end":75}},{"value":"/ range as a [`BitPos`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213398,"byte_end":213424,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213426,"byte_end":213429,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213431,"byte_end":213447,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213449,"byte_end":213452,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213454,"byte_end":213528,"line_start":138,"line_end":138,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may choose its output from a set of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213530,"byte_end":213602,"line_start":139,"line_end":139,"column_start":2,"column_end":74}},{"value":"/ more than one position, and no output position may be produced by more","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213604,"byte_end":213678,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ than one input index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213680,"byte_end":213705,"line_start":141,"line_end":141,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213707,"byte_end":213710,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213712,"byte_end":213725,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213727,"byte_end":213730,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213732,"byte_end":213801,"line_start":145,"line_end":145,"column_start":2,"column_end":71}},{"value":"/ lifetime of *at least* all data structures in the program. This function","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213803,"byte_end":213879,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ *may* refer to global state, but that state **must** be immutable while","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213881,"byte_end":213956,"line_start":147,"line_end":147,"column_start":2,"column_end":77}},{"value":"/ any [`bitvec`] data structures exist, and must not be used to violate","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":213958,"byte_end":214031,"line_start":148,"line_end":148,"column_start":2,"column_end":75}},{"value":"/ the totality or bijection requirements.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214033,"byte_end":214076,"line_start":149,"line_end":149,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214078,"byte_end":214081,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214083,"byte_end":214105,"line_start":151,"line_end":151,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214107,"byte_end":214110,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ The produced [`BitPos`] must be within the valid range of that type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214112,"byte_end":214184,"line_start":153,"line_end":153,"column_start":2,"column_end":74}},{"value":"/ Call sites of this function will not take any steps to constrain or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214186,"byte_end":214257,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/ check the return value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214259,"byte_end":214333,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ `BitPos`, the program is incorrect, and will likely crash.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214335,"byte_end":214397,"line_start":156,"line_end":156,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214399,"byte_end":214402,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214404,"byte_end":214415,"line_start":158,"line_end":158,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214417,"byte_end":214420,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This function is only ever called with input values in the valid","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214422,"byte_end":214490,"line_start":160,"line_end":160,"column_start":2,"column_end":70}},{"value":"/ [`BitIdx`] range. Implementors are not required to consider any values","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214492,"byte_end":214566,"line_start":161,"line_end":161,"column_start":2,"column_end":76}},{"value":"/ outside this range in their function body.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214568,"byte_end":214614,"line_start":162,"line_end":162,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214616,"byte_end":214619,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214621,"byte_end":214657,"line_start":164,"line_end":164,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx::LAST`]: crate::index::BitIdx::LAST","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214659,"byte_end":214707,"line_start":165,"line_end":165,"column_start":2,"column_end":50}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214709,"byte_end":214757,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214759,"byte_end":214795,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214797,"byte_end":214818,"line_start":168,"line_end":168,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216191,"byte_end":216197,"line_start":208,"line_end":208,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214885,"byte_end":214948,"line_start":172,"line_end":172,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214950,"byte_end":214953,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214955,"byte_end":215029,"line_start":174,"line_end":174,"column_start":2,"column_end":76}},{"value":"/ you. If you choose to override it, your implementation **must** retain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215031,"byte_end":215105,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ the behavior of the default implementation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215107,"byte_end":215154,"line_start":176,"line_end":176,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215156,"byte_end":215159,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ The default implementation calls [`Self::at`] to convert the index into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215161,"byte_end":215236,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ a position, then turns that position into a selector mask with the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215238,"byte_end":215308,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ expression `1 << pos`. `BitOrder` implementations may choose to provide","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215310,"byte_end":215385,"line_start":180,"line_end":180,"column_start":2,"column_end":77}},{"value":"/ a faster mask production here, as long as they match this behavior.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215387,"byte_end":215458,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215460,"byte_end":215463,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215465,"byte_end":215486,"line_start":183,"line_end":183,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215488,"byte_end":215491,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and selector govern.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215493,"byte_end":215557,"line_start":185,"line_end":185,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215559,"byte_end":215562,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215564,"byte_end":215580,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215582,"byte_end":215585,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215587,"byte_end":215652,"line_start":189,"line_end":189,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215654,"byte_end":215657,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215659,"byte_end":215672,"line_start":191,"line_end":191,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215674,"byte_end":215677,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215679,"byte_end":215748,"line_start":193,"line_end":193,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215750,"byte_end":215753,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215755,"byte_end":215773,"line_start":195,"line_end":195,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215775,"byte_end":215778,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215780,"byte_end":215849,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(index)`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215851,"byte_end":215924,"line_start":198,"line_end":198,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215926,"byte_end":215929,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215931,"byte_end":216002,"line_start":200,"line_end":200,"column_start":2,"column_end":73}},{"value":"/ legal index in the [`BitIdx`] domain to a one-hot value of `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216004,"byte_end":216071,"line_start":201,"line_end":201,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216073,"byte_end":216076,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216078,"byte_end":216114,"line_start":203,"line_end":203,"column_start":2,"column_end":38}},{"value":"/ [`Self::at`]: Self::at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216116,"byte_end":216142,"line_start":204,"line_end":204,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216144,"byte_end":216153,"line_start":205,"line_end":205,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216155,"byte_end":216185,"line_start":206,"line_end":206,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217226,"byte_end":217230,"line_start":245,"line_end":245,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitEnd<R>>>: Into<Option<BitEnd<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                   impl Into<Option<BitEnd<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Constructs a multiple-bit selector mask for batched operations on a\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multiple-bit selector mask for batched operations on a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216293,"byte_end":216364,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/ register `R`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216366,"byte_end":216383,"line_start":214,"line_end":214,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216385,"byte_end":216388,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216390,"byte_end":216464,"line_start":216,"line_end":216,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with [`Self::select`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216466,"byte_end":216540,"line_start":217,"line_end":217,"column_start":2,"column_end":76}},{"value":"/ and accumulating into a combined register value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216542,"byte_end":216594,"line_start":218,"line_end":218,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216596,"byte_end":216599,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216601,"byte_end":216622,"line_start":220,"line_end":220,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216624,"byte_end":216627,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type for which the mask is built.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216629,"byte_end":216686,"line_start":222,"line_end":222,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216688,"byte_end":216691,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216693,"byte_end":216709,"line_start":224,"line_end":224,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216711,"byte_end":216714,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216716,"byte_end":216772,"line_start":226,"line_end":226,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216774,"byte_end":216828,"line_start":227,"line_end":227,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216830,"byte_end":216833,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216835,"byte_end":216848,"line_start":229,"line_end":229,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216850,"byte_end":216853,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216855,"byte_end":216931,"line_start":231,"line_end":231,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216933,"byte_end":216960,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216962,"byte_end":216965,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216967,"byte_end":216985,"line_start":234,"line_end":234,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216987,"byte_end":216990,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to this expression:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216992,"byte_end":217055,"line_start":236,"line_end":236,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217057,"byte_end":217060,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217062,"byte_end":217080,"line_start":238,"line_end":238,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217082,"byte_end":217100,"line_start":239,"line_end":239,"column_start":2,"column_end":20}},{"value":"/   .map(Self::select::<R>)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217102,"byte_end":217131,"line_start":240,"line_end":240,"column_start":2,"column_end":31}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217133,"byte_end":217171,"line_start":241,"line_end":241,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217173,"byte_end":217180,"line_start":242,"line_end":242,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217182,"byte_end":217185,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217187,"byte_end":217221,"line_start":244,"line_end":244,"column_start":2,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3901},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217819,"byte_end":217823,"line_start":264,"line_end":264,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the least significant bit to the most significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the least significant bit to the most significant.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217650,"byte_end":217730,"line_start":262,"line_end":262,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":3923},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219171,"byte_end":219175,"line_start":310,"line_end":310,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the most significant bit to the least significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the most significant bit to the least significant.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219002,"byte_end":219082,"line_start":308,"line_end":308,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222065,"byte_end":222071,"line_start":409,"line_end":409,"column_start":8,"column_end":14},"name":"verify","qualname":"::order::verify","value":"pub fn verify<O>(bool) where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules.\n\nThis function checks some [`BitOrder`] implementation’s behavior on each of the\n[`BitRegister`] types it must handle, and reports any violation of the rules\nthat it detects.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor `O`.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221433,"byte_end":222040,"line_start":385,"line_end":407,"column_start":1,"column_end":4}},{"value":"inline(never)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222041,"byte_end":222057,"line_start":408,"line_end":408,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1061},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":223226,"byte_end":223241,"line_start":448,"line_end":448,"column_start":8,"column_end":23},"name":"verify_for_type","qualname":"::order::verify_for_type","value":"pub fn verify_for_type<O, R>(bool) where O: BitOrder, R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.\n\nThis function checks some [`BitOrder`] implementation against only one of the\n[`BitRegister`] types that it will encounter. This is useful if you are\nimplementing an ordering that only needs to be concerned with a subset of the\ntypes, and you know that you will never use it with the types it does not\nsupport.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n- `R`: The [`BitRegister`] type for which to test `O`.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor the combination of input types and index values.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222337,"byte_end":223201,"line_start":420,"line_end":446,"column_start":1,"column_end":4}},{"value":"inline(never)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":223202,"byte_end":223218,"line_start":447,"line_end":447,"column_start":1,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1113}],"decl_id":null,"docs":" [`bitvec`] symbol export.","sig":null,"attributes":[{"value":"* [`bitvec`] symbol export.\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":226690,"byte_end":226902,"line_start":1,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1217},{"krate":0,"index":1408},{"krate":0,"index":1560},{"krate":0,"index":1835},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2079},{"krate":0,"index":2084},{"krate":0,"index":2088},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2112},{"krate":0,"index":2117},{"krate":0,"index":2120}],"decl_id":null,"docs":" Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.","sig":null,"attributes":[{"value":"* Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.\n\n# Types\n\nAs `bitvec` is not the standard library, it does not have the freedom to use\nlanguage builtins such as actual pointers. Instead, `bitvec` uses its own\nanalagous structures:\n\n- [`BitPtr<M, O, T>`]: This represents a pointer to a single bit, and is vaguely\n  similar to `*const bool`, `*mut bool`, and `NonNull<bool>`. It consists of a\n  (non-null, well-aligned) pointer to a `T` memory element and a bit-index\n  within that element. It uses the `O` ordering implementation to access the\n  selected bit, and uses `M` to determine whether it has write permissions to\n  the location.\n- [`BitPtrRange<M, O, T>`]: This is equivalent to `Range<BitPtr<M, O, T>>`. It\n  exists because [`Range`] has some associated types that are still unstable to\n  implement for its type parameters. It is also smaller than the `Range` would\n  be, because it can take advantage of layout optimizations.\n- [`BitRef<M, O, T>`]: This is a proxy reference type, equivalent to the C++\n  [`bitset<N>::reference`]. It implements `Deref` and, if `M` is `Mut`,\n  `DerefMut` to bool, so that it can be read from and written to as if it were\n  an `&bool` or `&mut bool`. It is **not** a referent type, and cannot be used\n  in APIs that expect actual references. It is implemented under the hood as a\n  `BitPtr` with a `bool` cached in one of the padding bytes.\n- `BitSpan<M, O, T>`: This is a crate-internal type that encodes a `BitPtr` and\n  a length counter into a two-word structure that can be transmuted into\n  `*BitSlice<O, T>`. This type enforces the non-null/well-aligned rule, and is\n  the source of the limitation that `bitvec` region types can only address ⅛ of\n  a `usize`, rather than the ½ limitation of the standard library collections.\n\n  This type is not public API; it will only ever appear in its transmuted form,\n  `*BitSlice<O, T>`. Users are **not permitted** to use any of the [`core::ptr`]\n  or [`pointer`] functions to view or modify `*BitSlice` pointers, or their\n  referent locations, in any way.\n\n# Safety\n\nThe functions in this module take `bitvec` equivalents to raw pointers as their\narguments and read from or write to them. For this to be safe, these pointers\nmust be *valid*. Whether a pointer is valid depends on the operation it is used\nfor (reading or writing), and the extent of the memory that is accessed (i.e.\nhow many bits are read/written in and how many underlying memory elements are\naccessed). Most functions use [`BitPtr`] to access only a single bit, in which\ncase the documentation omits the size and implicitly assumes it to be one bit in\none `T` element.\n\nThe Rust rules about pointer validity are always in effect; `bitvec` refines\nthem to a bit-precision granularity, but must still respect the byte-level and\nelement-level rules.\n\n# Crate-Specific Restrictions\n\n`bitvec` uses an internal encoding scheme to make bit-region pointers fit into a\nstandard Rust slice pointer. This encoding requires that the base element\naddress of a bit-pointer be *non-null* and *well-aligned* for all pointers that\nare used in the encoding scheme.\n\nThe `bitvec` structure used to emulate a pointer to a single bit is larger than\none processor word, and thus cannot be encoded to fit in a `*const Bit`. To ease\ninternal complexity, these restrictions are universal in `bitvec`: the crate as\na whole refuses to operate on null pointers, or pointers that are not aligned to\ntheir referent type, even if your usage never touches the span encoding.\n\nAs such, the pointer types in this module can essentially only be sourced from\nreferences, not from arbitrary address values. While this module attempts to\nrely on actual Rust references as much as possible, and instead use only the\nordinary [`core::ptr`] and [`pointer`] functions. This is not always possible;\nin particular, Rust does not offer stable atomic intrinsics, and instead only\nallows them to be used on references.\n\n[`BitPtr`]: crate::ptr::BitPtr\n[`BitPtr<M, O, T>`]: crate::ptr::BitPtr\n[`BitPtrRange<M, O, T>`]: crate::ptr::BitPtrRange\n[`BitRef<M, O, T>`]: crate::ptr::BitRef\n[`BitSpan<M, O, T>`]: crate::ptr::BitSpan\n[`Range`]: core::ops::Range\n[`bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n[`core::ptr`]: core::ptr\n[`pointer`]: https://doc.rust-lang.org/std/primitive.pointer.html\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":227244,"byte_end":231623,"line_start":1,"line_end":80,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1184},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":249442,"byte_end":249457,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"check_alignment","qualname":"::ptr::address::check_alignment","value":"pub fn check_alignment<M, T>(Address<M, T>)\n-> Result<Address<M, T>, MisalignError<T>> where M: Mutability","parent":null,"children":[],"decl_id":null,"docs":" Ensures that an address is well-aligned to its referent type.\n","sig":null,"attributes":[{"value":"/ Ensures that an address is well-aligned to its referent type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":249359,"byte_end":249424,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":249425,"byte_end":249434,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":249855,"byte_end":249865,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"name":"Permission","qualname":"::ptr::address::AddressExt::Permission","value":"type Permission: Mutability;","parent":{"krate":0,"index":1187},"children":[],"decl_id":null,"docs":" Tracks the original mutation capability of the source pointer.\n","sig":null,"attributes":[{"value":"/ Tracks the original mutation capability of the source pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":249782,"byte_end":249848,"line_start":51,"line_end":51,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3945},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251265,"byte_end":251278,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"MisalignError","qualname":"::ptr::address::MisalignError","value":"MisalignError { ptr }","parent":null,"children":[{"krate":0,"index":3947}],"decl_id":null,"docs":" Error produced when an address is insufficiently aligned to its type.\n","sig":null,"attributes":[{"value":"/ Error produced when an address is insufficiently aligned to its type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251119,"byte_end":251192,"line_start":92,"line_end":92,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":3947},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251318,"byte_end":251321,"line_start":96,"line_end":96,"column_start":6,"column_end":9},"name":"ptr","qualname":"::ptr::address::MisalignError::ptr","value":"*const T","parent":{"krate":0,"index":3945},"children":[],"decl_id":null,"docs":" The misaligned pointer.\n","sig":null,"attributes":[{"value":"/ The misaligned pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251285,"byte_end":251312,"line_start":95,"line_end":95,"column_start":2,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":255766,"byte_end":255772,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"BitRef","qualname":"::ptr::proxy::BitRef","value":"BitRef {  }","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1297}],"decl_id":null,"docs":" A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].","sig":null,"attributes":[{"value":"* A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].\n\nThis type wraps a `BitPtr` and caches a `bool` in a padding byte. It is then\nable to freely produce references to the cached bool, and commits the cache back\nto the referent bit location on `drop`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitRef`.\n\n# Type Parameters\n\n- `M`: The write permission of the reference. When this is `Const`, the\n  `DerefMut` implementation is removed, forbidding the proxy from writing back\n  to memory.\n- `O`: The ordering used to address a bit in memory.\n- `T`: The storage type containing the referent bit.\n\n# Quirks\n\nBecause this type has both a lifetime and a destructor, it can introduce an\nuncommon error condition in Rust. When an expression that produces this type is\nin the final expression of a block, including if that expression is used as a\ncondition in a `match`, `if let`, or `if`, then the compiler will attempt to\nextend the drop scope of this type to the outside of the block. This causes a\nlifetime mismatch error if the source region from which this proxy is produced\ngoes out of scope at the end of the block.\n\nIf you get a compiler error that this type causes something to be dropped while\nborrowed, you can end the borrow by putting any expression-ending syntax element\nafter the offending expression that produces this type, including a semicolon or\nan item definition.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`std::bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":253589,"byte_end":255473,"line_start":49,"line_end":103,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":255642,"byte_end":255659,"line_start":106,"line_end":106,"column_start":41,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256684,"byte_end":256695,"line_start":151,"line_end":151,"column_start":16,"column_end":27},"name":"from_bitptr","qualname":"<BitRef>::from_bitptr","value":"pub unsafe fn from_bitptr(BitPtr<M, O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256225,"byte_end":256279,"line_start":133,"line_end":133,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256281,"byte_end":256284,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ The conversion reads from the pointer, then stores the `bool` in a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256286,"byte_end":256356,"line_start":135,"line_end":135,"column_start":2,"column_end":72}},{"value":"/ padding byte.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256358,"byte_end":256375,"line_start":136,"line_end":136,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256377,"byte_end":256380,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256382,"byte_end":256398,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256400,"byte_end":256403,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `bitptr`: A bit-pointer to turn into a bit-reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256405,"byte_end":256464,"line_start":140,"line_end":140,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256466,"byte_end":256469,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256471,"byte_end":256484,"line_start":142,"line_end":142,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256486,"byte_end":256489,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ A bit-reference pointing at `bitptr`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256491,"byte_end":256532,"line_start":144,"line_end":144,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256534,"byte_end":256537,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256539,"byte_end":256551,"line_start":146,"line_end":146,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256553,"byte_end":256556,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ The `bitptr` must address a location that is valid for reads and, if `M`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256558,"byte_end":256634,"line_start":148,"line_end":148,"column_start":2,"column_end":78}},{"value":"/ is `Mut`, writes.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256636,"byte_end":256657,"line_start":149,"line_end":149,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256659,"byte_end":256668,"line_start":150,"line_end":150,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257603,"byte_end":257614,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"name":"into_bitptr","qualname":"<BitRef>::into_bitptr","value":"pub fn into_bitptr(Self) -> BitPtr<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Decays the bit-reference to an ordinary bit-pointer.","sig":null,"attributes":[{"value":"/ Decays the bit-reference to an ordinary bit-pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257241,"byte_end":257297,"line_start":176,"line_end":176,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257299,"byte_end":257302,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257304,"byte_end":257320,"line_start":178,"line_end":178,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257322,"byte_end":257325,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257327,"byte_end":257339,"line_start":180,"line_end":180,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257341,"byte_end":257344,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257346,"byte_end":257359,"line_start":182,"line_end":182,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257361,"byte_end":257364,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ The interior bit-pointer, without the associated cache. If this was a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257366,"byte_end":257439,"line_start":184,"line_end":184,"column_start":2,"column_end":75}},{"value":"/ write-capable pointer, then the cached bit is committed to memory before","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257441,"byte_end":257517,"line_start":185,"line_end":185,"column_start":2,"column_end":78}},{"value":"/ this method returns.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257519,"byte_end":257543,"line_start":186,"line_end":186,"column_start":2,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257545,"byte_end":257562,"line_start":187,"line_end":187,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257564,"byte_end":257594,"line_start":188,"line_end":188,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257930,"byte_end":257937,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitRef>::replace","value":"pub fn replace(&mut Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the referenced bit, returning the previous value.","sig":null,"attributes":[{"value":"/ Moves `src` into the referenced bit, returning the previous value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257732,"byte_end":257802,"line_start":199,"line_end":199,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257804,"byte_end":257807,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257809,"byte_end":257823,"line_start":201,"line_end":201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257825,"byte_end":257828,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`mem::replace`](core::mem::replace)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257830,"byte_end":257870,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257872,"byte_end":257889,"line_start":204,"line_end":204,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257891,"byte_end":257921,"line_start":205,"line_end":205,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258220,"byte_end":258224,"line_start":218,"line_end":218,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitRef>::swap","value":"pub fn swap<O2, T2>(&mut Self, &mut BitRef<, Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deïnitializing either\n one.","sig":null,"attributes":[{"value":"/ Swaps the values at two mutable locations, without deïnitializing either","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258011,"byte_end":258088,"line_start":210,"line_end":210,"column_start":2,"column_end":78}},{"value":"/ one.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258090,"byte_end":258098,"line_start":211,"line_end":211,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258100,"byte_end":258103,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258105,"byte_end":258119,"line_start":213,"line_end":213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258121,"byte_end":258124,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ [`mem::swap`](core::mem::swap)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258126,"byte_end":258160,"line_start":215,"line_end":215,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258162,"byte_end":258179,"line_start":216,"line_end":216,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258181,"byte_end":258211,"line_start":217,"line_end":217,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259017,"byte_end":259020,"line_start":241,"line_end":241,"column_start":9,"column_end":12},"name":"set","qualname":"<BitRef>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258369,"byte_end":258441,"line_start":226,"line_end":226,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258443,"byte_end":258446,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258448,"byte_end":258520,"line_start":228,"line_end":228,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258522,"byte_end":258596,"line_start":229,"line_end":229,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary [`DerefMut`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258598,"byte_end":258666,"line_start":230,"line_end":230,"column_start":2,"column_end":70}},{"value":"/ proxying, but the latter depends on compiler optimization.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258668,"byte_end":258730,"line_start":231,"line_end":231,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258732,"byte_end":258735,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258737,"byte_end":258753,"line_start":233,"line_end":233,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258755,"byte_end":258758,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258760,"byte_end":258833,"line_start":235,"line_end":235,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258835,"byte_end":258893,"line_start":236,"line_end":236,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258895,"byte_end":258953,"line_start":237,"line_end":237,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258955,"byte_end":258958,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`DerefMut`]: core::ops::DerefMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258960,"byte_end":258997,"line_start":239,"line_end":239,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258999,"byte_end":259008,"line_start":240,"line_end":240,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1467},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267320,"byte_end":267331,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"BitPtrRange","qualname":"::ptr::range::BitPtrRange","value":"BitPtrRange { start, end }","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472}],"decl_id":null,"docs":" Equivalent to `Range<BitPtr<M, O, T>>`.","sig":null,"attributes":[{"value":"* Equivalent to `Range<BitPtr<M, O, T>>`.\n\nAs with `Range`, this is a half-open set: the starting pointer is included in\nthe set of live addresses, while the ending pointer is one-past-the-end of live\naddresses, and is not usable.\n\nThis structure exists because `Range` does not permit foreign implementations of\nits internal traits.\n\n# Original\n\n[`Range<*bool>`](core::ops::Range)\n\n# API Differences\n\nThis cannot be constructed directly from the `..` syntax, though a `From`\nimplementation is provided.\n\n# Type Parameters\n\n- `M`: The write permissions of the pointers this range produces.\n- `O`: The bit-ordering within a storage element used to access bits.\n- `T`: The storage element type containing the referent bits.\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":266300,"byte_end":267027,"line_start":38,"line_end":61,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267196,"byte_end":267213,"line_start":64,"line_end":64,"column_start":41,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267460,"byte_end":267465,"line_start":76,"line_end":76,"column_start":6,"column_end":11},"name":"start","qualname":"::ptr::range::BitPtrRange::start","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"/ The lower bound of the range (inclusive).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267409,"byte_end":267454,"line_start":75,"line_end":75,"column_start":2,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267537,"byte_end":267540,"line_start":78,"line_end":78,"column_start":6,"column_end":9},"name":"end","qualname":"::ptr::range::BitPtrRange::end","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" The higher bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"/ The higher bound of the range (exclusive).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267485,"byte_end":267531,"line_start":77,"line_end":77,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267744,"byte_end":267749,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::ptr::range::BitPtrRange::<M, O, T>::EMPTY","value":"Self","parent":{"krate":0,"index":1473},"children":[],"decl_id":null,"docs":" The canonical empty range. All ranges with zero length are equally\n empty.\n","sig":null,"attributes":[{"value":"/ The canonical empty range. All ranges with zero length are equally","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267650,"byte_end":267720,"line_start":87,"line_end":87,"column_start":2,"column_end":72}},{"value":"/ empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267722,"byte_end":267732,"line_start":88,"line_end":88,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267947,"byte_end":267956,"line_start":97,"line_end":97,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtrRange<M, O, T>>::raw_parts","value":"pub fn raw_parts(&Self) -> (BitPtr<M, O, T>, BitPtr<M, O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Destructures the range back into its start and end pointers.\n","sig":null,"attributes":[{"value":"/ Destructures the range back into its start and end pointers.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267823,"byte_end":267887,"line_start":94,"line_end":94,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267889,"byte_end":267906,"line_start":95,"line_end":95,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267908,"byte_end":267938,"line_start":96,"line_end":96,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268213,"byte_end":268223,"line_start":105,"line_end":105,"column_start":9,"column_end":19},"name":"into_range","qualname":"<BitPtrRange<M, O, T>>::into_range","value":"pub fn into_range(Self) -> Range<BitPtr<M, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts the structure into an actual `Range`. The `Range` will have\n limited functionality compared to `self`.\n","sig":null,"attributes":[{"value":"/ Converts the structure into an actual `Range`. The `Range` will have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268034,"byte_end":268106,"line_start":101,"line_end":101,"column_start":2,"column_end":74}},{"value":"/ limited functionality compared to `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268108,"byte_end":268153,"line_start":102,"line_end":102,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268155,"byte_end":268172,"line_start":103,"line_end":103,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268174,"byte_end":268204,"line_start":104,"line_end":104,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268825,"byte_end":268833,"line_start":131,"line_end":131,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitPtrRange<M, O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the range is empty (the distance between pointers is `0`).","sig":null,"attributes":[{"value":"/ Tests if the range is empty (the distance between pointers is `0`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268288,"byte_end":268359,"line_start":109,"line_end":109,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268361,"byte_end":268364,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268366,"byte_end":268380,"line_start":111,"line_end":111,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268382,"byte_end":268385,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ [`Range::is_empty`](core::ops::Range::is_empty)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268387,"byte_end":268438,"line_start":113,"line_end":113,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268440,"byte_end":268443,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268445,"byte_end":268459,"line_start":115,"line_end":115,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268461,"byte_end":268464,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268466,"byte_end":268477,"line_start":117,"line_end":117,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268479,"byte_end":268506,"line_start":118,"line_end":118,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268508,"byte_end":268541,"line_start":119,"line_end":119,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268543,"byte_end":268546,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268548,"byte_end":268567,"line_start":121,"line_end":121,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268569,"byte_end":268621,"line_start":122,"line_end":122,"column_start":2,"column_end":54}},{"value":"/ let mut range = unsafe { ptr.range(1) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268623,"byte_end":268667,"line_start":123,"line_end":123,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268669,"byte_end":268672,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ assert!(!range.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268674,"byte_end":268705,"line_start":125,"line_end":125,"column_start":2,"column_end":33}},{"value":"/ range.next();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268707,"byte_end":268724,"line_start":126,"line_end":126,"column_start":2,"column_end":19}},{"value":"/ assert!(range.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268726,"byte_end":268756,"line_start":127,"line_end":127,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268758,"byte_end":268765,"line_start":128,"line_end":128,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268767,"byte_end":268784,"line_start":129,"line_end":129,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268786,"byte_end":268816,"line_start":130,"line_end":130,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270246,"byte_end":270254,"line_start":178,"line_end":178,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitPtrRange<M, O, T>>::contains","value":"pub fn contains<M2, T2>(&Self, &BitPtr<M2, O, T2>) -> bool where\nM2: Mutability, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `pointer` is contained in the range.","sig":null,"attributes":[{"value":"/ Returns `true` if the `pointer` is contained in the range.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268881,"byte_end":268943,"line_start":135,"line_end":135,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268945,"byte_end":268948,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268950,"byte_end":268964,"line_start":137,"line_end":137,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268966,"byte_end":268969,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ [`Range::contains`](core::ops::Range::contains)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":268971,"byte_end":269022,"line_start":139,"line_end":139,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269024,"byte_end":269027,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269029,"byte_end":269050,"line_start":141,"line_end":141,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269052,"byte_end":269055,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The candidate pointer may differ in mutability permissions and exact","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269057,"byte_end":269129,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ storage type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269131,"byte_end":269148,"line_start":144,"line_end":144,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269150,"byte_end":269153,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ If `T2::Mem` is not `T::Mem`, then this always returns `false`. If `T2`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269155,"byte_end":269230,"line_start":146,"line_end":146,"column_start":2,"column_end":77}},{"value":"/ and `T` have the same memory type, but different alias permissions, then","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269232,"byte_end":269308,"line_start":147,"line_end":147,"column_start":2,"column_end":78}},{"value":"/ the comparison can continue.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269310,"byte_end":269342,"line_start":148,"line_end":148,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269344,"byte_end":269347,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269349,"byte_end":269363,"line_start":150,"line_end":150,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269365,"byte_end":269368,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269370,"byte_end":269381,"line_start":152,"line_end":152,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269383,"byte_end":269410,"line_start":153,"line_end":153,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269412,"byte_end":269445,"line_start":154,"line_end":154,"column_start":2,"column_end":35}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269447,"byte_end":269472,"line_start":155,"line_end":155,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269474,"byte_end":269477,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269479,"byte_end":269499,"line_start":157,"line_end":157,"column_start":2,"column_end":22}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269501,"byte_end":269553,"line_start":158,"line_end":158,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269555,"byte_end":269558,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ let mut range = unsafe { ptr.range(16) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269560,"byte_end":269605,"line_start":160,"line_end":160,"column_start":2,"column_end":47}},{"value":"/ // Reduce the range contents.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269607,"byte_end":269640,"line_start":161,"line_end":161,"column_start":2,"column_end":35}},{"value":"/ range.nth(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269642,"byte_end":269659,"line_start":162,"line_end":162,"column_start":2,"column_end":19}},{"value":"/ range.nth_back(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269661,"byte_end":269683,"line_start":163,"line_end":163,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269685,"byte_end":269688,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ // The start pointer is now excluded, but the interior remains.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269690,"byte_end":269757,"line_start":165,"line_end":165,"column_start":2,"column_end":69}},{"value":"/ assert!(!range.contains(&ptr));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269759,"byte_end":269794,"line_start":166,"line_end":166,"column_start":2,"column_end":37}},{"value":"/ assert!(range.contains(&unsafe { ptr.add(8) }));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269796,"byte_end":269848,"line_start":167,"line_end":167,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269850,"byte_end":269853,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ // Different base types are always excluded.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269855,"byte_end":269903,"line_start":169,"line_end":169,"column_start":2,"column_end":50}},{"value":"/ let casted = ptr.cast::<u8>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269905,"byte_end":269939,"line_start":170,"line_end":170,"column_start":2,"column_end":36}},{"value":"/ assert!(!range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269941,"byte_end":269997,"line_start":171,"line_end":171,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":269999,"byte_end":270002,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ // Casting to a different alias model with the same width is valid.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270004,"byte_end":270075,"line_start":173,"line_end":173,"column_start":2,"column_end":73}},{"value":"/ let casted = ptr.cast::<Cell<u16>>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270077,"byte_end":270118,"line_start":174,"line_end":174,"column_start":2,"column_end":43}},{"value":"/ assert!(range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270120,"byte_end":270175,"line_start":175,"line_end":175,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270177,"byte_end":270184,"line_start":176,"line_end":176,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":270221,"byte_end":270235,"line_start":177,"line_end":177,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1675},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278221,"byte_end":278227,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"BitPtr","qualname":"::ptr::single::BitPtr","value":"BitPtr {  }","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681}],"decl_id":null,"docs":" Pointer to an individual bit in a memory element. Analagous to `*bool`.","sig":null,"attributes":[{"value":"* Pointer to an individual bit in a memory element. Analagous to `*bool`.\n\n# Original\n\n[`*bool`](https://doc.rust-lang.org/std/primitive.pointer.html) and\n[`NonNull<bool>`](core::ptr::NonNull)\n\n# API Differences\n\nThis must be a structure, rather than a raw pointer, for two reasons:\n\n- It is larger than a raw pointer.\n- Raw pointers are not `#[fundamental]` and cannot have foreign implementations.\n\nAdditionally, rather than create two structures to map to `*const bool` and\n`*mut bool`, respectively, this takes mutability as a type parameter.\n\nBecause the encoded span pointer requires that memory addresses are well\naligned, this type also imposes the alignment requirement and refuses\nconstruction for misaligned element addresses. While this type is used in the\nAPI equivalent of ordinary raw pointers, it is restricted in value to only be\n*references* to memory elements.\n\n# ABI Differences\n\nThis has alignment `1`, rather than an alignment to the processor word. This is\nnecessary for some crate-internal optimizations.\n\n# Type Parameters\n\n- `M`: Marks whether the pointer permits mutation of memory through it.\n- `O`: The ordering of bits within a memory element.\n- `T`: A memory type used to select both the register size and the access\n  behavior when performing loads/stores.\n\n# Usage\n\nThis structure is used as the [`bitvec`] equivalent to `*bool`. It is used in\nall raw-pointer APIs, and provides behavior to emulate raw pointers. It cannot\nbe directly dereferenced, as it is not a pointer; it can only be transformed\nback into higher referential types, or used in [`bitvec::ptr`] free functions.\n\nThese pointers can never be null, or misaligned.\n\n[`bitvec`]: crate\n[`bitvec::ptr`]: crate::ptr\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":276476,"byte_end":278190,"line_start":59,"line_end":105,"column_start":1,"column_end":4}},{"value":"repr(C, packed)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278191,"byte_end":278209,"line_start":106,"line_end":106,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278730,"byte_end":278738,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"DANGLING","qualname":"::ptr::single::BitPtr::<M, O, T>::DANGLING","value":"Self","parent":{"krate":0,"index":1682},"children":[],"decl_id":null,"docs":" The dangling pointer. This selects the starting bit of the `T` dangling\n address.\n","sig":null,"attributes":[{"value":"/ The dangling pointer. This selects the starting bit of the `T` dangling","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278629,"byte_end":278704,"line_start":127,"line_end":127,"column_start":2,"column_end":77}},{"value":"/ address.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278706,"byte_end":278718,"line_start":128,"line_end":128,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280053,"byte_end":280060,"line_start":168,"line_end":168,"column_start":9,"column_end":16},"name":"try_new","qualname":"<BitPtr<M, O, T>>::try_new","value":"pub fn try_new<A>(A, u8) -> Result<Self, BitPtrError<T>> where\nA: TryInto<Address<M, T>>, BitPtrError<T>: From<A::Error>","parent":null,"children":[],"decl_id":null,"docs":" Tries to construct a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Tries to construct a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279213,"byte_end":279286,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279288,"byte_end":279291,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279293,"byte_end":279314,"line_start":146,"line_end":146,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279316,"byte_end":279319,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ - `A`: This accepts anything that may be used as a memory address.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279321,"byte_end":279391,"line_start":148,"line_end":148,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279393,"byte_end":279396,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279398,"byte_end":279414,"line_start":150,"line_end":150,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279416,"byte_end":279419,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ - `addr`: The memory address to use in the `BitPtr`. If this value","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279421,"byte_end":279491,"line_start":152,"line_end":152,"column_start":2,"column_end":72}},{"value":"/   violates the [`Address`] rules, then its conversion error will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279493,"byte_end":279564,"line_start":153,"line_end":153,"column_start":2,"column_end":73}},{"value":"/   returned.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279566,"byte_end":279581,"line_start":154,"line_end":154,"column_start":2,"column_end":17}},{"value":"/ - `head`: The index of the bit in `*addr` that this pointer selects. If","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279583,"byte_end":279658,"line_start":155,"line_end":155,"column_start":2,"column_end":77}},{"value":"/   this value violates the [`BitIdx`] rules, then its conversion error","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279660,"byte_end":279733,"line_start":156,"line_end":156,"column_start":2,"column_end":75}},{"value":"/   will be returned.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279735,"byte_end":279758,"line_start":157,"line_end":157,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279760,"byte_end":279763,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279765,"byte_end":279778,"line_start":159,"line_end":159,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279780,"byte_end":279783,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ A new `BitPtr`, selecting the memory location `addr` and the bit `head`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279785,"byte_end":279861,"line_start":161,"line_end":161,"column_start":2,"column_end":78}},{"value":"/ If either `addr` or `head` are invalid values, then this propagates","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279863,"byte_end":279934,"line_start":162,"line_end":162,"column_start":2,"column_end":73}},{"value":"/ their error.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279936,"byte_end":279952,"line_start":163,"line_end":163,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279954,"byte_end":279957,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ [`Address`]: crate::ptr::Address","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279959,"byte_end":279995,"line_start":165,"line_end":165,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":279997,"byte_end":280033,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280035,"byte_end":280044,"line_start":167,"line_end":167,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280751,"byte_end":280754,"line_start":192,"line_end":192,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPtr<M, O, T>>::new","value":"pub fn new(Address<M, T>, BitIdx<T::Mem>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280247,"byte_end":280312,"line_start":176,"line_end":176,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280314,"byte_end":280317,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ Since this requires that the address and bit index are already","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280319,"byte_end":280385,"line_start":178,"line_end":178,"column_start":2,"column_end":68}},{"value":"/ well-formed, it can assemble the `BitPtr` without inspecting their","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280387,"byte_end":280457,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ values.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280459,"byte_end":280470,"line_start":180,"line_end":180,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280472,"byte_end":280475,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280477,"byte_end":280493,"line_start":182,"line_end":182,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280495,"byte_end":280498,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `addr`: A well-formed memory address of `T`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280500,"byte_end":280550,"line_start":184,"line_end":184,"column_start":2,"column_end":52}},{"value":"/ - `head`: A well-formed bit index within `T`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280552,"byte_end":280601,"line_start":185,"line_end":185,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280603,"byte_end":280606,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280608,"byte_end":280621,"line_start":187,"line_end":187,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280623,"byte_end":280626,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ A `BitPtr` selecting the `head` bit in the location `addr`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280628,"byte_end":280691,"line_start":189,"line_end":189,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280693,"byte_end":280710,"line_start":190,"line_end":190,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280712,"byte_end":280742,"line_start":191,"line_end":191,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281186,"byte_end":281195,"line_start":212,"line_end":212,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtr<M, O, T>>::raw_parts","value":"pub fn raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes the pointer into its element address and bit index.","sig":null,"attributes":[{"value":"/ Decomposes the pointer into its element address and bit index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280866,"byte_end":280932,"line_start":200,"line_end":200,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280934,"byte_end":280937,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280939,"byte_end":280955,"line_start":202,"line_end":202,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280957,"byte_end":280960,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280962,"byte_end":280974,"line_start":204,"line_end":204,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280976,"byte_end":280979,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280981,"byte_end":280994,"line_start":206,"line_end":206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":280996,"byte_end":280999,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The memory address in which the referent bit is located.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281001,"byte_end":281069,"line_start":208,"line_end":208,"column_start":2,"column_end":70}},{"value":"/ - `.1`: The index of the referent bit within `*.0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281071,"byte_end":281126,"line_start":209,"line_end":209,"column_start":2,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281128,"byte_end":281145,"line_start":210,"line_end":210,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281147,"byte_end":281177,"line_start":211,"line_end":211,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283670,"byte_end":283675,"line_start":294,"line_end":294,"column_start":16,"column_end":21},"name":"range","qualname":"<BitPtr<M, O, T>>::range","value":"pub unsafe fn range(Self, usize) -> BitPtrRange<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Produces a pointer range starting at `self` and running for `count`\n bits.","sig":null,"attributes":[{"value":"/ Produces a pointer range starting at `self` and running for `count`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":282954,"byte_end":283025,"line_start":270,"line_end":270,"column_start":2,"column_end":73}},{"value":"/ bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283027,"byte_end":283036,"line_start":271,"line_end":271,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283038,"byte_end":283041,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ This calls `self.add(count)`, then bundles the resulting pointer as the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283043,"byte_end":283118,"line_start":273,"line_end":273,"column_start":2,"column_end":77}},{"value":"/ high end of the produced range.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283120,"byte_end":283155,"line_start":274,"line_end":274,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283157,"byte_end":283160,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283162,"byte_end":283178,"line_start":276,"line_end":276,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283180,"byte_end":283183,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ - `self`: The starting pointer of the produced range.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283185,"byte_end":283242,"line_start":278,"line_end":278,"column_start":2,"column_end":59}},{"value":"/ - `count`: The number of bits that the produced range includes.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283244,"byte_end":283311,"line_start":279,"line_end":279,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283313,"byte_end":283316,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283318,"byte_end":283331,"line_start":281,"line_end":281,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283333,"byte_end":283336,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ A half-open range of pointers, beginning at (and including) `self`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283338,"byte_end":283409,"line_start":283,"line_end":283,"column_start":2,"column_end":73}},{"value":"/ running for `count` bits, and ending at (and excluding)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283411,"byte_end":283470,"line_start":284,"line_end":284,"column_start":2,"column_end":61}},{"value":"/ `self.add(count)`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283472,"byte_end":283494,"line_start":285,"line_end":285,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283496,"byte_end":283499,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283501,"byte_end":283513,"line_start":287,"line_end":287,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283515,"byte_end":283518,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ `count` cannot violate the constraints in [`add`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283520,"byte_end":283574,"line_start":289,"line_end":289,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283576,"byte_end":283579,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283581,"byte_end":283603,"line_start":291,"line_end":291,"column_start":2,"column_end":24}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283605,"byte_end":283622,"line_start":292,"line_end":292,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283624,"byte_end":283654,"line_start":293,"line_end":293,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283980,"byte_end":283991,"line_start":308,"line_end":308,"column_start":16,"column_end":27},"name":"into_bitref","qualname":"<BitPtr<M, O, T>>::into_bitref","value":"pub unsafe fn into_bitref<'a>(Self) -> BitRef","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283788,"byte_end":283842,"line_start":301,"line_end":301,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283844,"byte_end":283847,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283849,"byte_end":283861,"line_start":303,"line_end":303,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283863,"byte_end":283866,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ The pointer must be valid to dereference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283868,"byte_end":283913,"line_start":305,"line_end":305,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283915,"byte_end":283932,"line_start":306,"line_end":306,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283934,"byte_end":283964,"line_start":307,"line_end":307,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284169,"byte_end":284174,"line_start":315,"line_end":315,"column_start":9,"column_end":14},"name":"immut","qualname":"<BitPtr<M, O, T>>::immut","value":"pub fn immut(Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Removes write permissions from a bit-pointer.\n","sig":null,"attributes":[{"value":"/ Removes write permissions from a bit-pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284060,"byte_end":284109,"line_start":312,"line_end":312,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284111,"byte_end":284128,"line_start":313,"line_end":313,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284130,"byte_end":284160,"line_start":314,"line_end":314,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284517,"byte_end":284527,"line_start":331,"line_end":331,"column_start":16,"column_end":26},"name":"assert_mut","qualname":"<BitPtr<M, O, T>>::assert_mut","value":"pub unsafe fn assert_mut(Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds write permissions to a bit-pointer.","sig":null,"attributes":[{"value":"/ Adds write permissions to a bit-pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284318,"byte_end":284362,"line_start":324,"line_end":324,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284364,"byte_end":284367,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284369,"byte_end":284381,"line_start":326,"line_end":326,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284383,"byte_end":284386,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ This pointer must have been derived from a `*mut` pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284388,"byte_end":284450,"line_start":328,"line_end":328,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284452,"byte_end":284469,"line_start":329,"line_end":329,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284471,"byte_end":284501,"line_start":330,"line_end":330,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285531,"byte_end":285538,"line_start":368,"line_end":368,"column_start":9,"column_end":16},"name":"is_null","qualname":"<BitPtr<M, O, T>>::is_null","value":"pub fn is_null(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a bit-pointer is the null value.","sig":null,"attributes":[{"value":"/ Tests if a bit-pointer is the null value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285121,"byte_end":285166,"line_start":357,"line_end":357,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285168,"byte_end":285171,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ This is always false, as `BitPtr` is a `NonNull` internally. Use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285173,"byte_end":285241,"line_start":359,"line_end":359,"column_start":2,"column_end":70}},{"value":"/ `Option<BitPtr>` to express the potential for a null pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285243,"byte_end":285308,"line_start":360,"line_end":360,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285310,"byte_end":285313,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285315,"byte_end":285329,"line_start":362,"line_end":362,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285331,"byte_end":285334,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ [`pointer::is_null`](https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285336,"byte_end":285429,"line_start":364,"line_end":364,"column_start":2,"column_end":95}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285431,"byte_end":285448,"line_start":365,"line_end":365,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285450,"byte_end":285480,"line_start":366,"line_end":366,"column_start":2,"column_end":32}},{"value":"deprecated = \"`BitPtr` is never null\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285482,"byte_end":285522,"line_start":367,"line_end":367,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286165,"byte_end":286169,"line_start":387,"line_end":387,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitPtr<M, O, T>>::cast","value":"pub fn cast<U>(Self) -> BitPtr<M, O, U> where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Casts to a bit-pointer of another storage type, preserving the\n bit-ordering and mutability permissions.","sig":null,"attributes":[{"value":"/ Casts to a bit-pointer of another storage type, preserving the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285568,"byte_end":285634,"line_start":372,"line_end":372,"column_start":2,"column_end":68}},{"value":"/ bit-ordering and mutability permissions.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285636,"byte_end":285680,"line_start":373,"line_end":373,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285682,"byte_end":285685,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285687,"byte_end":285701,"line_start":375,"line_end":375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285703,"byte_end":285706,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ [`pointer::cast`](https://doc.rust-lang.org/std/primitive.pointer.html#method.cast)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285708,"byte_end":285795,"line_start":377,"line_end":377,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285797,"byte_end":285800,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285802,"byte_end":285816,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285818,"byte_end":285821,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This is not a free typecast! It encodes the pointer as a crate-internal","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285823,"byte_end":285898,"line_start":381,"line_end":381,"column_start":2,"column_end":77}},{"value":"/ span descriptor, casts the span descriptor to the `U` storage element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285900,"byte_end":285973,"line_start":382,"line_end":382,"column_start":2,"column_end":75}},{"value":"/ parameter, then decodes the result. This preserves general correctness,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285975,"byte_end":286050,"line_start":383,"line_end":383,"column_start":2,"column_end":77}},{"value":"/ but will likely change both the virtual and physical bits addressed by","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286052,"byte_end":286126,"line_start":384,"line_end":384,"column_start":2,"column_end":76}},{"value":"/ this pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286128,"byte_end":286145,"line_start":385,"line_end":385,"column_start":2,"column_end":19}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286147,"byte_end":286156,"line_start":386,"line_end":386,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287572,"byte_end":287578,"line_start":432,"line_end":432,"column_start":16,"column_end":22},"name":"as_ref","qualname":"<BitPtr<M, O, T>>::as_ref","value":"pub unsafe fn as_ref<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286336,"byte_end":286387,"line_start":394,"line_end":394,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286389,"byte_end":286392,"line_start":395,"line_end":395,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286394,"byte_end":286463,"line_start":396,"line_end":396,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286465,"byte_end":286484,"line_start":397,"line_end":397,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286486,"byte_end":286489,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286491,"byte_end":286505,"line_start":399,"line_end":399,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286507,"byte_end":286510,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286512,"byte_end":286603,"line_start":401,"line_end":401,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286605,"byte_end":286608,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286610,"byte_end":286631,"line_start":403,"line_end":403,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286633,"byte_end":286636,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286638,"byte_end":286708,"line_start":405,"line_end":405,"column_start":2,"column_end":72}},{"value":"/ implements `Deref<Target = bool>`, and can be converted to `&bool` with","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286710,"byte_end":286785,"line_start":406,"line_end":406,"column_start":2,"column_end":77}},{"value":"/ `&*`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286787,"byte_end":286796,"line_start":407,"line_end":407,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286798,"byte_end":286801,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286803,"byte_end":286815,"line_start":409,"line_end":409,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286817,"byte_end":286820,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286822,"byte_end":286897,"line_start":411,"line_end":411,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer, and you must ensure the following","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286899,"byte_end":286973,"line_start":412,"line_end":412,"column_start":2,"column_end":76}},{"value":"/ conditions are met:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286975,"byte_end":286998,"line_start":413,"line_end":413,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287000,"byte_end":287003,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287005,"byte_end":287080,"line_start":415,"line_end":415,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287082,"byte_end":287101,"line_start":416,"line_end":416,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287103,"byte_end":287165,"line_start":417,"line_end":417,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287167,"byte_end":287243,"line_start":418,"line_end":418,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287245,"byte_end":287319,"line_start":419,"line_end":419,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287321,"byte_end":287324,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287326,"byte_end":287340,"line_start":421,"line_end":421,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287342,"byte_end":287345,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287347,"byte_end":287358,"line_start":423,"line_end":423,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287360,"byte_end":287387,"line_start":424,"line_end":424,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287389,"byte_end":287392,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287394,"byte_end":287413,"line_start":426,"line_end":426,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287415,"byte_end":287467,"line_start":427,"line_end":427,"column_start":2,"column_end":54}},{"value":"/ let val = unsafe { ptr.as_ref() }.unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287469,"byte_end":287516,"line_start":428,"line_end":428,"column_start":2,"column_end":49}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287518,"byte_end":287536,"line_start":429,"line_end":429,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287538,"byte_end":287545,"line_start":430,"line_end":430,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287547,"byte_end":287556,"line_start":431,"line_end":431,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289284,"byte_end":289290,"line_start":481,"line_end":481,"column_start":16,"column_end":22},"name":"offset","qualname":"<BitPtr<M, O, T>>::offset","value":"pub unsafe fn offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287673,"byte_end":287714,"line_start":436,"line_end":436,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287716,"byte_end":287719,"line_start":437,"line_end":437,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287721,"byte_end":287753,"line_start":438,"line_end":438,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287755,"byte_end":287758,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287760,"byte_end":287774,"line_start":440,"line_end":440,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287776,"byte_end":287779,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287781,"byte_end":287872,"line_start":442,"line_end":442,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287874,"byte_end":287877,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287879,"byte_end":287891,"line_start":444,"line_end":444,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287893,"byte_end":287896,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287898,"byte_end":287974,"line_start":446,"line_end":446,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287976,"byte_end":287989,"line_start":447,"line_end":447,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287991,"byte_end":287994,"line_start":448,"line_end":448,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and resulting pointer must be either in bounds or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287996,"byte_end":288069,"line_start":449,"line_end":449,"column_start":2,"column_end":75}},{"value":"/   one byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288071,"byte_end":288147,"line_start":450,"line_end":450,"column_start":2,"column_end":78}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288149,"byte_end":288222,"line_start":451,"line_end":451,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288224,"byte_end":288237,"line_start":452,"line_end":452,"column_start":2,"column_end":15}},{"value":"/ - The computed offset, **in bytes**, cannot overflow an `isize`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288239,"byte_end":288307,"line_start":453,"line_end":453,"column_start":2,"column_end":70}},{"value":"/ - The offset being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288309,"byte_end":288382,"line_start":454,"line_end":454,"column_start":2,"column_end":71}},{"value":"/   address space. That is, the infinite-precision sum, **in bytes** must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288384,"byte_end":288459,"line_start":455,"line_end":455,"column_start":2,"column_end":77}},{"value":"/   fit in a `usize`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288461,"byte_end":288484,"line_start":456,"line_end":456,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288486,"byte_end":288489,"line_start":457,"line_end":457,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288491,"byte_end":288562,"line_start":458,"line_end":458,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288564,"byte_end":288640,"line_start":459,"line_end":459,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288642,"byte_end":288710,"line_start":460,"line_end":460,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288712,"byte_end":288768,"line_start":461,"line_end":461,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288770,"byte_end":288773,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ Use [`wrapping_offset`] if you expect to risk hitting the high edge of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288775,"byte_end":288849,"line_start":463,"line_end":463,"column_start":2,"column_end":76}},{"value":"/ the address space.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288851,"byte_end":288873,"line_start":464,"line_end":464,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288875,"byte_end":288878,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288880,"byte_end":288894,"line_start":466,"line_end":466,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288896,"byte_end":288899,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288901,"byte_end":288912,"line_start":468,"line_end":468,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288914,"byte_end":288941,"line_start":469,"line_end":469,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288943,"byte_end":288946,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ let data = 5u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288948,"byte_end":288967,"line_start":471,"line_end":471,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288969,"byte_end":289021,"line_start":472,"line_end":472,"column_start":2,"column_end":54}},{"value":"/ assert!(unsafe { ptr.read() });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289023,"byte_end":289058,"line_start":473,"line_end":473,"column_start":2,"column_end":37}},{"value":"/ assert!(!unsafe { ptr.offset(1).read() });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289060,"byte_end":289106,"line_start":474,"line_end":474,"column_start":2,"column_end":48}},{"value":"/ assert!(unsafe { ptr.offset(2).read() });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289108,"byte_end":289153,"line_start":475,"line_end":475,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289155,"byte_end":289162,"line_start":476,"line_end":476,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289164,"byte_end":289167,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289169,"byte_end":289209,"line_start":478,"line_end":478,"column_start":2,"column_end":42}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289211,"byte_end":289257,"line_start":479,"line_end":479,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289259,"byte_end":289268,"line_start":480,"line_end":480,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291343,"byte_end":291358,"line_start":537,"line_end":537,"column_start":9,"column_end":24},"name":"wrapping_offset","qualname":"<BitPtr<M, O, T>>::wrapping_offset","value":"pub fn wrapping_offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289414,"byte_end":289481,"line_start":486,"line_end":486,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289483,"byte_end":289486,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289488,"byte_end":289520,"line_start":488,"line_end":488,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289522,"byte_end":289525,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289527,"byte_end":289541,"line_start":490,"line_end":490,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289543,"byte_end":289546,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_offset`](https://doc.rust/lang.org/std/primitive.pointer.html#method.wrapping_offset)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289548,"byte_end":289657,"line_start":492,"line_end":492,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289659,"byte_end":289662,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289664,"byte_end":289676,"line_start":494,"line_end":494,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289678,"byte_end":289681,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ The resulting pointer does not need to be in bounds, but it is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289683,"byte_end":289749,"line_start":496,"line_end":496,"column_start":2,"column_end":68}},{"value":"/ potentially hazardous to dereference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289751,"byte_end":289792,"line_start":497,"line_end":497,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289794,"byte_end":289797,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ In particular, the resulting pointer remains attached to the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289799,"byte_end":289868,"line_start":499,"line_end":499,"column_start":2,"column_end":71}},{"value":"/ allocated object that `self` points to. It may *not* be used to access a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289870,"byte_end":289946,"line_start":500,"line_end":500,"column_start":2,"column_end":78}},{"value":"/ different allocated object. Note that in Rust, every (stack-allocated)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289948,"byte_end":290022,"line_start":501,"line_end":501,"column_start":2,"column_end":76}},{"value":"/ variable is considered a separate allocated object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290024,"byte_end":290079,"line_start":502,"line_end":502,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290081,"byte_end":290084,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290086,"byte_end":290155,"line_start":504,"line_end":504,"column_start":2,"column_end":71}},{"value":"/ usize)` is not the same as `y`, and dereferencing it is undefined","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290157,"byte_end":290226,"line_start":505,"line_end":505,"column_start":2,"column_end":71}},{"value":"/ behavior unless `x` and `y` point into the same allocated object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290228,"byte_end":290297,"line_start":506,"line_end":506,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290299,"byte_end":290302,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ Compared to [`offset`], this method basically delays the requirement of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290304,"byte_end":290379,"line_start":508,"line_end":508,"column_start":2,"column_end":77}},{"value":"/ staying within the same allocated object: [`offset`] is immediate","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290381,"byte_end":290450,"line_start":509,"line_end":509,"column_start":2,"column_end":71}},{"value":"/ Undefined Behavior when crossing object boundaries; `wrapping_offset`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290452,"byte_end":290525,"line_start":510,"line_end":510,"column_start":2,"column_end":75}},{"value":"/ produces a pointer but still leads to Undefined Behavior if that pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290527,"byte_end":290603,"line_start":511,"line_end":511,"column_start":2,"column_end":78}},{"value":"/ is dereferenced. [`offset`] can be optimized better and is thus","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290605,"byte_end":290672,"line_start":512,"line_end":512,"column_start":2,"column_end":69}},{"value":"/ preferable in performance-sensitive code.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290674,"byte_end":290719,"line_start":513,"line_end":513,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290721,"byte_end":290724,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ If you need to cross object boundaries, destructure this pointer into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290726,"byte_end":290799,"line_start":515,"line_end":515,"column_start":2,"column_end":75}},{"value":"/ its base address and bit index, cast the base address to an integer, and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290801,"byte_end":290877,"line_start":516,"line_end":516,"column_start":2,"column_end":78}},{"value":"/ do the arithmetic in the purely integer space.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290879,"byte_end":290929,"line_start":517,"line_end":517,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290931,"byte_end":290934,"line_start":518,"line_end":518,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290936,"byte_end":290950,"line_start":519,"line_end":519,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290952,"byte_end":290955,"line_start":520,"line_end":520,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290957,"byte_end":290968,"line_start":521,"line_end":521,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290970,"byte_end":290997,"line_start":522,"line_end":522,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290999,"byte_end":291002,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291004,"byte_end":291023,"line_start":524,"line_end":524,"column_start":2,"column_end":21}},{"value":"/ let mut ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291025,"byte_end":291081,"line_start":525,"line_end":525,"column_start":2,"column_end":58}},{"value":"/ let end = ptr.wrapping_offset(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291083,"byte_end":291120,"line_start":526,"line_end":526,"column_start":2,"column_end":39}},{"value":"/ while ptr < end {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291122,"byte_end":291143,"line_start":527,"line_end":527,"column_start":2,"column_end":23}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291145,"byte_end":291178,"line_start":528,"line_end":528,"column_start":2,"column_end":35}},{"value":"/   println!(\"{}\", unsafe { ptr.read() });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291180,"byte_end":291224,"line_start":529,"line_end":529,"column_start":2,"column_end":46}},{"value":"/   # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291226,"byte_end":291235,"line_start":530,"line_end":530,"column_start":2,"column_end":11}},{"value":"/   ptr = ptr.wrapping_offset(3);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291237,"byte_end":291272,"line_start":531,"line_end":531,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291274,"byte_end":291279,"line_start":532,"line_end":532,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291281,"byte_end":291288,"line_start":533,"line_end":533,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291290,"byte_end":291293,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291295,"byte_end":291323,"line_start":535,"line_end":535,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291325,"byte_end":291334,"line_start":536,"line_end":536,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293949,"byte_end":293960,"line_start":618,"line_end":618,"column_start":16,"column_end":27},"name":"offset_from","qualname":"<BitPtr<M, O, T>>::offset_from","value":"pub unsafe fn offset_from(Self, Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the distance between two pointers. The returned value is in\n units of bits.","sig":null,"attributes":[{"value":"/ Calculates the distance between two pointers. The returned value is in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291491,"byte_end":291565,"line_start":542,"line_end":542,"column_start":2,"column_end":76}},{"value":"/ units of bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291567,"byte_end":291585,"line_start":543,"line_end":543,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291587,"byte_end":291590,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ This function is the inverse of [`offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291592,"byte_end":291639,"line_start":545,"line_end":545,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291641,"byte_end":291644,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291646,"byte_end":291660,"line_start":547,"line_end":547,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291662,"byte_end":291665,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset_from)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291667,"byte_end":291763,"line_start":549,"line_end":549,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291765,"byte_end":291768,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291770,"byte_end":291782,"line_start":551,"line_end":551,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291784,"byte_end":291787,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291789,"byte_end":291865,"line_start":553,"line_end":553,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291867,"byte_end":291880,"line_start":554,"line_end":554,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291882,"byte_end":291885,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and other pointer must be either in bounds or one","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291887,"byte_end":291960,"line_start":556,"line_end":556,"column_start":2,"column_end":75}},{"value":"/   byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291962,"byte_end":292034,"line_start":557,"line_end":557,"column_start":2,"column_end":74}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292036,"byte_end":292109,"line_start":558,"line_end":558,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292111,"byte_end":292124,"line_start":559,"line_end":559,"column_start":2,"column_end":15}},{"value":"/ - Both pointers must be *derived from* a pointer to the same object.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292126,"byte_end":292198,"line_start":560,"line_end":560,"column_start":2,"column_end":74}},{"value":"/ - The distance between the pointers, **in bytes**, cannot overflow an","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292200,"byte_end":292273,"line_start":561,"line_end":561,"column_start":2,"column_end":75}},{"value":"/   `isize`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292275,"byte_end":292289,"line_start":562,"line_end":562,"column_start":2,"column_end":16}},{"value":"/ - The distance being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292291,"byte_end":292366,"line_start":563,"line_end":563,"column_start":2,"column_end":73}},{"value":"/   address space.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292368,"byte_end":292388,"line_start":564,"line_end":564,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292390,"byte_end":292393,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292395,"byte_end":292466,"line_start":566,"line_end":566,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292468,"byte_end":292544,"line_start":567,"line_end":567,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292546,"byte_end":292614,"line_start":568,"line_end":568,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292616,"byte_end":292672,"line_start":569,"line_end":569,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292674,"byte_end":292677,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292679,"byte_end":292693,"line_start":571,"line_end":571,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292695,"byte_end":292698,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292700,"byte_end":292716,"line_start":573,"line_end":573,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292718,"byte_end":292721,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292723,"byte_end":292734,"line_start":575,"line_end":575,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292736,"byte_end":292763,"line_start":576,"line_end":576,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292765,"byte_end":292768,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292770,"byte_end":292790,"line_start":578,"line_end":578,"column_start":2,"column_end":22}},{"value":"/ let base = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292792,"byte_end":292845,"line_start":579,"line_end":579,"column_start":2,"column_end":55}},{"value":"/ let low = unsafe { base.add(5) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292847,"byte_end":292884,"line_start":580,"line_end":580,"column_start":2,"column_end":39}},{"value":"/ let high = unsafe { low.add(6) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292886,"byte_end":292923,"line_start":581,"line_end":581,"column_start":2,"column_end":39}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292925,"byte_end":292937,"line_start":582,"line_end":582,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(high.offset_from(low), 6);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292939,"byte_end":292982,"line_start":583,"line_end":583,"column_start":2,"column_end":45}},{"value":"/   assert_eq!(low.offset_from(high), -6);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292984,"byte_end":293028,"line_start":584,"line_end":584,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(low.offset(6), high);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293030,"byte_end":293068,"line_start":585,"line_end":585,"column_start":2,"column_end":40}},{"value":"/   assert_eq!(high.offset(-6), low);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293070,"byte_end":293109,"line_start":586,"line_end":586,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293111,"byte_end":293116,"line_start":587,"line_end":587,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293118,"byte_end":293125,"line_start":588,"line_end":588,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293127,"byte_end":293130,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ *Incorrect* usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293132,"byte_end":293154,"line_start":590,"line_end":590,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293156,"byte_end":293159,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293161,"byte_end":293179,"line_start":592,"line_end":592,"column_start":2,"column_end":20}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293181,"byte_end":293208,"line_start":593,"line_end":593,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293210,"byte_end":293213,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ let a = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293215,"byte_end":293231,"line_start":595,"line_end":595,"column_start":2,"column_end":18}},{"value":"/ let b = !0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293233,"byte_end":293250,"line_start":596,"line_end":596,"column_start":2,"column_end":19}},{"value":"/ let a_ptr = BitPtr::<_, Lsb0, _>::from_ref(&a);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293252,"byte_end":293303,"line_start":597,"line_end":597,"column_start":2,"column_end":53}},{"value":"/ let b_ptr = BitPtr::<_, Lsb0, _>::from_ref(&b);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293305,"byte_end":293356,"line_start":598,"line_end":598,"column_start":2,"column_end":53}},{"value":"/ let diff = (b_ptr.pointer() as isize)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293358,"byte_end":293399,"line_start":599,"line_end":599,"column_start":2,"column_end":43}},{"value":"/   .wrapping_sub(a_ptr.pointer() as isize)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293401,"byte_end":293446,"line_start":600,"line_end":600,"column_start":2,"column_end":47}},{"value":"/   // Remember: raw pointers are byte-addressed,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293448,"byte_end":293499,"line_start":601,"line_end":601,"column_start":2,"column_end":53}},{"value":"/   // but these are bit-addressed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293501,"byte_end":293538,"line_start":602,"line_end":602,"column_start":2,"column_end":39}},{"value":"/   .wrapping_mul(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293540,"byte_end":293563,"line_start":603,"line_end":603,"column_start":2,"column_end":25}},{"value":"/ // Create a pointer to `b`, derived from `a`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293565,"byte_end":293614,"line_start":604,"line_end":604,"column_start":2,"column_end":51}},{"value":"/ let b_ptr_2 = a_ptr.wrapping_offset(diff);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293616,"byte_end":293662,"line_start":605,"line_end":605,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293664,"byte_end":293667,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ // The pointers are *arithmetically* equal now","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293669,"byte_end":293719,"line_start":607,"line_end":607,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(b_ptr, b_ptr_2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293721,"byte_end":293752,"line_start":608,"line_end":608,"column_start":2,"column_end":33}},{"value":"/ // Undefined Behavior!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293754,"byte_end":293780,"line_start":609,"line_end":609,"column_start":2,"column_end":28}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293782,"byte_end":293794,"line_start":610,"line_end":610,"column_start":2,"column_end":14}},{"value":"/   b_ptr_2.offset_from(b_ptr);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293796,"byte_end":293829,"line_start":611,"line_end":611,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293831,"byte_end":293836,"line_start":612,"line_end":612,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293838,"byte_end":293845,"line_start":613,"line_end":613,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293847,"byte_end":293850,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293852,"byte_end":293892,"line_start":615,"line_end":615,"column_start":2,"column_end":42}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293894,"byte_end":293922,"line_start":616,"line_end":616,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293924,"byte_end":293933,"line_start":617,"line_end":617,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295027,"byte_end":295030,"line_start":650,"line_end":650,"column_start":16,"column_end":19},"name":"add","qualname":"<BitPtr<M, O, T>>::add","value":"pub unsafe fn add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset(count as\n isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset(count as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294638,"byte_end":294713,"line_start":634,"line_end":634,"column_start":2,"column_end":77}},{"value":"/ isize)`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294715,"byte_end":294728,"line_start":635,"line_end":635,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294730,"byte_end":294733,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294735,"byte_end":294767,"line_start":637,"line_end":637,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294769,"byte_end":294772,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294774,"byte_end":294788,"line_start":639,"line_end":639,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294790,"byte_end":294793,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ [`pointer::add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.add)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294795,"byte_end":294880,"line_start":641,"line_end":641,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294882,"byte_end":294885,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294887,"byte_end":294899,"line_start":643,"line_end":643,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294901,"byte_end":294904,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294906,"byte_end":294925,"line_start":645,"line_end":645,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294927,"byte_end":294930,"line_start":646,"line_end":646,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294932,"byte_end":294960,"line_start":647,"line_end":647,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294962,"byte_end":294979,"line_start":648,"line_end":648,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294981,"byte_end":295011,"line_start":649,"line_end":649,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295462,"byte_end":295465,"line_start":669,"line_end":669,"column_start":16,"column_end":19},"name":"sub","qualname":"<BitPtr<M, O, T>>::sub","value":"pub unsafe fn sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset((count as\n isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset((count as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295096,"byte_end":295172,"line_start":654,"line_end":654,"column_start":2,"column_end":78}},{"value":"/ isize).wrapping_neg())`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295174,"byte_end":295203,"line_start":655,"line_end":655,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295205,"byte_end":295208,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295210,"byte_end":295242,"line_start":657,"line_end":657,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295244,"byte_end":295247,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295249,"byte_end":295263,"line_start":659,"line_end":659,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295265,"byte_end":295268,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ [`pointer::sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.sub)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295270,"byte_end":295355,"line_start":661,"line_end":661,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295357,"byte_end":295360,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295362,"byte_end":295374,"line_start":663,"line_end":663,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295376,"byte_end":295379,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295381,"byte_end":295400,"line_start":665,"line_end":665,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295402,"byte_end":295405,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295407,"byte_end":295435,"line_start":667,"line_end":667,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295437,"byte_end":295446,"line_start":668,"line_end":668,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295971,"byte_end":295983,"line_start":687,"line_end":687,"column_start":9,"column_end":21},"name":"wrapping_add","qualname":"<BitPtr<M, O, T>>::wrapping_add","value":"pub fn wrapping_add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset(count as isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295548,"byte_end":295614,"line_start":673,"line_end":673,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset(count as isize)`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295616,"byte_end":295673,"line_start":674,"line_end":674,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295675,"byte_end":295678,"line_start":675,"line_end":675,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295680,"byte_end":295694,"line_start":676,"line_end":676,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295696,"byte_end":295699,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295701,"byte_end":295804,"line_start":678,"line_end":678,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295806,"byte_end":295809,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295811,"byte_end":295823,"line_start":680,"line_end":680,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295825,"byte_end":295828,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295830,"byte_end":295858,"line_start":682,"line_end":682,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295860,"byte_end":295863,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295865,"byte_end":295911,"line_start":684,"line_end":684,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295913,"byte_end":295930,"line_start":685,"line_end":685,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295932,"byte_end":295962,"line_start":686,"line_end":686,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296490,"byte_end":296502,"line_start":705,"line_end":705,"column_start":9,"column_end":21},"name":"wrapping_sub","qualname":"<BitPtr<M, O, T>>::wrapping_sub","value":"pub fn wrapping_sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296058,"byte_end":296124,"line_start":691,"line_end":691,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296126,"byte_end":296200,"line_start":692,"line_end":692,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296202,"byte_end":296205,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296207,"byte_end":296221,"line_start":694,"line_end":694,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296223,"byte_end":296226,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296228,"byte_end":296331,"line_start":696,"line_end":696,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296333,"byte_end":296336,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296338,"byte_end":296350,"line_start":698,"line_end":698,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296352,"byte_end":296355,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296357,"byte_end":296385,"line_start":700,"line_end":700,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296387,"byte_end":296390,"line_start":701,"line_end":701,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296392,"byte_end":296438,"line_start":702,"line_end":702,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296440,"byte_end":296449,"line_start":703,"line_end":703,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296451,"byte_end":296481,"line_start":704,"line_end":704,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296890,"byte_end":296894,"line_start":721,"line_end":721,"column_start":16,"column_end":20},"name":"read","qualname":"<BitPtr<M, O, T>>::read","value":"pub unsafe fn read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self`.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296594,"byte_end":296625,"line_start":709,"line_end":709,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296627,"byte_end":296630,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296632,"byte_end":296646,"line_start":711,"line_end":711,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296648,"byte_end":296651,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296653,"byte_end":296740,"line_start":713,"line_end":713,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296742,"byte_end":296745,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296747,"byte_end":296759,"line_start":715,"line_end":715,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296761,"byte_end":296764,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296766,"byte_end":296821,"line_start":717,"line_end":717,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296823,"byte_end":296826,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read`]: crate::ptr::read","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296828,"byte_end":296863,"line_start":719,"line_end":719,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296865,"byte_end":296874,"line_start":720,"line_end":720,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297525,"byte_end":297538,"line_start":743,"line_end":743,"column_start":16,"column_end":29},"name":"read_volatile","qualname":"<BitPtr<M, O, T>>::read_volatile","value":"pub unsafe fn read_volatile(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `self`.","sig":null,"attributes":[{"value":"/ Performs a volatile read of the bit from `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296988,"byte_end":297040,"line_start":727,"line_end":727,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297042,"byte_end":297045,"line_start":728,"line_end":728,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297047,"byte_end":297113,"line_start":729,"line_end":729,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297115,"byte_end":297189,"line_start":730,"line_end":730,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297191,"byte_end":297215,"line_start":731,"line_end":731,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297217,"byte_end":297220,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297222,"byte_end":297236,"line_start":733,"line_end":733,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297238,"byte_end":297241,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297243,"byte_end":297348,"line_start":735,"line_end":735,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297350,"byte_end":297353,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297355,"byte_end":297367,"line_start":737,"line_end":737,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297369,"byte_end":297372,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297374,"byte_end":297438,"line_start":739,"line_end":739,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297440,"byte_end":297443,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read_volatile`]: crate::ptr::read_volatile","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297445,"byte_end":297498,"line_start":741,"line_end":741,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297500,"byte_end":297509,"line_start":742,"line_end":742,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298054,"byte_end":298061,"line_start":762,"line_end":762,"column_start":16,"column_end":23},"name":"copy_to","qualname":"<BitPtr<M, O, T>>::copy_to","value":"pub unsafe fn copy_to<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297623,"byte_end":297696,"line_start":747,"line_end":747,"column_start":2,"column_end":75}},{"value":"/ may overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297698,"byte_end":297714,"line_start":748,"line_end":748,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297716,"byte_end":297719,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as [`ptr::copy`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297721,"byte_end":297783,"line_start":750,"line_end":750,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297785,"byte_end":297788,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297790,"byte_end":297804,"line_start":752,"line_end":752,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297806,"byte_end":297809,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297811,"byte_end":297904,"line_start":754,"line_end":754,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297906,"byte_end":297909,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297911,"byte_end":297923,"line_start":756,"line_end":756,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297925,"byte_end":297928,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297930,"byte_end":297985,"line_start":758,"line_end":758,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297987,"byte_end":297990,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297992,"byte_end":298027,"line_start":760,"line_end":760,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298029,"byte_end":298038,"line_start":761,"line_end":761,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299333,"byte_end":299355,"line_start":809,"line_end":809,"column_start":16,"column_end":38},"name":"copy_to_nonoverlapping","qualname":"<BitPtr<M, O, T>>::copy_to_nonoverlapping","value":"pub unsafe fn copy_to_nonoverlapping<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298801,"byte_end":298874,"line_start":793,"line_end":793,"column_start":2,"column_end":75}},{"value":"/ may *not* overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298876,"byte_end":298898,"line_start":794,"line_end":794,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298900,"byte_end":298903,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298905,"byte_end":298952,"line_start":796,"line_end":796,"column_start":2,"column_end":49}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298954,"byte_end":298987,"line_start":797,"line_end":797,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298989,"byte_end":298992,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298994,"byte_end":299008,"line_start":799,"line_end":799,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299010,"byte_end":299013,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299015,"byte_end":299138,"line_start":801,"line_end":801,"column_start":2,"column_end":125}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299140,"byte_end":299143,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299145,"byte_end":299157,"line_start":803,"line_end":803,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299159,"byte_end":299162,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299164,"byte_end":299234,"line_start":805,"line_end":805,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299236,"byte_end":299239,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`](crate::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299241,"byte_end":299306,"line_start":807,"line_end":807,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299308,"byte_end":299317,"line_start":808,"line_end":808,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301554,"byte_end":301566,"line_start":874,"line_end":874,"column_start":9,"column_end":21},"name":"align_offset","qualname":"<BitPtr<M, O, T>>::align_offset","value":"pub fn align_offset(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the offset (in bits) that needs to be applied to the pointer in\n order to make it aligned to `align`.","sig":null,"attributes":[{"value":"/ Computes the offset (in bits) that needs to be applied to the pointer in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299560,"byte_end":299636,"line_start":822,"line_end":822,"column_start":2,"column_end":78}},{"value":"/ order to make it aligned to `align`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299638,"byte_end":299678,"line_start":823,"line_end":823,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299680,"byte_end":299683,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ “Alignment” here means that the pointer is selecting the start bit of a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299685,"byte_end":299764,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/ memory location whose address satisfies the requested alignment.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299766,"byte_end":299834,"line_start":826,"line_end":826,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299836,"byte_end":299839,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ `align` is measured in **bytes**. If you wish to align your bit-pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299841,"byte_end":299916,"line_start":828,"line_end":828,"column_start":2,"column_end":77}},{"value":"/ to a specific fraction (½, ¼, or ⅛ of one byte), please file an issue","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299918,"byte_end":299995,"line_start":829,"line_end":829,"column_start":2,"column_end":75}},{"value":"/ and this functionality will be added to [`BitIdx`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299997,"byte_end":300052,"line_start":830,"line_end":830,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300054,"byte_end":300057,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300059,"byte_end":300073,"line_start":832,"line_end":832,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300075,"byte_end":300078,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ [`pointer::align_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300080,"byte_end":300183,"line_start":834,"line_end":834,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300185,"byte_end":300188,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ If the base-element address of the pointer is already aligned to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300190,"byte_end":300258,"line_start":836,"line_end":836,"column_start":2,"column_end":70}},{"value":"/ `align`, then this will return the bit-offset required to select the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300260,"byte_end":300332,"line_start":837,"line_end":837,"column_start":2,"column_end":74}},{"value":"/ first bit of the successor element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300334,"byte_end":300373,"line_start":838,"line_end":838,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300375,"byte_end":300378,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ If it is not possible to align the pointer, the implementation returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300380,"byte_end":300454,"line_start":840,"line_end":840,"column_start":2,"column_end":76}},{"value":"/ `usize::MAX`. It is permissible for the implementation to *always*","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300456,"byte_end":300526,"line_start":841,"line_end":841,"column_start":2,"column_end":72}},{"value":"/ return `usize::MAX`. Only your algorithm’s performance can depend on","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300528,"byte_end":300602,"line_start":842,"line_end":842,"column_start":2,"column_end":74}},{"value":"/ getting a usable offset here, not its correctness.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300604,"byte_end":300658,"line_start":843,"line_end":843,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300660,"byte_end":300663,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ The offset is expressed in number of bits, and not `T` elements or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300665,"byte_end":300735,"line_start":845,"line_end":845,"column_start":2,"column_end":72}},{"value":"/ bytes. The value returned can be used with the [`wrapping_add`] method.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300737,"byte_end":300812,"line_start":846,"line_end":846,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300814,"byte_end":300817,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300819,"byte_end":300831,"line_start":848,"line_end":848,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300833,"byte_end":300836,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ There are no guarantees whatsoëver that offsetting the pointer will not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300838,"byte_end":300914,"line_start":850,"line_end":850,"column_start":2,"column_end":77}},{"value":"/ overflow or go beyond the allocation that the pointer points into. It is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300916,"byte_end":300992,"line_start":851,"line_end":851,"column_start":2,"column_end":78}},{"value":"/ up to the caller to ensure that the returned offset is correct in all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300994,"byte_end":301067,"line_start":852,"line_end":852,"column_start":2,"column_end":75}},{"value":"/ terms other than alignment.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301069,"byte_end":301100,"line_start":853,"line_end":853,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301102,"byte_end":301105,"line_start":854,"line_end":854,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301107,"byte_end":301119,"line_start":855,"line_end":855,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301121,"byte_end":301124,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ The function panics if `align` is not a power-of-two.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301126,"byte_end":301183,"line_start":857,"line_end":857,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301185,"byte_end":301188,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301190,"byte_end":301204,"line_start":859,"line_end":859,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301206,"byte_end":301209,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301211,"byte_end":301222,"line_start":861,"line_end":861,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301224,"byte_end":301251,"line_start":862,"line_end":862,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301253,"byte_end":301256,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301258,"byte_end":301282,"line_start":864,"line_end":864,"column_start":2,"column_end":26}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data[0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301284,"byte_end":301339,"line_start":865,"line_end":865,"column_start":2,"column_end":57}},{"value":"/ let ptr = unsafe { ptr.add(2) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301341,"byte_end":301377,"line_start":866,"line_end":866,"column_start":2,"column_end":38}},{"value":"/ let count = ptr.align_offset(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301379,"byte_end":301415,"line_start":867,"line_end":867,"column_start":2,"column_end":38}},{"value":"/ assert!(count > 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301417,"byte_end":301440,"line_start":868,"line_end":868,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301442,"byte_end":301449,"line_start":869,"line_end":869,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301451,"byte_end":301454,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301456,"byte_end":301492,"line_start":871,"line_end":871,"column_start":2,"column_end":38}},{"value":"/ [`wrapping_add`]: Self::wrapping_add","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301494,"byte_end":301534,"line_start":872,"line_end":872,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301536,"byte_end":301545,"line_start":873,"line_end":873,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302203,"byte_end":302211,"line_start":903,"line_end":903,"column_start":9,"column_end":17},"name":"from_ref","qualname":"<BitPtr<Const, O, T>>::from_ref","value":"pub fn from_ref(&T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301964,"byte_end":302016,"line_start":893,"line_end":893,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302018,"byte_end":302021,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302023,"byte_end":302039,"line_start":895,"line_end":895,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302041,"byte_end":302044,"line_start":896,"line_end":896,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A borrowed memory element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302046,"byte_end":302086,"line_start":897,"line_end":897,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302088,"byte_end":302091,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302093,"byte_end":302106,"line_start":899,"line_end":899,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302108,"byte_end":302111,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302113,"byte_end":302183,"line_start":901,"line_end":901,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302185,"byte_end":302194,"line_start":902,"line_end":902,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302598,"byte_end":302606,"line_start":919,"line_end":919,"column_start":9,"column_end":17},"name":"from_ptr","qualname":"<BitPtr<Const, O, T>>::from_ptr","value":"pub fn from_ptr(*const T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302276,"byte_end":302338,"line_start":907,"line_end":907,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302340,"byte_end":302343,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302345,"byte_end":302361,"line_start":909,"line_end":909,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302363,"byte_end":302366,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A read-only element address.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302368,"byte_end":302410,"line_start":911,"line_end":911,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302412,"byte_end":302415,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302417,"byte_end":302430,"line_start":913,"line_end":913,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302432,"byte_end":302435,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location, if","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302437,"byte_end":302510,"line_start":915,"line_end":915,"column_start":2,"column_end":75}},{"value":"/ `elem` is well-formed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302512,"byte_end":302538,"line_start":916,"line_end":916,"column_start":2,"column_end":28}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302540,"byte_end":302557,"line_start":917,"line_end":917,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302559,"byte_end":302589,"line_start":918,"line_end":918,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303546,"byte_end":303556,"line_start":947,"line_end":947,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitPtr<Const, O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302687,"byte_end":302736,"line_start":923,"line_end":923,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302738,"byte_end":302741,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_ref`] in that the returned pointer keeps its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302743,"byte_end":302816,"line_start":925,"line_end":925,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302818,"byte_end":302890,"line_start":926,"line_end":926,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_ref(&slice[0])` narrows its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302892,"byte_end":302962,"line_start":927,"line_end":927,"column_start":2,"column_end":72}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302964,"byte_end":303039,"line_start":928,"line_end":928,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303041,"byte_end":303101,"line_start":929,"line_end":929,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303103,"byte_end":303106,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303108,"byte_end":303124,"line_start":931,"line_end":931,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303126,"byte_end":303129,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An immutabily borrowed slice of memory.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303131,"byte_end":303185,"line_start":933,"line_end":933,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303187,"byte_end":303190,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303192,"byte_end":303205,"line_start":935,"line_end":935,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303207,"byte_end":303210,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the base location of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303212,"byte_end":303285,"line_start":937,"line_end":937,"column_start":2,"column_end":75}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303287,"byte_end":303297,"line_start":938,"line_end":938,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303299,"byte_end":303302,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303304,"byte_end":303379,"line_start":940,"line_end":940,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303381,"byte_end":303451,"line_start":941,"line_end":941,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303453,"byte_end":303463,"line_start":942,"line_end":942,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303465,"byte_end":303468,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303470,"byte_end":303492,"line_start":944,"line_end":944,"column_start":2,"column_end":24}},{"value":"/ [`from_ref`]: Self::from_ref","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303494,"byte_end":303526,"line_start":945,"line_end":945,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303528,"byte_end":303537,"line_start":946,"line_end":946,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303785,"byte_end":303792,"line_start":955,"line_end":955,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Const, O, T>>::pointer","value":"pub fn pointer(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303651,"byte_end":303723,"line_start":951,"line_end":951,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303725,"byte_end":303733,"line_start":952,"line_end":952,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303735,"byte_end":303744,"line_start":953,"line_end":953,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303746,"byte_end":303776,"line_start":954,"line_end":954,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304615,"byte_end":304623,"line_start":986,"line_end":986,"column_start":9,"column_end":17},"name":"from_mut","qualname":"<BitPtr<Mut, O, T>>::from_mut","value":"pub fn from_mut(&mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303915,"byte_end":303967,"line_start":965,"line_end":965,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303969,"byte_end":303972,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303974,"byte_end":303990,"line_start":967,"line_end":967,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303992,"byte_end":303995,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A mutably borrowed memory element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303997,"byte_end":304045,"line_start":969,"line_end":969,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304047,"byte_end":304050,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304052,"byte_end":304065,"line_start":971,"line_end":971,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304067,"byte_end":304070,"line_start":972,"line_end":972,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304072,"byte_end":304146,"line_start":973,"line_end":973,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304148,"byte_end":304151,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ Note that even if `elem` is an address within a contiguous array or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304153,"byte_end":304224,"line_start":975,"line_end":975,"column_start":2,"column_end":73}},{"value":"/ slice, the returned bit-pointer only has provenance for the `elem`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304226,"byte_end":304296,"line_start":976,"line_end":976,"column_start":2,"column_end":72}},{"value":"/ location, and no other.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304298,"byte_end":304325,"line_start":977,"line_end":977,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304327,"byte_end":304330,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304332,"byte_end":304344,"line_start":979,"line_end":979,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304346,"byte_end":304349,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ The exclusive borrow of `elem` is released after this function returns.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304351,"byte_end":304426,"line_start":981,"line_end":981,"column_start":2,"column_end":77}},{"value":"/ However, you must not use any other pointer than that returned by this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304428,"byte_end":304502,"line_start":982,"line_end":982,"column_start":2,"column_end":76}},{"value":"/ function to view or modify `*elem`, unless the `T` type supports aliased","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304504,"byte_end":304580,"line_start":983,"line_end":983,"column_start":2,"column_end":78}},{"value":"/ mutation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304582,"byte_end":304595,"line_start":984,"line_end":984,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304597,"byte_end":304606,"line_start":985,"line_end":985,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305022,"byte_end":305034,"line_start":1002,"line_end":1002,"column_start":9,"column_end":21},"name":"from_mut_ptr","qualname":"<BitPtr<Mut, O, T>>::from_mut_ptr","value":"pub fn from_mut_ptr(*mut T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304692,"byte_end":304754,"line_start":990,"line_end":990,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304756,"byte_end":304759,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304761,"byte_end":304777,"line_start":992,"line_end":992,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304779,"byte_end":304782,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A write-capable element address.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304784,"byte_end":304830,"line_start":994,"line_end":994,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304832,"byte_end":304835,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304837,"byte_end":304850,"line_start":996,"line_end":996,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304852,"byte_end":304855,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304857,"byte_end":304931,"line_start":998,"line_end":998,"column_start":2,"column_end":76}},{"value":"/ if `elem` is well-formed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304933,"byte_end":304962,"line_start":999,"line_end":999,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304964,"byte_end":304981,"line_start":1000,"line_end":1000,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304983,"byte_end":305013,"line_start":1001,"line_end":1001,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305977,"byte_end":305991,"line_start":1030,"line_end":1030,"column_start":9,"column_end":23},"name":"from_mut_slice","qualname":"<BitPtr<Mut, O, T>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305113,"byte_end":305162,"line_start":1006,"line_end":1006,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305164,"byte_end":305167,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_mut`] in that the returned pointer keeps its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305169,"byte_end":305242,"line_start":1008,"line_end":1008,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305244,"byte_end":305316,"line_start":1009,"line_end":1009,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_mut(&mut slice[0])` narrows its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305318,"byte_end":305392,"line_start":1010,"line_end":1010,"column_start":2,"column_end":76}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305394,"byte_end":305469,"line_start":1011,"line_end":1011,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305471,"byte_end":305531,"line_start":1012,"line_end":1012,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305533,"byte_end":305536,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305538,"byte_end":305554,"line_start":1014,"line_end":1014,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305556,"byte_end":305559,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A mutabily borrowed slice of memory.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305561,"byte_end":305612,"line_start":1016,"line_end":1016,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305614,"byte_end":305617,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305619,"byte_end":305632,"line_start":1018,"line_end":1018,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305634,"byte_end":305637,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the base location of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305639,"byte_end":305712,"line_start":1020,"line_end":1020,"column_start":2,"column_end":75}},{"value":"/ the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305714,"byte_end":305728,"line_start":1021,"line_end":1021,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305730,"byte_end":305733,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305735,"byte_end":305810,"line_start":1023,"line_end":1023,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305812,"byte_end":305882,"line_start":1024,"line_end":1024,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305884,"byte_end":305894,"line_start":1025,"line_end":1025,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305896,"byte_end":305899,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305901,"byte_end":305923,"line_start":1027,"line_end":1027,"column_start":2,"column_end":24}},{"value":"/ [`from_mut`]: Self::from_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305925,"byte_end":305957,"line_start":1028,"line_end":1028,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305959,"byte_end":305968,"line_start":1029,"line_end":1029,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306228,"byte_end":306235,"line_start":1038,"line_end":1038,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Mut, O, T>>::pointer","value":"pub fn pointer(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306094,"byte_end":306166,"line_start":1034,"line_end":1034,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306168,"byte_end":306176,"line_start":1035,"line_end":1035,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306178,"byte_end":306187,"line_start":1036,"line_end":1036,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306189,"byte_end":306219,"line_start":1037,"line_end":1037,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307950,"byte_end":307956,"line_start":1091,"line_end":1091,"column_start":16,"column_end":22},"name":"as_mut","qualname":"<BitPtr<Mut, O, T>>::as_mut","value":"pub unsafe fn as_mut<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy mutable reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy mutable reference to the referent bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306328,"byte_end":306387,"line_start":1044,"line_end":1044,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306389,"byte_end":306392,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306394,"byte_end":306463,"line_start":1046,"line_end":1046,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306465,"byte_end":306484,"line_start":1047,"line_end":1047,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306486,"byte_end":306489,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306491,"byte_end":306505,"line_start":1049,"line_end":1049,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306507,"byte_end":306510,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306512,"byte_end":306603,"line_start":1051,"line_end":1051,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306605,"byte_end":306608,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306610,"byte_end":306631,"line_start":1053,"line_end":1053,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306633,"byte_end":306636,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306638,"byte_end":306708,"line_start":1055,"line_end":1055,"column_start":2,"column_end":72}},{"value":"/ implements `DerefMut<Target = bool>`, and can be converted to `&mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306710,"byte_end":306781,"line_start":1056,"line_end":1056,"column_start":2,"column_end":73}},{"value":"/ bool` with `&mut *`. Writes to the proxy are not reflected in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306783,"byte_end":306852,"line_start":1057,"line_end":1057,"column_start":2,"column_end":71}},{"value":"/ proxied location until the proxy is destroyed, either through `Drop` or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306854,"byte_end":306929,"line_start":1058,"line_end":1058,"column_start":2,"column_end":77}},{"value":"/ with its [`set`] method.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306931,"byte_end":306959,"line_start":1059,"line_end":1059,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306961,"byte_end":306964,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ The proxy must be bound as `mut` in order to write through the binding.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306966,"byte_end":307041,"line_start":1061,"line_end":1061,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307043,"byte_end":307046,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307048,"byte_end":307060,"line_start":1063,"line_end":1063,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307062,"byte_end":307065,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307067,"byte_end":307142,"line_start":1065,"line_end":1065,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307144,"byte_end":307217,"line_start":1066,"line_end":1066,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307219,"byte_end":307242,"line_start":1067,"line_end":1067,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307244,"byte_end":307247,"line_start":1068,"line_end":1068,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307249,"byte_end":307324,"line_start":1069,"line_end":1069,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307326,"byte_end":307345,"line_start":1070,"line_end":1070,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307347,"byte_end":307409,"line_start":1071,"line_end":1071,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307411,"byte_end":307487,"line_start":1072,"line_end":1072,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307489,"byte_end":307563,"line_start":1073,"line_end":1073,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307565,"byte_end":307568,"line_start":1074,"line_end":1074,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307570,"byte_end":307584,"line_start":1075,"line_end":1075,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307586,"byte_end":307589,"line_start":1076,"line_end":1076,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307591,"byte_end":307602,"line_start":1077,"line_end":1077,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307604,"byte_end":307631,"line_start":1078,"line_end":1078,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307633,"byte_end":307636,"line_start":1079,"line_end":1079,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307638,"byte_end":307661,"line_start":1080,"line_end":1080,"column_start":2,"column_end":25}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307663,"byte_end":307719,"line_start":1081,"line_end":1081,"column_start":2,"column_end":58}},{"value":"/ let mut val = unsafe { ptr.as_mut() }.unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307721,"byte_end":307772,"line_start":1082,"line_end":1082,"column_start":2,"column_end":53}},{"value":"/ assert!(!*val);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307774,"byte_end":307793,"line_start":1083,"line_end":1083,"column_start":2,"column_end":21}},{"value":"/ *val = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307795,"byte_end":307811,"line_start":1084,"line_end":1084,"column_start":2,"column_end":18}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307813,"byte_end":307831,"line_start":1085,"line_end":1085,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307833,"byte_end":307840,"line_start":1086,"line_end":1086,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307842,"byte_end":307845,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ [`set`]: crate::ptr::BitRef::set","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307847,"byte_end":307883,"line_start":1088,"line_end":1088,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307885,"byte_end":307902,"line_start":1089,"line_end":1089,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307904,"byte_end":307934,"line_start":1090,"line_end":1090,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308519,"byte_end":308528,"line_start":1111,"line_end":1111,"column_start":16,"column_end":25},"name":"copy_from","qualname":"<BitPtr<Mut, O, T>>::copy_from","value":"pub unsafe fn copy_from<O2, T2>(Self, BitPtr<Const, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308041,"byte_end":308117,"line_start":1095,"line_end":1095,"column_start":2,"column_end":78}},{"value":"/ overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308119,"byte_end":308131,"line_start":1096,"line_end":1096,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308133,"byte_end":308136,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order of [`ptr::copy`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308138,"byte_end":308204,"line_start":1098,"line_end":1098,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308206,"byte_end":308209,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308211,"byte_end":308225,"line_start":1100,"line_end":1100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308227,"byte_end":308230,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308232,"byte_end":308329,"line_start":1102,"line_end":1102,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308331,"byte_end":308334,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308336,"byte_end":308348,"line_start":1104,"line_end":1104,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308350,"byte_end":308353,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308355,"byte_end":308410,"line_start":1106,"line_end":1106,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308412,"byte_end":308415,"line_start":1107,"line_end":1107,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308417,"byte_end":308452,"line_start":1108,"line_end":1108,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308454,"byte_end":308471,"line_start":1109,"line_end":1109,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308473,"byte_end":308503,"line_start":1110,"line_end":1110,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309248,"byte_end":309272,"line_start":1139,"line_end":1139,"column_start":16,"column_end":40},"name":"copy_from_nonoverlapping","qualname":"<BitPtr<Mut, O, T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping<O2,\n                                       T2>(Self, BitPtr<Const, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308669,"byte_end":308745,"line_start":1122,"line_end":1122,"column_start":2,"column_end":78}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308747,"byte_end":308765,"line_start":1123,"line_end":1123,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308767,"byte_end":308770,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *opposite* argument order of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308772,"byte_end":308823,"line_start":1125,"line_end":1125,"column_start":2,"column_end":53}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308825,"byte_end":308858,"line_start":1126,"line_end":1126,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308860,"byte_end":308863,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308865,"byte_end":308879,"line_start":1128,"line_end":1128,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308881,"byte_end":308884,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from_nonoverlapping)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308886,"byte_end":309013,"line_start":1130,"line_end":1130,"column_start":2,"column_end":129}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309015,"byte_end":309018,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309020,"byte_end":309032,"line_start":1132,"line_end":1132,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309034,"byte_end":309037,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309039,"byte_end":309109,"line_start":1134,"line_end":1134,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309111,"byte_end":309114,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309116,"byte_end":309181,"line_start":1136,"line_end":1136,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309183,"byte_end":309200,"line_start":1137,"line_end":1137,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309202,"byte_end":309232,"line_start":1138,"line_end":1138,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309777,"byte_end":309782,"line_start":1161,"line_end":1161,"column_start":16,"column_end":21},"name":"write","qualname":"<BitPtr<Mut, O, T>>::write","value":"pub unsafe fn write(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Overwrites a memory location with the given bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309428,"byte_end":309480,"line_start":1150,"line_end":1150,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309482,"byte_end":309485,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309487,"byte_end":309543,"line_start":1152,"line_end":1152,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309545,"byte_end":309548,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309550,"byte_end":309564,"line_start":1154,"line_end":1154,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309566,"byte_end":309569,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309571,"byte_end":309660,"line_start":1156,"line_end":1156,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309662,"byte_end":309665,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write`]: crate::ptr::write","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309667,"byte_end":309704,"line_start":1158,"line_end":1158,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309706,"byte_end":309715,"line_start":1159,"line_end":1159,"column_start":2,"column_end":11}},{"value":"allow(clippy :: clippy :: missing_safety_doc)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309717,"byte_end":309761,"line_start":1160,"line_end":1160,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310733,"byte_end":310747,"line_start":1187,"line_end":1187,"column_start":16,"column_end":30},"name":"write_volatile","qualname":"<BitPtr<Mut, O, T>>::write_volatile","value":"pub unsafe fn write_volatile(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Performs a volatile write of a memory location with the given bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309832,"byte_end":309902,"line_start":1165,"line_end":1165,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309904,"byte_end":309907,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ Because processors do not have single-bit write instructions, this must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309909,"byte_end":309984,"line_start":1167,"line_end":1167,"column_start":2,"column_end":77}},{"value":"/ perform a volatile read of the location, perform the bit modification","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309986,"byte_end":310059,"line_start":1168,"line_end":1168,"column_start":2,"column_end":75}},{"value":"/ within the processor register, and then perform a volatile write back to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310061,"byte_end":310137,"line_start":1169,"line_end":1169,"column_start":2,"column_end":78}},{"value":"/ memory. These three steps are guaranteed to be sequential, but are not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310139,"byte_end":310213,"line_start":1170,"line_end":1170,"column_start":2,"column_end":76}},{"value":"/ guaranteed to be atomic.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310215,"byte_end":310243,"line_start":1171,"line_end":1171,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310245,"byte_end":310248,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310250,"byte_end":310316,"line_start":1173,"line_end":1173,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310318,"byte_end":310392,"line_start":1174,"line_end":1174,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310394,"byte_end":310418,"line_start":1175,"line_end":1175,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310420,"byte_end":310423,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310425,"byte_end":310439,"line_start":1177,"line_end":1177,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310441,"byte_end":310444,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310446,"byte_end":310553,"line_start":1179,"line_end":1179,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310555,"byte_end":310558,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310560,"byte_end":310572,"line_start":1181,"line_end":1181,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310574,"byte_end":310577,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310579,"byte_end":310644,"line_start":1183,"line_end":1183,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310646,"byte_end":310649,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_volatile`]: crate::ptr::write_volatile","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310651,"byte_end":310706,"line_start":1185,"line_end":1185,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310708,"byte_end":310717,"line_start":1186,"line_end":1186,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311348,"byte_end":311355,"line_start":1212,"line_end":1212,"column_start":16,"column_end":23},"name":"replace","qualname":"<BitPtr<Mut, O, T>>::replace","value":"pub unsafe fn replace(Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Replaces the bit at `*self` with `src`, returning the old bit.","sig":null,"attributes":[{"value":"/ Replaces the bit at `*self` with `src`, returning the old bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311002,"byte_end":311068,"line_start":1200,"line_end":1200,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311070,"byte_end":311073,"line_start":1201,"line_end":1201,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311075,"byte_end":311089,"line_start":1202,"line_end":1202,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311091,"byte_end":311094,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ [`pointer::replace`](https://doc.rust-lang.org/std/primitive.pointer.html#method.replace)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311096,"byte_end":311189,"line_start":1204,"line_end":1204,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311191,"byte_end":311194,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311196,"byte_end":311208,"line_start":1206,"line_end":1206,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311210,"byte_end":311213,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::replace`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311215,"byte_end":311273,"line_start":1208,"line_end":1208,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311275,"byte_end":311278,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ [`ptr::replace`]: crate::ptr::replace","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311280,"byte_end":311321,"line_start":1210,"line_end":1210,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311323,"byte_end":311332,"line_start":1211,"line_end":1211,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311753,"byte_end":311757,"line_start":1228,"line_end":1228,"column_start":16,"column_end":20},"name":"swap","qualname":"<BitPtr<Mut, O, T>>::swap","value":"pub unsafe fn swap<O2, T2>(Self, BitPtr<Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two mutable locations. They may overlap.","sig":null,"attributes":[{"value":"/ Swaps the bits at two mutable locations. They may overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311426,"byte_end":311488,"line_start":1216,"line_end":1216,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311490,"byte_end":311493,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311495,"byte_end":311509,"line_start":1218,"line_end":1218,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311511,"byte_end":311514,"line_start":1219,"line_end":1219,"column_start":2,"column_end":5}},{"value":"/ [`pointer::swap`](https://doc.rust-lang.org/std/primitive.pointer.html#method.swap)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311516,"byte_end":311603,"line_start":1220,"line_end":1220,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311605,"byte_end":311608,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311610,"byte_end":311622,"line_start":1222,"line_end":1222,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311624,"byte_end":311627,"line_start":1223,"line_end":1223,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::swap`] for safety concerns and examples.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311629,"byte_end":311684,"line_start":1224,"line_end":1224,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311686,"byte_end":311689,"line_start":1225,"line_end":1225,"column_start":2,"column_end":5}},{"value":"/ [`ptr::swap`]: crate::ptr::swap","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311691,"byte_end":311726,"line_start":1226,"line_end":1226,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311728,"byte_end":311737,"line_start":1227,"line_end":1227,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3976},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316369,"byte_end":316373,"line_start":1461,"line_end":1461,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::single::BitPtrError::Null","value":"BitPtrError::Null(NullPtrError)","parent":{"krate":0,"index":3974},"children":[],"decl_id":null,"docs":" The null address was provided.\n","sig":null,"attributes":[{"value":"/ The null address was provided.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316333,"byte_end":316367,"line_start":1460,"line_end":1460,"column_start":2,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3979},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316444,"byte_end":316454,"line_start":1463,"line_end":1463,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::single::BitPtrError::Misaligned","value":"BitPtrError::Misaligned(MisalignError<T>)","parent":{"krate":0,"index":3974},"children":[],"decl_id":null,"docs":" The address was misaligned for the element type.\n","sig":null,"attributes":[{"value":"/ The address was misaligned for the element type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316390,"byte_end":316442,"line_start":1462,"line_end":1462,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3982},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316528,"byte_end":316536,"line_start":1465,"line_end":1465,"column_start":2,"column_end":10},"name":"BadIndex","qualname":"::ptr::single::BitPtrError::BadIndex","value":"BitPtrError::BadIndex(BitIdxError<T::Mem>)","parent":{"krate":0,"index":3974},"children":[],"decl_id":null,"docs":" The bit index was invalid for the element type.\n","sig":null,"attributes":[{"value":"/ The bit index was invalid for the element type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316475,"byte_end":316526,"line_start":1464,"line_end":1464,"column_start":2,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3974},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316297,"byte_end":316308,"line_start":1457,"line_end":1457,"column_start":10,"column_end":21},"name":"BitPtrError","qualname":"::ptr::single::BitPtrError","value":"pub enum BitPtrError<T> where T: BitStore {\n    Null(NullPtrError),\n    Misaligned(MisalignError<T>),\n    BadIndex(BitIdxError<T::Mem>),\n}","parent":null,"children":[{"krate":0,"index":3976},{"krate":0,"index":3979},{"krate":0,"index":3982}],"decl_id":null,"docs":" Errors produced by invalid bit-pointer components.\n","sig":null,"attributes":[{"value":"/ Errors produced by invalid bit-pointer components.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316165,"byte_end":316219,"line_start":1455,"line_end":1455,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4016},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350684,"byte_end":350697,"line_start":1079,"line_end":1079,"column_start":2,"column_end":15},"name":"InvalidBitptr","qualname":"::ptr::span::BitSpanError::InvalidBitptr","value":"BitSpanError::InvalidBitptr(BitPtrError<T>)","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The base `BitPtr` is invalid.\n","sig":null,"attributes":[{"value":"/ The base `BitPtr` is invalid.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350649,"byte_end":350682,"line_start":1078,"line_end":1078,"column_start":2,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4019},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350762,"byte_end":350769,"line_start":1081,"line_end":1081,"column_start":2,"column_end":9},"name":"TooLong","qualname":"::ptr::span::BitSpanError::TooLong","value":"BitSpanError::TooLong(usize)","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" `BitSpan` domains have a length ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have a length ceiling.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350716,"byte_end":350760,"line_start":1080,"line_end":1080,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4022},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350827,"byte_end":350834,"line_start":1083,"line_end":1083,"column_start":2,"column_end":9},"name":"TooHigh","qualname":"::ptr::span::BitSpanError::TooHigh","value":"BitSpanError::TooHigh(*const T)","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" `BitSpan` domains have an address ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have an address ceiling.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350779,"byte_end":350825,"line_start":1082,"line_end":1082,"column_start":2,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":4014},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350612,"byte_end":350624,"line_start":1075,"line_end":1075,"column_start":10,"column_end":22},"name":"BitSpanError","qualname":"::ptr::span::BitSpanError","value":"pub enum BitSpanError<T> where T: BitStore {\n    InvalidBitptr(BitPtrError<T>),\n    TooLong(usize),\n    TooHigh(*const T),\n}","parent":null,"children":[{"krate":0,"index":4016},{"krate":0,"index":4019},{"krate":0,"index":4022}],"decl_id":null,"docs":" An error produced when creating `BitSpan` encoded references.\n","sig":null,"attributes":[{"value":"/ An error produced when creating `BitSpan` encoded references.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350482,"byte_end":350547,"line_start":1073,"line_end":1073,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2074},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234211,"byte_end":234215,"line_start":194,"line_end":194,"column_start":15,"column_end":19},"name":"copy","qualname":"::ptr::copy","value":"pub unsafe fn copy<O1, O2, T1,\n                   T2>(BitPtr<Const, O1, T1>, BitPtr<Mut, O2, T2>, usize)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination may","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232094,"byte_end":232169,"line_start":122,"line_end":122,"column_start":1,"column_end":76}},{"value":"/ overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232170,"byte_end":232182,"line_start":123,"line_end":123,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232183,"byte_end":232186,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ If the source and destination will *never* overlap, [`copy_nonoverlapping`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232187,"byte_end":232266,"line_start":125,"line_end":125,"column_start":1,"column_end":80}},{"value":"/ can be used instead.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232267,"byte_end":232291,"line_start":126,"line_end":126,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232292,"byte_end":232295,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ `copy` is semantically equivalent to C’s [`memmove`], but with the argument","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232296,"byte_end":232377,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ order swapped. Copying takes place as if the bits were copied from `src` to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232378,"byte_end":232457,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ a temporary array, then copied from the array into `dst`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232458,"byte_end":232519,"line_start":130,"line_end":130,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232520,"byte_end":232523,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232524,"byte_end":232538,"line_start":132,"line_end":132,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232539,"byte_end":232542,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy`](core::ptr::copy)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232543,"byte_end":232577,"line_start":134,"line_end":134,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232578,"byte_end":232581,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232582,"byte_end":232603,"line_start":136,"line_end":136,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232604,"byte_end":232607,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element types. `bitvec`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232608,"byte_end":232686,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ considers it Undefined Behavior for two pointer regions to overlap in memory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232687,"byte_end":232767,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ if they have different bit-orderings, and so will only perform overlap","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232768,"byte_end":232842,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ detection when `O1` and `O2` match.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232843,"byte_end":232882,"line_start":141,"line_end":141,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232883,"byte_end":232886,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232887,"byte_end":232899,"line_start":143,"line_end":143,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232900,"byte_end":232903,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232904,"byte_end":232978,"line_start":145,"line_end":145,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232979,"byte_end":232982,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232983,"byte_end":233037,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233038,"byte_end":233093,"line_start":148,"line_end":148,"column_start":1,"column_end":56}},{"value":"/ - `src` and `dst` must not overlap if they have different bit-ordering","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233094,"byte_end":233168,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/   parameters.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233169,"byte_end":233186,"line_start":150,"line_end":150,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233187,"byte_end":233190,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ The type parameters `T1` and `T2` are permitted to differ.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233191,"byte_end":233253,"line_start":152,"line_end":152,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233254,"byte_end":233257,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233258,"byte_end":233272,"line_start":154,"line_end":154,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233273,"byte_end":233276,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233277,"byte_end":233293,"line_start":156,"line_end":156,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233294,"byte_end":233297,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233298,"byte_end":233309,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233310,"byte_end":233337,"line_start":159,"line_end":159,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233338,"byte_end":233341,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ let start = 0b1011u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233342,"byte_end":233367,"line_start":161,"line_end":161,"column_start":1,"column_end":26}},{"value":"/ let mut end = 0u16;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233368,"byte_end":233391,"line_start":162,"line_end":162,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233392,"byte_end":233395,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233396,"byte_end":233408,"line_start":164,"line_end":164,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy::<Lsb0, Msb0, _, _>(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233409,"byte_end":233453,"line_start":165,"line_end":165,"column_start":1,"column_end":45}},{"value":"/     (&start).into(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233454,"byte_end":233478,"line_start":166,"line_end":166,"column_start":1,"column_end":25}},{"value":"/     (&mut end).into(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233479,"byte_end":233505,"line_start":167,"line_end":167,"column_start":1,"column_end":27}},{"value":"/     4,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233506,"byte_end":233516,"line_start":168,"line_end":168,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233517,"byte_end":233525,"line_start":169,"line_end":169,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233526,"byte_end":233531,"line_start":170,"line_end":170,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(end, 0b1101_0000__0000_0000);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233532,"byte_end":233576,"line_start":171,"line_end":171,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233577,"byte_end":233584,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233585,"byte_end":233588,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Overlapping regions:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233589,"byte_end":233613,"line_start":174,"line_end":174,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233614,"byte_end":233617,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233618,"byte_end":233629,"line_start":176,"line_end":176,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233630,"byte_end":233657,"line_start":177,"line_end":177,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233658,"byte_end":233661,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ let mut x = 0b1111_0010u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233662,"byte_end":233692,"line_start":179,"line_end":179,"column_start":1,"column_end":31}},{"value":"/ let src = BitPtr::<_, Lsb0, _>::from_mut(&mut x);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233693,"byte_end":233746,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/ let dst = unsafe { src.add(2) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233747,"byte_end":233783,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233784,"byte_end":233787,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233788,"byte_end":233800,"line_start":183,"line_end":183,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy(src.immut(), dst, 4);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233801,"byte_end":233846,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233847,"byte_end":233852,"line_start":185,"line_end":185,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(x, 0b1100_1010);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233853,"byte_end":233884,"line_start":186,"line_end":186,"column_start":1,"column_end":32}},{"value":"/ //                ^^ ^^ bottom nibble moved here","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233885,"byte_end":233937,"line_start":187,"line_end":187,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233938,"byte_end":233945,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233946,"byte_end":233949,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":233950,"byte_end":234014,"line_start":190,"line_end":190,"column_start":1,"column_end":65}},{"value":"/ [`copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234015,"byte_end":234075,"line_start":191,"line_end":191,"column_start":1,"column_end":61}},{"value":"/ [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234076,"byte_end":234144,"line_start":192,"line_end":192,"column_start":1,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234180,"byte_end":234194,"line_start":193,"line_end":193,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235816,"byte_end":235835,"line_start":255,"line_end":255,"column_start":15,"column_end":34},"name":"copy_nonoverlapping","qualname":"::ptr::copy_nonoverlapping","value":"pub unsafe fn copy_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Const, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination must\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234403,"byte_end":234479,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234480,"byte_end":234498,"line_start":208,"line_end":208,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234499,"byte_end":234502,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ For regions of memory which might overlap, use [`copy`] instead.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234503,"byte_end":234571,"line_start":210,"line_end":210,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234572,"byte_end":234575,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ `copy_nonoverlapping` is semantically equivalent to C’s [`memcpy`], but with","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234576,"byte_end":234658,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/ the argument order swapped.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234659,"byte_end":234690,"line_start":213,"line_end":213,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234691,"byte_end":234694,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234695,"byte_end":234709,"line_start":215,"line_end":215,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234710,"byte_end":234713,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy_nonoverlapping`](core::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234714,"byte_end":234778,"line_start":217,"line_end":217,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234779,"byte_end":234782,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234783,"byte_end":234804,"line_start":219,"line_end":219,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234805,"byte_end":234808,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element parameters.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234809,"byte_end":234883,"line_start":221,"line_end":221,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234884,"byte_end":234887,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234888,"byte_end":234900,"line_start":223,"line_end":223,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234901,"byte_end":234904,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234905,"byte_end":234979,"line_start":225,"line_end":225,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234980,"byte_end":234983,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":234984,"byte_end":235038,"line_start":227,"line_end":227,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235039,"byte_end":235094,"line_start":228,"line_end":228,"column_start":1,"column_end":56}},{"value":"/ - The region of memory beginning at `src` with a size of `count` bits must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235095,"byte_end":235173,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"/   not overlap with the region of memory beginning at `dst` with the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235174,"byte_end":235250,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/   size.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235251,"byte_end":235262,"line_start":231,"line_end":231,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235263,"byte_end":235266,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235267,"byte_end":235281,"line_start":233,"line_end":233,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235282,"byte_end":235285,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235286,"byte_end":235297,"line_start":235,"line_end":235,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235298,"byte_end":235325,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235326,"byte_end":235329,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ let mut data = 0b1011u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235330,"byte_end":235358,"line_start":238,"line_end":238,"column_start":1,"column_end":29}},{"value":"/ let ptr = BitPtr::<_, Msb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235359,"byte_end":235415,"line_start":239,"line_end":239,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235416,"byte_end":235419,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235420,"byte_end":235432,"line_start":241,"line_end":241,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy_nonoverlapping(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235433,"byte_end":235472,"line_start":242,"line_end":242,"column_start":1,"column_end":40}},{"value":"/     ptr.add(4).immut(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235473,"byte_end":235500,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/     ptr,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235501,"byte_end":235513,"line_start":244,"line_end":244,"column_start":1,"column_end":13}},{"value":"/     4,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235514,"byte_end":235524,"line_start":245,"line_end":245,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235525,"byte_end":235533,"line_start":246,"line_end":246,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235534,"byte_end":235539,"line_start":247,"line_end":247,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(data, 0b1011_1011);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235540,"byte_end":235574,"line_start":248,"line_end":248,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235575,"byte_end":235582,"line_start":249,"line_end":249,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235583,"byte_end":235586,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235587,"byte_end":235651,"line_start":251,"line_end":251,"column_start":1,"column_end":65}},{"value":"/ [`copy`]: crate::ptr::copy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235652,"byte_end":235682,"line_start":252,"line_end":252,"column_start":1,"column_end":31}},{"value":"/ [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235683,"byte_end":235749,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":235785,"byte_end":235799,"line_start":254,"line_end":254,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236910,"byte_end":236912,"line_start":301,"line_end":301,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"pub fn eq<O, T1, T2>(BitPtr<Const, O, T1>, BitPtr<Const, O, T2>) -> bool where\nO: BitOrder, T1: BitStore, T2: BitStore,\nBitPtr<Const, O, T1>: PartialEq<BitPtr<Const, O, T2>>","parent":null,"children":[],"decl_id":null,"docs":" Compares raw bit-pointers for equality.","sig":null,"attributes":[{"value":"* Compares raw bit-pointers for equality.\n\nThis is the same as using the `==` operator, but less generic: the arguments\nhave to be `BitPtr<Const, _, _>` bit-pointers, not anything that implements\n`PartialEq`.\n\n# Original\n\n[`ptr::eq`](core::ptr::eq)\n\n# API Differences\n\nThe two pointers can differ in their storage type parameters. `bitvec` defines\npointer equality only between pointers with the same underlying `BitStore::Mem`\nregister type.\n\nThis cannot compare span pointers. `*const BitSlice` can be used in the standard\nlibrary `ptr::eq` and does not need an override.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse core::cell::Cell;\n\nlet data = 0u8;\nlet bare_ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nlet cell_ptr = bare_ptr.cast::<Cell<u8>>();\n\nassert!(bitvec::ptr::eq(bare_ptr, cell_ptr));\n```\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236038,"byte_end":236850,"line_start":268,"line_end":299,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236886,"byte_end":236900,"line_start":300,"line_end":300,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2088},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237325,"byte_end":237329,"line_start":322,"line_end":322,"column_start":8,"column_end":12},"name":"hash","qualname":"::ptr::hash","value":"pub fn hash<O, T, S>(BitPtr<Const, O, T>, &mut S) where O: BitOrder,\nT: BitStore, S: Hasher","parent":null,"children":[],"decl_id":null,"docs":" Hash a raw bit-pointer.","sig":null,"attributes":[{"value":"* Hash a raw bit-pointer.\n\nThis can be used to prove hashing the pointer address value, rather than the\nreferent bit.\n\n# Original\n\n[`ptr::hash`](core::ptr::hash)\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237101,"byte_end":237268,"line_start":311,"line_end":319,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237269,"byte_end":237286,"line_start":320,"line_end":320,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237287,"byte_end":237317,"line_start":321,"line_end":321,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2092},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238004,"byte_end":238008,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"pub unsafe fn read<O, T>(BitPtr<Const, O, T>) -> bool where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `src`.","sig":null,"attributes":[{"value":"* Reads the bit from `src`.\n\n# Original\n\n[`ptr::read`](core::ptr::read)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `src` must be [valid] for reads.\n- `src` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 128u8;\nlet ptr = BitPtr::<_, Msb0, _>::from_ref(&data);\nassert!(unsafe {\n  bitvec::ptr::read(ptr)\n});\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237453,"byte_end":237937,"line_start":331,"line_end":357,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237973,"byte_end":237987,"line_start":358,"line_end":358,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2095},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239909,"byte_end":239922,"line_start":420,"line_end":420,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"pub unsafe fn read_volatile<O, T>(BitPtr<Const, O, T>) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `src`.","sig":null,"attributes":[{"value":"* Performs a volatile read of the bit from `src`.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not\nbe elided or reördered by the compiler across other volatile operations.\n\n# Original\n\n[`ptr::read_volatile`](core::ptr::read_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model, so\nthe precise semantics of what “volatile” means here is subject to change over\ntime. That being said, the semantics will almost always end up pretty similar to\n[C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile memory\noperations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for reads\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver on\nquestions involving concurrent access from multiple threads. Volatile accesses\nbehave exactly like non-atomic accesses in that regard. In particular, a race\nbetween a `read_volatile` and any write operation on the same location is\nundefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary load that\nthe compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nunsafe {\n  assert!(bitvec::ptr::read_volatile(ptr.add(2)));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238100,"byte_end":239842,"line_start":367,"line_end":418,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239878,"byte_end":239892,"line_start":419,"line_end":419,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240926,"byte_end":240933,"line_start":462,"line_end":462,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"pub unsafe fn replace<O, T>(BitPtr<Mut, O, T>, bool) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the pointed `dst`, returning the previous `dst` bit.","sig":null,"attributes":[{"value":"* Moves `src` into the pointed `dst`, returning the previous `dst` bit.\n\nThis function is semantically equivalent to [`BitRef::replace`] except that it\noperates on raw pointers instead of references. When a proxy reference is\navailable, prefer [`BitRef::replace`].\n\n# Original\n\n[`ptr::replace`](core::ptr::replace)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for both reads and writes.\n- `dst` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nassert!(unsafe {\n  bitvec::ptr::replace(ptr.add(2), false)\n});\nassert_eq!(data, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitPtr::replace`]: crate::ptr::BitRef::replace\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240023,"byte_end":240859,"line_start":428,"line_end":460,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240895,"byte_end":240909,"line_start":461,"line_end":461,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241776,"byte_end":241799,"line_start":496,"line_end":496,"column_start":8,"column_end":31},"name":"bitslice_from_raw_parts","qualname":"::ptr::bitslice_from_raw_parts","value":"pub fn bitslice_from_raw_parts<O, T>(BitPtr<Const, O, T>, usize)\n-> *const BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a raw bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"* Forms a raw bit-slice from a bit-pointer and a length.\n\nThe `len` argument is the number of **bits**, not the number of elements.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts`] for bit-slice safety requirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_ref(&x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts(bitptr, 24);\nassert_eq!(unsafe { &*bitslice }[2], true);\n```\n\n[`slice::from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241040,"byte_end":241716,"line_start":470,"line_end":494,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241752,"byte_end":241766,"line_start":495,"line_end":495,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242921,"byte_end":242948,"line_start":537,"line_end":537,"column_start":8,"column_end":35},"name":"bitslice_from_raw_parts_mut","qualname":"::ptr::bitslice_from_raw_parts_mut","value":"pub fn bitslice_from_raw_parts_mut<O, T>(BitPtr<Mut, O, T>, usize)\n-> *mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.\n\nSee the documentation of [`bitslice_from_raw_parts`] for more details.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts_mut`] for bit-slice safety\nrequirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet mut x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts_mut(bitptr, 24);\nunsafe { &mut *bitslice }.set(0, true);\nassert!(unsafe { &*bitslice }[0]);\n```\n\n[`bitslice_from_raw_parts`]: crate::ptr::bitslice_from_raw_parts\n[`slice::from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241969,"byte_end":242861,"line_start":507,"line_end":535,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242897,"byte_end":242911,"line_start":536,"line_end":536,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":244036,"byte_end":244040,"line_start":585,"line_end":585,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"pub unsafe fn swap<O1, O2, T1, T2>(BitPtr<Mut, O1, T1>, BitPtr<Mut, O2, T2>)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations.","sig":null,"attributes":[{"value":"* Swaps the values at two mutable locations.\n\nBut for the following exception, this function is semantically equivalent to\n[`BitRef::swap`]: it operates on raw pointers instead of references. When\nreferences are available, prefer [`BitRef::swap`].\n\n# Original\n\n[`ptr::swap`](core::ptr::swap)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes.\n- Both `x` and `y` must point to initialized instances of type `T1` and `T2`,\n  respectively.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 2u8;\nlet x = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nlet y = unsafe { x.add(1) };\n\nunsafe {\n  bitvec::ptr::swap(x, y);\n}\nassert_eq!(data, 1);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitRef::swap`]: crate::ptr::BitRef::swap\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":243118,"byte_end":243969,"line_start":548,"line_end":583,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":244005,"byte_end":244019,"line_start":584,"line_end":584,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245283,"byte_end":245302,"line_start":637,"line_end":637,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"pub unsafe fn swap_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Mut, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.","sig":null,"attributes":[{"value":"* Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.\n\n# Original\n\n[`ptr::swap_nonoverlapping`](core::ptr::swap_nonoverlapping)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes of `count` bits.\n- Both `x` and `y` must be fully initialized instances of `T` for all `count`\n  bits.\n- The regions may have overlapping elements, but must not overlap the concrete\n  bits they describe.\n\nNote that even if `count` is `0`, the pointers must still be validly\nconstructed, non-null, and well-aligned.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut x = [0u8; 2];\nlet mut y = !0u16;\nlet x_ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet y_ptr = BitPtr::<_, Msb0, _>::from_mut(&mut y);\n\nunsafe {\n  bitvec::ptr::swap_nonoverlapping(x_ptr, y_ptr, 16);\n}\nassert_eq!(x, [!0; 2]);\nassert_eq!(y, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":244193,"byte_end":245216,"line_start":597,"line_end":635,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245252,"byte_end":245266,"line_start":636,"line_end":636,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246540,"byte_end":246545,"line_start":689,"line_end":689,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"pub unsafe fn write<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"* Overwrites a memory location with the given bit.\n\nBecause this reads from memory in order to construct the new value, it cannot be\nused to set uninitialized memory. The referent `T` element must be fully\ninitialized (such as with [`core::ptr::write`]) before setting bits with this\nfunction.\n\n# Original\n\n[`ptr::write`](core::ptr::write)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write(ptr.add(2), true);\n}\nassert_eq!(data, 4);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`core::ptr::write`]: core::ptr::write\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245527,"byte_end":246473,"line_start":652,"line_end":687,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246509,"byte_end":246523,"line_start":688,"line_end":688,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":248756,"byte_end":248770,"line_start":756,"line_end":756,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"pub unsafe fn write_volatile<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"* Performs a volatile write of a memory location with the given bit.\n\nBecause processors do not have single-bit write instructions, this must\nperform a volatile read of the location, perform the bit modification within\nthe processor register, then perform a volatile write back to memory. These\nthree steps are guaranteed to be atomic.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed\nnot to be elided or reördered by the compiler across other volatile\noperations.\n\n# Original\n\n[`ptr::write_volatile`](core::ptr::write_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model,\nso the precise semantics of what “volatile” means here is subject to change\nover time. That being said, the semantics will almost always end up pretty\nsimilar to [C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile\nmemory operations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver\non questions involving concurrent access from multiple threads. Volatile\naccesses behave exactly like non-atomic accesses in that regard. In\nparticular, a race between a `write_volatile` and any other operation\n(reading or writing) on the same location is undefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary store\nthat the compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write_volatile(ptr, true);\n  assert!(bitvec::ptr::read_volatile(ptr.immut()));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246647,"byte_end":248689,"line_start":697,"line_end":754,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":248725,"byte_end":248739,"line_start":755,"line_end":755,"column_start":36,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2141},{"krate":0,"index":2144},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2195},{"krate":0,"index":2198},{"krate":0,"index":2201},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2210},{"krate":0,"index":2213},{"krate":0,"index":2216},{"krate":0,"index":2219},{"krate":0,"index":2222},{"krate":0,"index":2225},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2274},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2283},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2295},{"krate":0,"index":2560},{"krate":0,"index":2869},{"krate":0,"index":2957},{"krate":0,"index":3020},{"krate":0,"index":3221},{"krate":0,"index":3227},{"krate":0,"index":3286},{"krate":0,"index":3295},{"krate":0,"index":3307},{"krate":0,"index":3318},{"krate":0,"index":3324},{"krate":0,"index":3329},{"krate":0,"index":3333}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n[`BitSlice`] is the primary working type of this crate. It is a wrapper type\nover `[T]` which enables you to view, manipulate, and take the address of\nindividual bits in memory. It behaves in every possible respect exactly like an\nordinary slice: it is dynamically-sized, and must be held by `&` or `&mut`\nreference, just like `[T]`, and implements every inherent method and trait that\n`[T]` does, to the absolute limits of what Rust permits.\n\nThe key to [`BitSlice`]’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe [`core`] and [`std`] distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[`core`]: core\n[`std`]: std\n[std]: https://doc.rust-lang.org/stable/std/slice\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":355672,"byte_end":357621,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440009,"byte_end":440012,"line_start":81,"line_end":81,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439689,"byte_end":439733,"line_start":66,"line_end":66,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439735,"byte_end":439738,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439740,"byte_end":439754,"line_start":68,"line_end":68,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439756,"byte_end":439759,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.len)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439761,"byte_end":439849,"line_start":70,"line_end":70,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439851,"byte_end":439854,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439856,"byte_end":439870,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439872,"byte_end":439875,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439877,"byte_end":439888,"line_start":74,"line_end":74,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439890,"byte_end":439917,"line_start":75,"line_end":75,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439919,"byte_end":439922,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439924,"byte_end":439951,"line_start":77,"line_end":77,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439953,"byte_end":439980,"line_start":78,"line_end":78,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439982,"byte_end":439989,"line_start":79,"line_end":79,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439991,"byte_end":440000,"line_start":80,"line_end":80,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440398,"byte_end":440406,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440062,"byte_end":440112,"line_start":85,"line_end":85,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440114,"byte_end":440117,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440119,"byte_end":440133,"line_start":87,"line_end":87,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440135,"byte_end":440138,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440140,"byte_end":440238,"line_start":89,"line_end":89,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440240,"byte_end":440243,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440245,"byte_end":440259,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440261,"byte_end":440264,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440266,"byte_end":440277,"line_start":93,"line_end":93,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440279,"byte_end":440306,"line_start":94,"line_end":94,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440308,"byte_end":440311,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440313,"byte_end":440340,"line_start":96,"line_end":96,"column_start":2,"column_end":29}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440342,"byte_end":440369,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440371,"byte_end":440378,"line_start":98,"line_end":98,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440380,"byte_end":440389,"line_start":99,"line_end":99,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440790,"byte_end":440795,"line_start":120,"line_end":120,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440460,"byte_end":440525,"line_start":104,"line_end":104,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440527,"byte_end":440530,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440532,"byte_end":440546,"line_start":106,"line_end":106,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440548,"byte_end":440551,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440553,"byte_end":440567,"line_start":108,"line_end":108,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440569,"byte_end":440572,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440574,"byte_end":440585,"line_start":110,"line_end":110,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440587,"byte_end":440614,"line_start":111,"line_end":111,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440616,"byte_end":440619,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440621,"byte_end":440648,"line_start":113,"line_end":113,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.first().as_deref());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440650,"byte_end":440700,"line_start":114,"line_end":114,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440702,"byte_end":440705,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440707,"byte_end":440727,"line_start":116,"line_end":116,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.first());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440729,"byte_end":440761,"line_start":117,"line_end":117,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440763,"byte_end":440770,"line_start":118,"line_end":118,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440772,"byte_end":440781,"line_start":119,"line_end":119,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441632,"byte_end":441641,"line_start":153,"line_end":153,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440855,"byte_end":440925,"line_start":124,"line_end":124,"column_start":2,"column_end":72}},{"value":"/ if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440927,"byte_end":440946,"line_start":125,"line_end":125,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440948,"byte_end":440951,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440953,"byte_end":440967,"line_start":127,"line_end":127,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440969,"byte_end":440972,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":440974,"byte_end":441074,"line_start":129,"line_end":129,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441076,"byte_end":441079,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441081,"byte_end":441102,"line_start":131,"line_end":131,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441104,"byte_end":441107,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441109,"byte_end":441180,"line_start":133,"line_end":133,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441182,"byte_end":441256,"line_start":134,"line_end":134,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441258,"byte_end":441331,"line_start":135,"line_end":135,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441333,"byte_end":441340,"line_start":136,"line_end":136,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441342,"byte_end":441345,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441347,"byte_end":441361,"line_start":138,"line_end":138,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441363,"byte_end":441366,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441368,"byte_end":441379,"line_start":140,"line_end":140,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441381,"byte_end":441408,"line_start":141,"line_end":141,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441410,"byte_end":441413,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441415,"byte_end":441446,"line_start":143,"line_end":143,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441448,"byte_end":441451,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut first) = x.first_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441453,"byte_end":441497,"line_start":145,"line_end":145,"column_start":2,"column_end":46}},{"value":"/   *first = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441499,"byte_end":441519,"line_start":146,"line_end":146,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441521,"byte_end":441526,"line_start":147,"line_end":147,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441528,"byte_end":441562,"line_start":148,"line_end":148,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441564,"byte_end":441571,"line_start":149,"line_end":149,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441573,"byte_end":441576,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441578,"byte_end":441612,"line_start":151,"line_end":151,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441614,"byte_end":441623,"line_start":152,"line_end":152,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442222,"byte_end":442233,"line_start":178,"line_end":178,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441707,"byte_end":441774,"line_start":157,"line_end":157,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441776,"byte_end":441802,"line_start":158,"line_end":158,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441804,"byte_end":441807,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441809,"byte_end":441823,"line_start":160,"line_end":160,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441825,"byte_end":441828,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441830,"byte_end":441927,"line_start":162,"line_end":162,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441929,"byte_end":441932,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441934,"byte_end":441948,"line_start":164,"line_end":164,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441950,"byte_end":441953,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441955,"byte_end":441966,"line_start":166,"line_end":166,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441968,"byte_end":441995,"line_start":167,"line_end":167,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":441997,"byte_end":442000,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ let x = bits![1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442002,"byte_end":442029,"line_start":169,"line_end":169,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442031,"byte_end":442034,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = x.split_first() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442036,"byte_end":442086,"line_start":171,"line_end":171,"column_start":2,"column_end":52}},{"value":"/   assert_eq!(first, &true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442088,"byte_end":442119,"line_start":172,"line_end":172,"column_start":2,"column_end":33}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442121,"byte_end":442157,"line_start":173,"line_end":173,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442159,"byte_end":442164,"line_start":174,"line_end":174,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442166,"byte_end":442193,"line_start":175,"line_end":175,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442195,"byte_end":442202,"line_start":176,"line_end":176,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442204,"byte_end":442213,"line_start":177,"line_end":177,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443631,"byte_end":443646,"line_start":226,"line_end":226,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442441,"byte_end":442508,"line_start":188,"line_end":188,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442510,"byte_end":442536,"line_start":189,"line_end":189,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442538,"byte_end":442541,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442543,"byte_end":442557,"line_start":191,"line_end":191,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442559,"byte_end":442562,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442564,"byte_end":442669,"line_start":193,"line_end":193,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442671,"byte_end":442674,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442676,"byte_end":442697,"line_start":195,"line_end":195,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442699,"byte_end":442702,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442704,"byte_end":442775,"line_start":197,"line_end":197,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442777,"byte_end":442851,"line_start":198,"line_end":198,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442853,"byte_end":442926,"line_start":199,"line_end":199,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442928,"byte_end":442935,"line_start":200,"line_end":200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442937,"byte_end":442940,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":442942,"byte_end":443014,"line_start":202,"line_end":202,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443016,"byte_end":443089,"line_start":203,"line_end":203,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443091,"byte_end":443125,"line_start":204,"line_end":204,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443127,"byte_end":443130,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443132,"byte_end":443146,"line_start":206,"line_end":206,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443148,"byte_end":443151,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443153,"byte_end":443164,"line_start":208,"line_end":208,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443166,"byte_end":443193,"line_start":209,"line_end":209,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443195,"byte_end":443198,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443200,"byte_end":443231,"line_start":211,"line_end":211,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443233,"byte_end":443236,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut first, rest)) = x.split_first_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443238,"byte_end":443296,"line_start":213,"line_end":213,"column_start":2,"column_end":60}},{"value":"/   *first = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443298,"byte_end":443318,"line_start":214,"line_end":214,"column_start":2,"column_end":22}},{"value":"/   rest.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443320,"byte_end":443344,"line_start":215,"line_end":215,"column_start":2,"column_end":26}},{"value":"/   rest.set(1, false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443346,"byte_end":443371,"line_start":216,"line_end":216,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443373,"byte_end":443378,"line_start":217,"line_end":217,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443380,"byte_end":443414,"line_start":218,"line_end":218,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443416,"byte_end":443423,"line_start":219,"line_end":219,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443425,"byte_end":443428,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443430,"byte_end":443464,"line_start":221,"line_end":221,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443578,"byte_end":443587,"line_start":224,"line_end":224,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443589,"byte_end":443622,"line_start":225,"line_end":225,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444414,"byte_end":444424,"line_start":259,"line_end":259,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443898,"byte_end":443964,"line_start":238,"line_end":238,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443966,"byte_end":443992,"line_start":239,"line_end":239,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443994,"byte_end":443997,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":443999,"byte_end":444013,"line_start":241,"line_end":241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444015,"byte_end":444018,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444020,"byte_end":444122,"line_start":243,"line_end":243,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444124,"byte_end":444127,"line_start":244,"line_end":244,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444129,"byte_end":444143,"line_start":245,"line_end":245,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444145,"byte_end":444148,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444150,"byte_end":444161,"line_start":247,"line_end":247,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444163,"byte_end":444190,"line_start":248,"line_end":248,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444192,"byte_end":444195,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444197,"byte_end":444224,"line_start":250,"line_end":250,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444226,"byte_end":444229,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ if let Some((last, rest)) = x.split_last() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444231,"byte_end":444279,"line_start":252,"line_end":252,"column_start":2,"column_end":50}},{"value":"/   assert_eq!(last, &true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444281,"byte_end":444311,"line_start":253,"line_end":253,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444313,"byte_end":444349,"line_start":254,"line_end":254,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444351,"byte_end":444356,"line_start":255,"line_end":255,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444358,"byte_end":444385,"line_start":256,"line_end":256,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444387,"byte_end":444394,"line_start":257,"line_end":257,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444396,"byte_end":444405,"line_start":258,"line_end":258,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445847,"byte_end":445861,"line_start":307,"line_end":307,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444652,"byte_end":444718,"line_start":269,"line_end":269,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444720,"byte_end":444746,"line_start":270,"line_end":270,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444748,"byte_end":444751,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444753,"byte_end":444767,"line_start":272,"line_end":272,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444769,"byte_end":444772,"line_start":273,"line_end":273,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444774,"byte_end":444884,"line_start":274,"line_end":274,"column_start":2,"column_end":112}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444886,"byte_end":444889,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444891,"byte_end":444912,"line_start":276,"line_end":276,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444914,"byte_end":444917,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444919,"byte_end":444990,"line_start":278,"line_end":278,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444992,"byte_end":445066,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445068,"byte_end":445141,"line_start":280,"line_end":280,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445143,"byte_end":445150,"line_start":281,"line_end":281,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445152,"byte_end":445155,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445157,"byte_end":445229,"line_start":283,"line_end":283,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445231,"byte_end":445304,"line_start":284,"line_end":284,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445306,"byte_end":445340,"line_start":285,"line_end":285,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445342,"byte_end":445345,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445347,"byte_end":445361,"line_start":287,"line_end":287,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445363,"byte_end":445366,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445368,"byte_end":445379,"line_start":289,"line_end":289,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445381,"byte_end":445408,"line_start":290,"line_end":290,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445410,"byte_end":445413,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445415,"byte_end":445446,"line_start":292,"line_end":292,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445448,"byte_end":445451,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = x.split_last_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445453,"byte_end":445509,"line_start":294,"line_end":294,"column_start":2,"column_end":58}},{"value":"/   *last = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445511,"byte_end":445530,"line_start":295,"line_end":295,"column_start":2,"column_end":21}},{"value":"/   rest.set(0, false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445532,"byte_end":445557,"line_start":296,"line_end":296,"column_start":2,"column_end":27}},{"value":"/   rest.set(1, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445559,"byte_end":445583,"line_start":297,"line_end":297,"column_start":2,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445585,"byte_end":445590,"line_start":298,"line_end":298,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445592,"byte_end":445626,"line_start":299,"line_end":299,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445628,"byte_end":445635,"line_start":300,"line_end":300,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445637,"byte_end":445640,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445642,"byte_end":445680,"line_start":302,"line_end":302,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445794,"byte_end":445803,"line_start":305,"line_end":305,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445805,"byte_end":445838,"line_start":306,"line_end":306,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446545,"byte_end":446549,"line_start":337,"line_end":337,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446121,"byte_end":446185,"line_start":319,"line_end":319,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446187,"byte_end":446190,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446192,"byte_end":446206,"line_start":321,"line_end":321,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446208,"byte_end":446211,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446213,"byte_end":446303,"line_start":323,"line_end":323,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446305,"byte_end":446308,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446310,"byte_end":446324,"line_start":325,"line_end":325,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446326,"byte_end":446329,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446331,"byte_end":446342,"line_start":327,"line_end":327,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446344,"byte_end":446371,"line_start":328,"line_end":328,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446373,"byte_end":446376,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446378,"byte_end":446405,"line_start":330,"line_end":330,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.last().as_deref());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446407,"byte_end":446456,"line_start":331,"line_end":331,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446458,"byte_end":446461,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446463,"byte_end":446483,"line_start":333,"line_end":333,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.last());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446485,"byte_end":446516,"line_start":334,"line_end":334,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446518,"byte_end":446525,"line_start":335,"line_end":335,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446527,"byte_end":446536,"line_start":336,"line_end":336,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447430,"byte_end":447438,"line_start":372,"line_end":372,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit in the slice.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446690,"byte_end":446749,"line_start":344,"line_end":344,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446751,"byte_end":446754,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446756,"byte_end":446770,"line_start":346,"line_end":346,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446772,"byte_end":446775,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446777,"byte_end":446875,"line_start":348,"line_end":348,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446877,"byte_end":446880,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446882,"byte_end":446903,"line_start":350,"line_end":350,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446905,"byte_end":446908,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446910,"byte_end":446981,"line_start":352,"line_end":352,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446983,"byte_end":447057,"line_start":353,"line_end":353,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447059,"byte_end":447132,"line_start":354,"line_end":354,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447134,"byte_end":447141,"line_start":355,"line_end":355,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447143,"byte_end":447146,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447148,"byte_end":447162,"line_start":357,"line_end":357,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447164,"byte_end":447167,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447169,"byte_end":447180,"line_start":359,"line_end":359,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447182,"byte_end":447209,"line_start":360,"line_end":360,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447211,"byte_end":447214,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447216,"byte_end":447247,"line_start":362,"line_end":362,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447249,"byte_end":447252,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut last) = x.last_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447254,"byte_end":447296,"line_start":364,"line_end":364,"column_start":2,"column_end":44}},{"value":"/   *last = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447298,"byte_end":447317,"line_start":365,"line_end":365,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447319,"byte_end":447324,"line_start":366,"line_end":366,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447326,"byte_end":447360,"line_start":367,"line_end":367,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447362,"byte_end":447369,"line_start":368,"line_end":368,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447371,"byte_end":447374,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447376,"byte_end":447410,"line_start":370,"line_end":370,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447412,"byte_end":447421,"line_start":371,"line_end":371,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448349,"byte_end":448352,"line_start":402,"line_end":402,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice depending on the type of index.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice depending on the type of index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447585,"byte_end":447661,"line_start":379,"line_end":379,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447663,"byte_end":447666,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the bit at that position","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447668,"byte_end":447742,"line_start":381,"line_end":381,"column_start":2,"column_end":76}},{"value":"/   or `None` if out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447744,"byte_end":447777,"line_start":382,"line_end":382,"column_start":2,"column_end":35}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447779,"byte_end":447855,"line_start":383,"line_end":383,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447857,"byte_end":447887,"line_start":384,"line_end":384,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447889,"byte_end":447892,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447894,"byte_end":447908,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447910,"byte_end":447913,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447915,"byte_end":448003,"line_start":388,"line_end":388,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448005,"byte_end":448008,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448010,"byte_end":448024,"line_start":390,"line_end":390,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448026,"byte_end":448029,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448031,"byte_end":448042,"line_start":392,"line_end":392,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448044,"byte_end":448071,"line_start":393,"line_end":393,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448073,"byte_end":448076,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448078,"byte_end":448105,"line_start":395,"line_end":395,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.get(1).as_deref());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448107,"byte_end":448156,"line_start":396,"line_end":396,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(Some(bits![0, 1]), v.get(0 .. 2));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448158,"byte_end":448207,"line_start":397,"line_end":397,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(None, v.get(3));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448209,"byte_end":448240,"line_start":398,"line_end":398,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(None, v.get(0 .. 4));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448242,"byte_end":448278,"line_start":399,"line_end":399,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448280,"byte_end":448287,"line_start":400,"line_end":400,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448324,"byte_end":448338,"line_start":401,"line_end":401,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449351,"byte_end":449358,"line_start":437,"line_end":437,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice depending on the type\n of index (see [`.get()`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice depending on the type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448459,"byte_end":448533,"line_start":407,"line_end":407,"column_start":2,"column_end":76}},{"value":"/ of index (see [`.get()`]) or `None` if the index is out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448535,"byte_end":448605,"line_start":408,"line_end":408,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448607,"byte_end":448610,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448612,"byte_end":448626,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448628,"byte_end":448631,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448633,"byte_end":448729,"line_start":412,"line_end":412,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448731,"byte_end":448734,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448736,"byte_end":448757,"line_start":414,"line_end":414,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448759,"byte_end":448762,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448764,"byte_end":448835,"line_start":416,"line_end":416,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448837,"byte_end":448911,"line_start":417,"line_end":417,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448913,"byte_end":448986,"line_start":418,"line_end":418,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448988,"byte_end":448995,"line_start":419,"line_end":419,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448997,"byte_end":449000,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449002,"byte_end":449016,"line_start":421,"line_end":421,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449018,"byte_end":449021,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449023,"byte_end":449034,"line_start":423,"line_end":423,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449036,"byte_end":449063,"line_start":424,"line_end":424,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449065,"byte_end":449068,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449070,"byte_end":449101,"line_start":426,"line_end":426,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449103,"byte_end":449106,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut bit) = x.get_mut(1) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449108,"byte_end":449149,"line_start":428,"line_end":428,"column_start":2,"column_end":43}},{"value":"/   *bit = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449151,"byte_end":449169,"line_start":429,"line_end":429,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449171,"byte_end":449176,"line_start":430,"line_end":430,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449178,"byte_end":449212,"line_start":431,"line_end":431,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449214,"byte_end":449221,"line_start":432,"line_end":432,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449223,"byte_end":449226,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449228,"byte_end":449262,"line_start":434,"line_end":434,"column_start":2,"column_end":36}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449264,"byte_end":449289,"line_start":435,"line_end":435,"column_start":2,"column_end":27}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449326,"byte_end":449340,"line_start":436,"line_end":436,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2441},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450335,"byte_end":450348,"line_start":468,"line_end":468,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice, without doing bounds checking.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449471,"byte_end":449547,"line_start":442,"line_end":442,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449549,"byte_end":449552,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449554,"byte_end":449630,"line_start":444,"line_end":444,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449632,"byte_end":449701,"line_start":445,"line_end":445,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see [`.get()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449703,"byte_end":449779,"line_start":446,"line_end":446,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449781,"byte_end":449784,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449786,"byte_end":449800,"line_start":448,"line_end":448,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449802,"byte_end":449805,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449807,"byte_end":449915,"line_start":450,"line_end":450,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449917,"byte_end":449920,"line_start":451,"line_end":451,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449922,"byte_end":449936,"line_start":452,"line_end":452,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449938,"byte_end":449941,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449943,"byte_end":449954,"line_start":454,"line_end":454,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449956,"byte_end":449983,"line_start":455,"line_end":455,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449985,"byte_end":449988,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449990,"byte_end":450017,"line_start":457,"line_end":457,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450019,"byte_end":450022,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450024,"byte_end":450036,"line_start":459,"line_end":459,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(x.get_unchecked(1), &true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450038,"byte_end":450082,"line_start":460,"line_end":460,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450084,"byte_end":450089,"line_start":461,"line_end":461,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450091,"byte_end":450098,"line_start":462,"line_end":462,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450100,"byte_end":450103,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450105,"byte_end":450201,"line_start":464,"line_end":464,"column_start":2,"column_end":98}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450203,"byte_end":450228,"line_start":465,"line_end":465,"column_start":2,"column_end":27}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450230,"byte_end":450266,"line_start":466,"line_end":466,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450303,"byte_end":450317,"line_start":467,"line_end":467,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2444},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451709,"byte_end":451726,"line_start":510,"line_end":510,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice, without doing bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450457,"byte_end":450531,"line_start":473,"line_end":473,"column_start":2,"column_end":76}},{"value":"/ checking.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450533,"byte_end":450546,"line_start":474,"line_end":474,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450548,"byte_end":450551,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450553,"byte_end":450629,"line_start":476,"line_end":476,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450631,"byte_end":450700,"line_start":477,"line_end":477,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450702,"byte_end":450766,"line_start":478,"line_end":478,"column_start":2,"column_end":66}},{"value":"/ [`.get_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450768,"byte_end":450787,"line_start":479,"line_end":479,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450789,"byte_end":450792,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450794,"byte_end":450808,"line_start":481,"line_end":481,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450810,"byte_end":450813,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450815,"byte_end":450931,"line_start":483,"line_end":483,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450933,"byte_end":450936,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450938,"byte_end":450959,"line_start":485,"line_end":485,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450961,"byte_end":450964,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450966,"byte_end":451037,"line_start":487,"line_end":487,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451039,"byte_end":451113,"line_start":488,"line_end":488,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451115,"byte_end":451188,"line_start":489,"line_end":489,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451190,"byte_end":451197,"line_start":490,"line_end":490,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451199,"byte_end":451202,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451204,"byte_end":451218,"line_start":492,"line_end":492,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451220,"byte_end":451223,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451225,"byte_end":451236,"line_start":494,"line_end":494,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451238,"byte_end":451265,"line_start":495,"line_end":495,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451267,"byte_end":451270,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451272,"byte_end":451300,"line_start":497,"line_end":497,"column_start":2,"column_end":30}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451302,"byte_end":451314,"line_start":498,"line_end":498,"column_start":2,"column_end":14}},{"value":"/   let mut bit = x.get_unchecked_mut(1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451316,"byte_end":451359,"line_start":499,"line_end":499,"column_start":2,"column_end":45}},{"value":"/   *bit = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451361,"byte_end":451379,"line_start":500,"line_end":500,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451381,"byte_end":451386,"line_start":501,"line_end":501,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451388,"byte_end":451422,"line_start":502,"line_end":502,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451424,"byte_end":451431,"line_start":503,"line_end":503,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451433,"byte_end":451436,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451438,"byte_end":451472,"line_start":505,"line_end":505,"column_start":2,"column_end":36}},{"value":"/ [`get_mut`]: Self::get_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451474,"byte_end":451504,"line_start":506,"line_end":506,"column_start":2,"column_end":32}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451506,"byte_end":451602,"line_start":507,"line_end":507,"column_start":2,"column_end":98}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451604,"byte_end":451640,"line_start":508,"line_end":508,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451677,"byte_end":451691,"line_start":509,"line_end":509,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451979,"byte_end":451985,"line_start":519,"line_end":519,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451857,"byte_end":451874,"line_start":516,"line_end":516,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451876,"byte_end":451906,"line_start":517,"line_end":517,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr` to access the region pointer\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451908,"byte_end":451970,"line_start":518,"line_end":518,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452187,"byte_end":452199,"line_start":527,"line_end":527,"column_start":9,"column_end":21},"name":"as_ptr_range","qualname":"<BitSlice<O, T>>::as_ptr_range","value":"pub fn as_ptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452058,"byte_end":452075,"line_start":524,"line_end":524,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452077,"byte_end":452107,"line_start":525,"line_end":525,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452109,"byte_end":452178,"line_start":526,"line_end":526,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452409,"byte_end":452419,"line_start":535,"line_end":535,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452283,"byte_end":452300,"line_start":532,"line_end":532,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452302,"byte_end":452332,"line_start":533,"line_end":533,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr` to access the region pointer\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452334,"byte_end":452400,"line_start":534,"line_end":534,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452631,"byte_end":452647,"line_start":543,"line_end":543,"column_start":9,"column_end":25},"name":"as_mut_ptr_range","qualname":"<BitSlice<O, T>>::as_mut_ptr_range","value":"pub fn as_mut_ptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452498,"byte_end":452515,"line_start":540,"line_end":540,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452517,"byte_end":452547,"line_start":541,"line_end":541,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452549,"byte_end":452622,"line_start":542,"line_end":542,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453242,"byte_end":453246,"line_start":572,"line_end":572,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452721,"byte_end":452753,"line_start":547,"line_end":547,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452755,"byte_end":452758,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452760,"byte_end":452774,"line_start":549,"line_end":549,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452776,"byte_end":452779,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452781,"byte_end":452871,"line_start":551,"line_end":551,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452873,"byte_end":452876,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452878,"byte_end":452893,"line_start":553,"line_end":553,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452895,"byte_end":452898,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452900,"byte_end":452937,"line_start":555,"line_end":555,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452939,"byte_end":452977,"line_start":556,"line_end":556,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452979,"byte_end":452982,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452984,"byte_end":452996,"line_start":558,"line_end":558,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452998,"byte_end":453001,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453003,"byte_end":453046,"line_start":560,"line_end":560,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453048,"byte_end":453051,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453053,"byte_end":453067,"line_start":562,"line_end":562,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453069,"byte_end":453072,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453074,"byte_end":453085,"line_start":564,"line_end":564,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453087,"byte_end":453114,"line_start":565,"line_end":565,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453116,"byte_end":453119,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453121,"byte_end":453155,"line_start":567,"line_end":567,"column_start":2,"column_end":36}},{"value":"/ v.swap(1, 3);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453157,"byte_end":453174,"line_start":568,"line_end":568,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453176,"byte_end":453213,"line_start":569,"line_end":569,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453215,"byte_end":453222,"line_start":570,"line_end":570,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453224,"byte_end":453233,"line_start":571,"line_end":571,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453787,"byte_end":453794,"line_start":596,"line_end":596,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453420,"byte_end":453474,"line_start":580,"line_end":580,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453476,"byte_end":453479,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453481,"byte_end":453495,"line_start":582,"line_end":582,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453497,"byte_end":453500,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453502,"byte_end":453598,"line_start":584,"line_end":584,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453600,"byte_end":453603,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453605,"byte_end":453619,"line_start":586,"line_end":586,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453621,"byte_end":453624,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453626,"byte_end":453637,"line_start":588,"line_end":588,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453639,"byte_end":453666,"line_start":589,"line_end":589,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453668,"byte_end":453671,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453673,"byte_end":453704,"line_start":591,"line_end":591,"column_start":2,"column_end":33}},{"value":"/ v.reverse();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453706,"byte_end":453722,"line_start":592,"line_end":592,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(v, bits![1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453724,"byte_end":453758,"line_start":593,"line_end":593,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453760,"byte_end":453767,"line_start":594,"line_end":594,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453769,"byte_end":453778,"line_start":595,"line_end":595,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2453},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456126,"byte_end":456130,"line_start":665,"line_end":665,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454886,"byte_end":454925,"line_start":628,"line_end":628,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454927,"byte_end":454930,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454932,"byte_end":454946,"line_start":630,"line_end":630,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454948,"byte_end":454951,"line_start":631,"line_end":631,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454953,"byte_end":455043,"line_start":632,"line_end":632,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455045,"byte_end":455048,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455050,"byte_end":455071,"line_start":634,"line_end":634,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455073,"byte_end":455076,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ This iterator yields [`BitRef`] proxy references, rather than `&bool`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455078,"byte_end":455151,"line_start":636,"line_end":636,"column_start":2,"column_end":75}},{"value":"/ ordinary references. It does so in order to promote consistency in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455153,"byte_end":455227,"line_start":637,"line_end":637,"column_start":2,"column_end":76}},{"value":"/ crate, and make switching between immutable and mutable single-bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455229,"byte_end":455299,"line_start":638,"line_end":638,"column_start":2,"column_end":72}},{"value":"/ access easier.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455301,"byte_end":455319,"line_start":639,"line_end":639,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455321,"byte_end":455324,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ The produced iterator has a [`by_ref`] adapter that yields `&bool`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455326,"byte_end":455396,"line_start":641,"line_end":641,"column_start":2,"column_end":72}},{"value":"/ references, and a [`by_val`] adapter that yields `bool` values. Use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455398,"byte_end":455469,"line_start":642,"line_end":642,"column_start":2,"column_end":73}},{"value":"/ these methods to fit this iterator into APIs that expect ordinary `bool`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455471,"byte_end":455547,"line_start":643,"line_end":643,"column_start":2,"column_end":78}},{"value":"/ inputs.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455549,"byte_end":455560,"line_start":644,"line_end":644,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455562,"byte_end":455565,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455567,"byte_end":455581,"line_start":646,"line_end":646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455583,"byte_end":455586,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455588,"byte_end":455599,"line_start":648,"line_end":648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455601,"byte_end":455628,"line_start":649,"line_end":649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455630,"byte_end":455633,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455635,"byte_end":455662,"line_start":651,"line_end":651,"column_start":2,"column_end":29}},{"value":"/ let mut iterator = x.iter();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455664,"byte_end":455696,"line_start":652,"line_end":652,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455698,"byte_end":455701,"line_start":653,"line_end":653,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455703,"byte_end":455760,"line_start":654,"line_end":654,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455762,"byte_end":455819,"line_start":655,"line_end":655,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&true));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455821,"byte_end":455877,"line_start":656,"line_end":656,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(iterator.next().as_deref(), None);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455879,"byte_end":455928,"line_start":657,"line_end":657,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455930,"byte_end":455937,"line_start":658,"line_end":658,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455939,"byte_end":455942,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455944,"byte_end":455978,"line_start":660,"line_end":660,"column_start":2,"column_end":36}},{"value":"/ [`by_ref`]: crate::slice::Iter::by_ref","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455980,"byte_end":456022,"line_start":661,"line_end":661,"column_start":2,"column_end":44}},{"value":"/ [`by_val`]: crate::slice::Iter::by_val","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456024,"byte_end":456066,"line_start":662,"line_end":662,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456068,"byte_end":456085,"line_start":663,"line_end":663,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456087,"byte_end":456117,"line_start":664,"line_end":664,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457364,"byte_end":457372,"line_start":705,"line_end":705,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456177,"byte_end":456232,"line_start":669,"line_end":669,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456234,"byte_end":456237,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456239,"byte_end":456253,"line_start":671,"line_end":671,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456255,"byte_end":456258,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456260,"byte_end":456358,"line_start":673,"line_end":673,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456360,"byte_end":456363,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456365,"byte_end":456386,"line_start":675,"line_end":675,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456388,"byte_end":456391,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456393,"byte_end":456464,"line_start":677,"line_end":677,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456466,"byte_end":456540,"line_start":678,"line_end":678,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456542,"byte_end":456615,"line_start":679,"line_end":679,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456617,"byte_end":456624,"line_start":680,"line_end":680,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456626,"byte_end":456629,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456631,"byte_end":456704,"line_start":682,"line_end":682,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456706,"byte_end":456776,"line_start":683,"line_end":683,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456778,"byte_end":456847,"line_start":684,"line_end":684,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456849,"byte_end":456925,"line_start":685,"line_end":685,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456927,"byte_end":456982,"line_start":686,"line_end":686,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456984,"byte_end":456987,"line_start":687,"line_end":687,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456989,"byte_end":456992,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456994,"byte_end":457008,"line_start":689,"line_end":689,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457010,"byte_end":457013,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457015,"byte_end":457026,"line_start":691,"line_end":691,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457028,"byte_end":457055,"line_start":692,"line_end":692,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457057,"byte_end":457060,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457062,"byte_end":457093,"line_start":694,"line_end":694,"column_start":2,"column_end":33}},{"value":"/ for mut bit in x.iter_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457095,"byte_end":457128,"line_start":695,"line_end":695,"column_start":2,"column_end":35}},{"value":"/   *bit = !*bit;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457130,"byte_end":457149,"line_start":696,"line_end":696,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457151,"byte_end":457156,"line_start":697,"line_end":697,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457158,"byte_end":457192,"line_start":698,"line_end":698,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457194,"byte_end":457201,"line_start":699,"line_end":699,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457203,"byte_end":457206,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457208,"byte_end":457242,"line_start":701,"line_end":701,"column_start":2,"column_end":36}},{"value":"/ [`.remove_alias()`]: crate::slice::IterMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457244,"byte_end":457304,"line_start":702,"line_end":702,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457306,"byte_end":457323,"line_start":703,"line_end":703,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457325,"byte_end":457355,"line_start":704,"line_end":704,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2455},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458356,"byte_end":458363,"line_start":744,"line_end":744,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457429,"byte_end":457502,"line_start":709,"line_end":709,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457504,"byte_end":457574,"line_start":710,"line_end":710,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457576,"byte_end":457598,"line_start":711,"line_end":711,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457600,"byte_end":457603,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457605,"byte_end":457619,"line_start":713,"line_end":713,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457621,"byte_end":457624,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.windows)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457626,"byte_end":457722,"line_start":715,"line_end":715,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457724,"byte_end":457727,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457729,"byte_end":457741,"line_start":717,"line_end":717,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457743,"byte_end":457746,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457748,"byte_end":457774,"line_start":719,"line_end":719,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457776,"byte_end":457779,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457781,"byte_end":457795,"line_start":721,"line_end":721,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457797,"byte_end":457800,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457802,"byte_end":457813,"line_start":723,"line_end":723,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457815,"byte_end":457842,"line_start":724,"line_end":724,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457844,"byte_end":457847,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457849,"byte_end":457883,"line_start":726,"line_end":726,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.windows(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457885,"byte_end":457921,"line_start":727,"line_end":727,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457923,"byte_end":457973,"line_start":728,"line_end":728,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457975,"byte_end":458025,"line_start":729,"line_end":729,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458027,"byte_end":458077,"line_start":730,"line_end":730,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458079,"byte_end":458114,"line_start":731,"line_end":731,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458116,"byte_end":458123,"line_start":732,"line_end":732,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458125,"byte_end":458128,"line_start":733,"line_end":733,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458130,"byte_end":458170,"line_start":734,"line_end":734,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458172,"byte_end":458175,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458177,"byte_end":458188,"line_start":736,"line_end":736,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458190,"byte_end":458217,"line_start":737,"line_end":737,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458219,"byte_end":458222,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458224,"byte_end":458252,"line_start":739,"line_end":739,"column_start":2,"column_end":30}},{"value":"/ let mut iter = slice.windows(4);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458254,"byte_end":458290,"line_start":740,"line_end":740,"column_start":2,"column_end":38}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458292,"byte_end":458327,"line_start":741,"line_end":741,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458329,"byte_end":458336,"line_start":742,"line_end":742,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458338,"byte_end":458347,"line_start":743,"line_end":743,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2456},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459619,"byte_end":459625,"line_start":784,"line_end":784,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458486,"byte_end":458556,"line_start":749,"line_end":749,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458558,"byte_end":458601,"line_start":750,"line_end":750,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458603,"byte_end":458606,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458608,"byte_end":458678,"line_start":752,"line_end":752,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458680,"byte_end":458756,"line_start":753,"line_end":753,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458758,"byte_end":458775,"line_start":754,"line_end":754,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458777,"byte_end":458780,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458782,"byte_end":458853,"line_start":756,"line_end":756,"column_start":2,"column_end":73}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks()`] for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458855,"byte_end":458929,"line_start":757,"line_end":757,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458931,"byte_end":458986,"line_start":758,"line_end":758,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458988,"byte_end":458991,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458993,"byte_end":459007,"line_start":760,"line_end":760,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459009,"byte_end":459012,"line_start":761,"line_end":761,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459014,"byte_end":459108,"line_start":762,"line_end":762,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459110,"byte_end":459113,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459115,"byte_end":459127,"line_start":764,"line_end":764,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459129,"byte_end":459132,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459134,"byte_end":459166,"line_start":766,"line_end":766,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459168,"byte_end":459171,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459173,"byte_end":459187,"line_start":768,"line_end":768,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459189,"byte_end":459192,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459194,"byte_end":459205,"line_start":770,"line_end":770,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459207,"byte_end":459234,"line_start":771,"line_end":771,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459236,"byte_end":459239,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459241,"byte_end":459278,"line_start":773,"line_end":773,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459280,"byte_end":459315,"line_start":774,"line_end":774,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459317,"byte_end":459367,"line_start":775,"line_end":775,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459369,"byte_end":459419,"line_start":776,"line_end":776,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459421,"byte_end":459468,"line_start":777,"line_end":777,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459470,"byte_end":459505,"line_start":778,"line_end":778,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459507,"byte_end":459514,"line_start":779,"line_end":779,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459516,"byte_end":459519,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459521,"byte_end":459564,"line_start":781,"line_end":781,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459566,"byte_end":459599,"line_start":782,"line_end":782,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459601,"byte_end":459610,"line_start":783,"line_end":783,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461366,"byte_end":461376,"line_start":837,"line_end":837,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459763,"byte_end":459833,"line_start":789,"line_end":789,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459835,"byte_end":459878,"line_start":790,"line_end":790,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459880,"byte_end":459883,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459885,"byte_end":459960,"line_start":792,"line_end":792,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459962,"byte_end":460035,"line_start":793,"line_end":793,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460037,"byte_end":460061,"line_start":794,"line_end":794,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460063,"byte_end":460066,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460068,"byte_end":460143,"line_start":796,"line_end":796,"column_start":2,"column_end":77}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks_mut()`] for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460145,"byte_end":460219,"line_start":797,"line_end":797,"column_start":2,"column_end":76}},{"value":"/ the same iterator but starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460221,"byte_end":460280,"line_start":798,"line_end":798,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460282,"byte_end":460285,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460287,"byte_end":460301,"line_start":800,"line_end":800,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460303,"byte_end":460306,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460308,"byte_end":460410,"line_start":802,"line_end":802,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460412,"byte_end":460415,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460417,"byte_end":460438,"line_start":804,"line_end":804,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460440,"byte_end":460443,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460445,"byte_end":460518,"line_start":806,"line_end":806,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460520,"byte_end":460590,"line_start":807,"line_end":807,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460592,"byte_end":460661,"line_start":808,"line_end":808,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460663,"byte_end":460739,"line_start":809,"line_end":809,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460741,"byte_end":460796,"line_start":810,"line_end":810,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460798,"byte_end":460801,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460803,"byte_end":460815,"line_start":812,"line_end":812,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460817,"byte_end":460820,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460822,"byte_end":460854,"line_start":814,"line_end":814,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460856,"byte_end":460859,"line_start":815,"line_end":815,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460861,"byte_end":460875,"line_start":816,"line_end":816,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460877,"byte_end":460880,"line_start":817,"line_end":817,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460882,"byte_end":460893,"line_start":818,"line_end":818,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460895,"byte_end":460922,"line_start":819,"line_end":819,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460924,"byte_end":460927,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460929,"byte_end":460957,"line_start":821,"line_end":821,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460959,"byte_end":460981,"line_start":822,"line_end":822,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460983,"byte_end":460986,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_mut(2) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460988,"byte_end":461022,"line_start":824,"line_end":824,"column_start":2,"column_end":36}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461024,"byte_end":461063,"line_start":825,"line_end":825,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461065,"byte_end":461095,"line_start":826,"line_end":826,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461097,"byte_end":461104,"line_start":827,"line_end":827,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461106,"byte_end":461123,"line_start":828,"line_end":828,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461125,"byte_end":461130,"line_start":829,"line_end":829,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461132,"byte_end":461172,"line_start":830,"line_end":830,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461174,"byte_end":461181,"line_start":831,"line_end":831,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461183,"byte_end":461186,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461188,"byte_end":461239,"line_start":833,"line_end":833,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461241,"byte_end":461282,"line_start":834,"line_end":834,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461284,"byte_end":461346,"line_start":835,"line_end":835,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461348,"byte_end":461357,"line_start":836,"line_end":836,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462973,"byte_end":462985,"line_start":883,"line_end":883,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461524,"byte_end":461594,"line_start":842,"line_end":842,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461596,"byte_end":461639,"line_start":843,"line_end":843,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461641,"byte_end":461644,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461646,"byte_end":461716,"line_start":845,"line_end":845,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461718,"byte_end":461793,"line_start":846,"line_end":846,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461795,"byte_end":461871,"line_start":847,"line_end":847,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461873,"byte_end":461890,"line_start":848,"line_end":848,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461892,"byte_end":461895,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461897,"byte_end":461972,"line_start":850,"line_end":850,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461974,"byte_end":462040,"line_start":851,"line_end":851,"column_start":2,"column_end":68}},{"value":"/ [`.chunks()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462042,"byte_end":462060,"line_start":852,"line_end":852,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462062,"byte_end":462065,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462067,"byte_end":462141,"line_start":854,"line_end":854,"column_start":2,"column_end":76}},{"value":"/ remainder as a smaller chunk, and [`.rchunks_exact()`] for the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462143,"byte_end":462214,"line_start":855,"line_end":855,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462216,"byte_end":462266,"line_start":856,"line_end":856,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462268,"byte_end":462271,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462273,"byte_end":462287,"line_start":858,"line_end":858,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462289,"byte_end":462292,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462294,"byte_end":462400,"line_start":860,"line_end":860,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462402,"byte_end":462405,"line_start":861,"line_end":861,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462407,"byte_end":462419,"line_start":862,"line_end":862,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462421,"byte_end":462424,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462426,"byte_end":462458,"line_start":864,"line_end":864,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462460,"byte_end":462463,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462465,"byte_end":462479,"line_start":866,"line_end":866,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462481,"byte_end":462484,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462486,"byte_end":462497,"line_start":868,"line_end":868,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462499,"byte_end":462526,"line_start":869,"line_end":869,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462528,"byte_end":462531,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462533,"byte_end":462570,"line_start":871,"line_end":871,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks_exact(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462572,"byte_end":462613,"line_start":872,"line_end":872,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462615,"byte_end":462665,"line_start":873,"line_end":873,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462667,"byte_end":462717,"line_start":874,"line_end":874,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462719,"byte_end":462754,"line_start":875,"line_end":875,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462756,"byte_end":462799,"line_start":876,"line_end":876,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462801,"byte_end":462808,"line_start":877,"line_end":877,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462810,"byte_end":462813,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462815,"byte_end":462846,"line_start":879,"line_end":879,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462848,"byte_end":462893,"line_start":880,"line_end":880,"column_start":2,"column_end":47}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462895,"byte_end":462953,"line_start":881,"line_end":881,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462955,"byte_end":462964,"line_start":882,"line_end":882,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464986,"byte_end":465002,"line_start":938,"line_end":938,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463133,"byte_end":463203,"line_start":888,"line_end":888,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463205,"byte_end":463248,"line_start":889,"line_end":889,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463250,"byte_end":463253,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463255,"byte_end":463330,"line_start":891,"line_end":891,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463332,"byte_end":463406,"line_start":892,"line_end":892,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463408,"byte_end":463484,"line_start":893,"line_end":893,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463486,"byte_end":463513,"line_start":894,"line_end":894,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463515,"byte_end":463518,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463520,"byte_end":463595,"line_start":896,"line_end":896,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463597,"byte_end":463663,"line_start":897,"line_end":897,"column_start":2,"column_end":68}},{"value":"/ [`.chunks_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463665,"byte_end":463687,"line_start":898,"line_end":898,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463689,"byte_end":463692,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463694,"byte_end":463768,"line_start":900,"line_end":900,"column_start":2,"column_end":76}},{"value":"/ the remainder as a smaller chunk, and [`.rchunks_exact_mut()`] for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463770,"byte_end":463844,"line_start":901,"line_end":901,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463846,"byte_end":463901,"line_start":902,"line_end":902,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463903,"byte_end":463906,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463908,"byte_end":463922,"line_start":904,"line_end":904,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463924,"byte_end":463927,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463929,"byte_end":464043,"line_start":906,"line_end":906,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464045,"byte_end":464048,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464050,"byte_end":464071,"line_start":908,"line_end":908,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464073,"byte_end":464076,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464078,"byte_end":464151,"line_start":910,"line_end":910,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464153,"byte_end":464223,"line_start":911,"line_end":911,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464225,"byte_end":464294,"line_start":912,"line_end":912,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464296,"byte_end":464372,"line_start":913,"line_end":913,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464374,"byte_end":464429,"line_start":914,"line_end":914,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464431,"byte_end":464434,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464436,"byte_end":464448,"line_start":916,"line_end":916,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464450,"byte_end":464453,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464455,"byte_end":464487,"line_start":918,"line_end":918,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464489,"byte_end":464492,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464494,"byte_end":464508,"line_start":920,"line_end":920,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464510,"byte_end":464513,"line_start":921,"line_end":921,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464515,"byte_end":464526,"line_start":922,"line_end":922,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464528,"byte_end":464555,"line_start":923,"line_end":923,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464557,"byte_end":464560,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464562,"byte_end":464590,"line_start":925,"line_end":925,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464592,"byte_end":464595,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_exact_mut(2) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464597,"byte_end":464637,"line_start":927,"line_end":927,"column_start":2,"column_end":42}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464639,"byte_end":464665,"line_start":928,"line_end":928,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464667,"byte_end":464672,"line_start":929,"line_end":929,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 1, 1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464674,"byte_end":464714,"line_start":930,"line_end":930,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464716,"byte_end":464723,"line_start":931,"line_end":931,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464725,"byte_end":464728,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464730,"byte_end":464769,"line_start":933,"line_end":933,"column_start":2,"column_end":41}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464771,"byte_end":464842,"line_start":934,"line_end":934,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464844,"byte_end":464897,"line_start":935,"line_end":935,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464899,"byte_end":464966,"line_start":936,"line_end":936,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464968,"byte_end":464977,"line_start":937,"line_end":937,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466304,"byte_end":466311,"line_start":981,"line_end":981,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465168,"byte_end":465238,"line_start":946,"line_end":946,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465240,"byte_end":465277,"line_start":947,"line_end":947,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465279,"byte_end":465282,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465284,"byte_end":465354,"line_start":949,"line_end":949,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465356,"byte_end":465432,"line_start":950,"line_end":950,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465434,"byte_end":465451,"line_start":951,"line_end":951,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465453,"byte_end":465456,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465458,"byte_end":465530,"line_start":953,"line_end":953,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks()`] for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465532,"byte_end":465605,"line_start":954,"line_end":954,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465607,"byte_end":465668,"line_start":955,"line_end":955,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465670,"byte_end":465673,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465675,"byte_end":465689,"line_start":957,"line_end":957,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465691,"byte_end":465694,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465696,"byte_end":465792,"line_start":959,"line_end":959,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465794,"byte_end":465797,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465799,"byte_end":465811,"line_start":961,"line_end":961,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465813,"byte_end":465816,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465818,"byte_end":465850,"line_start":963,"line_end":963,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465852,"byte_end":465855,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465857,"byte_end":465871,"line_start":965,"line_end":965,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465873,"byte_end":465876,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465878,"byte_end":465889,"line_start":967,"line_end":967,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465891,"byte_end":465918,"line_start":968,"line_end":968,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465920,"byte_end":465923,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465925,"byte_end":465962,"line_start":970,"line_end":970,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465964,"byte_end":466000,"line_start":971,"line_end":971,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466002,"byte_end":466052,"line_start":972,"line_end":972,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466054,"byte_end":466104,"line_start":973,"line_end":973,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466106,"byte_end":466153,"line_start":974,"line_end":974,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466155,"byte_end":466190,"line_start":975,"line_end":975,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466192,"byte_end":466199,"line_start":976,"line_end":976,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466201,"byte_end":466204,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466206,"byte_end":466237,"line_start":978,"line_end":978,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466239,"byte_end":466284,"line_start":979,"line_end":979,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466286,"byte_end":466295,"line_start":980,"line_end":980,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2461},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468058,"byte_end":468069,"line_start":1034,"line_end":1034,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466451,"byte_end":466521,"line_start":986,"line_end":986,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466523,"byte_end":466560,"line_start":987,"line_end":987,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466562,"byte_end":466565,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466567,"byte_end":466642,"line_start":989,"line_end":989,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466644,"byte_end":466717,"line_start":990,"line_end":990,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466719,"byte_end":466743,"line_start":991,"line_end":991,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466745,"byte_end":466748,"line_start":992,"line_end":992,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466750,"byte_end":466826,"line_start":993,"line_end":993,"column_start":2,"column_end":78}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks_mut()`] for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466828,"byte_end":466901,"line_start":994,"line_end":994,"column_start":2,"column_end":75}},{"value":"/ the same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466903,"byte_end":466968,"line_start":995,"line_end":995,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466970,"byte_end":466973,"line_start":996,"line_end":996,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466975,"byte_end":466989,"line_start":997,"line_end":997,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466991,"byte_end":466994,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466996,"byte_end":467100,"line_start":999,"line_end":999,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467102,"byte_end":467105,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467107,"byte_end":467128,"line_start":1001,"line_end":1001,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467130,"byte_end":467133,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467135,"byte_end":467208,"line_start":1003,"line_end":1003,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467210,"byte_end":467280,"line_start":1004,"line_end":1004,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467282,"byte_end":467351,"line_start":1005,"line_end":1005,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467353,"byte_end":467429,"line_start":1006,"line_end":1006,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467431,"byte_end":467486,"line_start":1007,"line_end":1007,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467488,"byte_end":467491,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467493,"byte_end":467505,"line_start":1009,"line_end":1009,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467507,"byte_end":467510,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467512,"byte_end":467544,"line_start":1011,"line_end":1011,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467546,"byte_end":467549,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467551,"byte_end":467565,"line_start":1013,"line_end":1013,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467567,"byte_end":467570,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467572,"byte_end":467583,"line_start":1015,"line_end":1015,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467585,"byte_end":467612,"line_start":1016,"line_end":1016,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467614,"byte_end":467617,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467619,"byte_end":467647,"line_start":1018,"line_end":1018,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467649,"byte_end":467671,"line_start":1019,"line_end":1019,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467673,"byte_end":467676,"line_start":1020,"line_end":1020,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_mut(2) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467678,"byte_end":467713,"line_start":1021,"line_end":1021,"column_start":2,"column_end":37}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467715,"byte_end":467754,"line_start":1022,"line_end":1022,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467756,"byte_end":467786,"line_start":1023,"line_end":1023,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467788,"byte_end":467795,"line_start":1024,"line_end":1024,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467797,"byte_end":467814,"line_start":1025,"line_end":1025,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467816,"byte_end":467821,"line_start":1026,"line_end":1026,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467823,"byte_end":467863,"line_start":1027,"line_end":1027,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467865,"byte_end":467872,"line_start":1028,"line_end":1028,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467874,"byte_end":467877,"line_start":1029,"line_end":1029,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467879,"byte_end":467918,"line_start":1030,"line_end":1030,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467920,"byte_end":467973,"line_start":1031,"line_end":1031,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467975,"byte_end":468038,"line_start":1032,"line_end":1032,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468040,"byte_end":468049,"line_start":1033,"line_end":1033,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469672,"byte_end":469685,"line_start":1080,"line_end":1080,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468219,"byte_end":468289,"line_start":1039,"line_end":1039,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468291,"byte_end":468328,"line_start":1040,"line_end":1040,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468330,"byte_end":468333,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468335,"byte_end":468405,"line_start":1042,"line_end":1042,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468407,"byte_end":468482,"line_start":1043,"line_end":1043,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468484,"byte_end":468560,"line_start":1044,"line_end":1044,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468562,"byte_end":468579,"line_start":1045,"line_end":1045,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468581,"byte_end":468584,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468586,"byte_end":468661,"line_start":1047,"line_end":1047,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468663,"byte_end":468729,"line_start":1048,"line_end":1048,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468731,"byte_end":468750,"line_start":1049,"line_end":1049,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468752,"byte_end":468755,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468757,"byte_end":468832,"line_start":1051,"line_end":1051,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`.chunks_exact()`] for the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468834,"byte_end":468904,"line_start":1052,"line_end":1052,"column_start":2,"column_end":72}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468906,"byte_end":468962,"line_start":1053,"line_end":1053,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468964,"byte_end":468967,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468969,"byte_end":468983,"line_start":1055,"line_end":1055,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468985,"byte_end":468988,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468990,"byte_end":469098,"line_start":1057,"line_end":1057,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469100,"byte_end":469103,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469105,"byte_end":469117,"line_start":1059,"line_end":1059,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469119,"byte_end":469122,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469124,"byte_end":469156,"line_start":1061,"line_end":1061,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469158,"byte_end":469161,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469163,"byte_end":469177,"line_start":1063,"line_end":1063,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469179,"byte_end":469182,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469184,"byte_end":469195,"line_start":1065,"line_end":1065,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469197,"byte_end":469224,"line_start":1066,"line_end":1066,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469226,"byte_end":469229,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469231,"byte_end":469268,"line_start":1068,"line_end":1068,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks_exact(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469270,"byte_end":469312,"line_start":1069,"line_end":1069,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469314,"byte_end":469364,"line_start":1070,"line_end":1070,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469366,"byte_end":469416,"line_start":1071,"line_end":1071,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469418,"byte_end":469453,"line_start":1072,"line_end":1072,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469455,"byte_end":469498,"line_start":1073,"line_end":1073,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469500,"byte_end":469507,"line_start":1074,"line_end":1074,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469509,"byte_end":469512,"line_start":1075,"line_end":1075,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469514,"byte_end":469557,"line_start":1076,"line_end":1076,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469559,"byte_end":469592,"line_start":1077,"line_end":1077,"column_start":2,"column_end":35}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469594,"byte_end":469652,"line_start":1078,"line_end":1078,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469654,"byte_end":469663,"line_start":1079,"line_end":1079,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471692,"byte_end":471709,"line_start":1135,"line_end":1135,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469835,"byte_end":469905,"line_start":1085,"line_end":1085,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469907,"byte_end":469944,"line_start":1086,"line_end":1086,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469946,"byte_end":469949,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469951,"byte_end":470026,"line_start":1088,"line_end":1088,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470028,"byte_end":470102,"line_start":1089,"line_end":1089,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470104,"byte_end":470180,"line_start":1090,"line_end":1090,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470182,"byte_end":470209,"line_start":1091,"line_end":1091,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470211,"byte_end":470214,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470216,"byte_end":470291,"line_start":1093,"line_end":1093,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470293,"byte_end":470359,"line_start":1094,"line_end":1094,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470361,"byte_end":470384,"line_start":1095,"line_end":1095,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470386,"byte_end":470389,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470391,"byte_end":470466,"line_start":1097,"line_end":1097,"column_start":2,"column_end":77}},{"value":"/ the remainder as a smaller chunk, and [`.chunks_exact_mut()`] for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470468,"byte_end":470541,"line_start":1098,"line_end":1098,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470543,"byte_end":470604,"line_start":1099,"line_end":1099,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470606,"byte_end":470609,"line_start":1100,"line_end":1100,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470611,"byte_end":470625,"line_start":1101,"line_end":1101,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470627,"byte_end":470630,"line_start":1102,"line_end":1102,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470632,"byte_end":470748,"line_start":1103,"line_end":1103,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470750,"byte_end":470753,"line_start":1104,"line_end":1104,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470755,"byte_end":470776,"line_start":1105,"line_end":1105,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470778,"byte_end":470781,"line_start":1106,"line_end":1106,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470783,"byte_end":470856,"line_start":1107,"line_end":1107,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470858,"byte_end":470928,"line_start":1108,"line_end":1108,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470930,"byte_end":470999,"line_start":1109,"line_end":1109,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471001,"byte_end":471077,"line_start":1110,"line_end":1110,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471079,"byte_end":471134,"line_start":1111,"line_end":1111,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471136,"byte_end":471139,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471141,"byte_end":471153,"line_start":1113,"line_end":1113,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471155,"byte_end":471158,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471160,"byte_end":471192,"line_start":1115,"line_end":1115,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471194,"byte_end":471197,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471199,"byte_end":471213,"line_start":1117,"line_end":1117,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471215,"byte_end":471218,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471220,"byte_end":471231,"line_start":1119,"line_end":1119,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471233,"byte_end":471260,"line_start":1120,"line_end":1120,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471262,"byte_end":471265,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471267,"byte_end":471295,"line_start":1122,"line_end":1122,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471297,"byte_end":471300,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_exact_mut(2) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471302,"byte_end":471343,"line_start":1124,"line_end":1124,"column_start":2,"column_end":43}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471345,"byte_end":471371,"line_start":1125,"line_end":1125,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471373,"byte_end":471378,"line_start":1126,"line_end":1126,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471380,"byte_end":471420,"line_start":1127,"line_end":1127,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471422,"byte_end":471429,"line_start":1128,"line_end":1128,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471431,"byte_end":471434,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471436,"byte_end":471487,"line_start":1130,"line_end":1130,"column_start":2,"column_end":53}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471489,"byte_end":471560,"line_start":1131,"line_end":1131,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471562,"byte_end":471603,"line_start":1132,"line_end":1132,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471605,"byte_end":471672,"line_start":1133,"line_end":1133,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471674,"byte_end":471683,"line_start":1134,"line_end":1134,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473237,"byte_end":473245,"line_start":1191,"line_end":1191,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471877,"byte_end":471920,"line_start":1143,"line_end":1143,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471922,"byte_end":471925,"line_start":1144,"line_end":1144,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471927,"byte_end":472002,"line_start":1145,"line_end":1145,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472004,"byte_end":472079,"line_start":1146,"line_end":1146,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472081,"byte_end":472120,"line_start":1147,"line_end":1147,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472122,"byte_end":472125,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472127,"byte_end":472141,"line_start":1149,"line_end":1149,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472143,"byte_end":472146,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472148,"byte_end":472246,"line_start":1151,"line_end":1151,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472248,"byte_end":472251,"line_start":1152,"line_end":1152,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472253,"byte_end":472265,"line_start":1153,"line_end":1153,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472267,"byte_end":472270,"line_start":1154,"line_end":1154,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472272,"byte_end":472298,"line_start":1155,"line_end":1155,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472300,"byte_end":472303,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472305,"byte_end":472319,"line_start":1157,"line_end":1157,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472321,"byte_end":472324,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472326,"byte_end":472402,"line_start":1159,"line_end":1159,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472404,"byte_end":472479,"line_start":1160,"line_end":1160,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472481,"byte_end":472555,"line_start":1161,"line_end":1161,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472557,"byte_end":472630,"line_start":1162,"line_end":1162,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472632,"byte_end":472705,"line_start":1163,"line_end":1163,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472707,"byte_end":472710,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472712,"byte_end":472726,"line_start":1165,"line_end":1165,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472728,"byte_end":472731,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472733,"byte_end":472744,"line_start":1167,"line_end":1167,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472746,"byte_end":472773,"line_start":1168,"line_end":1168,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472775,"byte_end":472778,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472780,"byte_end":472816,"line_start":1170,"line_end":1170,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472818,"byte_end":472821,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472823,"byte_end":472828,"line_start":1172,"line_end":1172,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472830,"byte_end":472870,"line_start":1173,"line_end":1173,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472872,"byte_end":472904,"line_start":1174,"line_end":1174,"column_start":2,"column_end":34}},{"value":"/   assert_eq!(right, v);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472906,"byte_end":472933,"line_start":1175,"line_end":1175,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472935,"byte_end":472940,"line_start":1176,"line_end":1176,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472942,"byte_end":472945,"line_start":1177,"line_end":1177,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472947,"byte_end":472952,"line_start":1178,"line_end":1178,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472954,"byte_end":472994,"line_start":1179,"line_end":1179,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472996,"byte_end":473032,"line_start":1180,"line_end":1180,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473034,"byte_end":473077,"line_start":1181,"line_end":1181,"column_start":2,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473079,"byte_end":473084,"line_start":1182,"line_end":1182,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473086,"byte_end":473089,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473091,"byte_end":473096,"line_start":1184,"line_end":1184,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(6);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473098,"byte_end":473138,"line_start":1185,"line_end":1185,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, v);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473140,"byte_end":473166,"line_start":1186,"line_end":1186,"column_start":2,"column_end":28}},{"value":"/   assert_eq!(right, bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473168,"byte_end":473201,"line_start":1187,"line_end":1187,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473203,"byte_end":473208,"line_start":1188,"line_end":1188,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473210,"byte_end":473217,"line_start":1189,"line_end":1189,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473219,"byte_end":473228,"line_start":1190,"line_end":1190,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475837,"byte_end":475849,"line_start":1264,"line_end":1264,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473419,"byte_end":473470,"line_start":1197,"line_end":1197,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473472,"byte_end":473475,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473477,"byte_end":473552,"line_start":1199,"line_end":1199,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473554,"byte_end":473629,"line_start":1200,"line_end":1200,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473631,"byte_end":473670,"line_start":1201,"line_end":1201,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473672,"byte_end":473675,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473677,"byte_end":473691,"line_start":1203,"line_end":1203,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473693,"byte_end":473696,"line_start":1204,"line_end":1204,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473698,"byte_end":473804,"line_start":1205,"line_end":1205,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473806,"byte_end":473809,"line_start":1206,"line_end":1206,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473811,"byte_end":473832,"line_start":1207,"line_end":1207,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473834,"byte_end":473837,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ The partition index `mid` may occur anywhere in the slice, and as a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473839,"byte_end":473910,"line_start":1209,"line_end":1209,"column_start":2,"column_end":73}},{"value":"/ result the two returned slices may both have write access to the memory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473912,"byte_end":473987,"line_start":1210,"line_end":1210,"column_start":2,"column_end":77}},{"value":"/ address containing `mid`. As such, the returned slices must be marked","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473989,"byte_end":474062,"line_start":1211,"line_end":1211,"column_start":2,"column_end":75}},{"value":"/ with [`T::Alias`] in order to correctly manage memory access going","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474064,"byte_end":474134,"line_start":1212,"line_end":1212,"column_start":2,"column_end":72}},{"value":"/ forward.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474136,"byte_end":474148,"line_start":1213,"line_end":1213,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474150,"byte_end":474153,"line_start":1214,"line_end":1214,"column_start":2,"column_end":5}},{"value":"/ This marking is applied to all memory accesses in both slices,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474155,"byte_end":474221,"line_start":1215,"line_end":1215,"column_start":2,"column_end":68}},{"value":"/ regardless of whether any future accesses actually require it. To limit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474223,"byte_end":474298,"line_start":1216,"line_end":1216,"column_start":2,"column_end":77}},{"value":"/ the alias marking to only the addresses that need it, use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474300,"byte_end":474361,"line_start":1217,"line_end":1217,"column_start":2,"column_end":63}},{"value":"/ [`.bit_domain()`] or [`.bit_domain_mut()`] to split either slice into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474363,"byte_end":474436,"line_start":1218,"line_end":1218,"column_start":2,"column_end":75}},{"value":"/ its aliased and unaliased subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474438,"byte_end":474478,"line_start":1219,"line_end":1219,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474480,"byte_end":474483,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474485,"byte_end":474497,"line_start":1221,"line_end":1221,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474499,"byte_end":474502,"line_start":1222,"line_end":1222,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474504,"byte_end":474530,"line_start":1223,"line_end":1223,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474532,"byte_end":474535,"line_start":1224,"line_end":1224,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474537,"byte_end":474551,"line_start":1225,"line_end":1225,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474553,"byte_end":474556,"line_start":1226,"line_end":1226,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474558,"byte_end":474634,"line_start":1227,"line_end":1227,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474636,"byte_end":474711,"line_start":1228,"line_end":1228,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474713,"byte_end":474787,"line_start":1229,"line_end":1229,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474789,"byte_end":474862,"line_start":1230,"line_end":1230,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474864,"byte_end":474937,"line_start":1231,"line_end":1231,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474939,"byte_end":474942,"line_start":1232,"line_end":1232,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474944,"byte_end":474958,"line_start":1233,"line_end":1233,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474960,"byte_end":474963,"line_start":1234,"line_end":1234,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474965,"byte_end":474976,"line_start":1235,"line_end":1235,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474978,"byte_end":475005,"line_start":1236,"line_end":1236,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475007,"byte_end":475010,"line_start":1237,"line_end":1237,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475012,"byte_end":475052,"line_start":1238,"line_end":1238,"column_start":2,"column_end":42}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475054,"byte_end":475107,"line_start":1239,"line_end":1239,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475109,"byte_end":475114,"line_start":1240,"line_end":1240,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at_mut(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475116,"byte_end":475160,"line_start":1241,"line_end":1241,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475162,"byte_end":475198,"line_start":1242,"line_end":1242,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475200,"byte_end":475243,"line_start":1243,"line_end":1243,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475245,"byte_end":475248,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/   left.set(1, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475250,"byte_end":475274,"line_start":1245,"line_end":1245,"column_start":2,"column_end":26}},{"value":"/   right.set(1, false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475276,"byte_end":475302,"line_start":1246,"line_end":1246,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475304,"byte_end":475309,"line_start":1247,"line_end":1247,"column_start":2,"column_end":7}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475311,"byte_end":475316,"line_start":1248,"line_end":1248,"column_start":2,"column_end":7}},{"value":"/   let mut v = bits![mut 0; 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475318,"byte_end":475352,"line_start":1249,"line_end":1249,"column_start":2,"column_end":36}},{"value":"/   let (left, right) = v.split_at_mut(0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475354,"byte_end":475398,"line_start":1250,"line_end":1250,"column_start":2,"column_end":46}},{"value":"/   assert!(left.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475400,"byte_end":475431,"line_start":1251,"line_end":1251,"column_start":2,"column_end":33}},{"value":"/   assert!(right.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475433,"byte_end":475465,"line_start":1252,"line_end":1252,"column_start":2,"column_end":34}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475467,"byte_end":475472,"line_start":1253,"line_end":1253,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 0, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475474,"byte_end":475517,"line_start":1254,"line_end":1254,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475519,"byte_end":475526,"line_start":1255,"line_end":1255,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475528,"byte_end":475531,"line_start":1256,"line_end":1256,"column_start":2,"column_end":5}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475533,"byte_end":475580,"line_start":1257,"line_end":1257,"column_start":2,"column_end":49}},{"value":"/ [`.bit_domain`()]: Self::bit_domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475582,"byte_end":475621,"line_start":1258,"line_end":1258,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`()]: Self::bit_domain_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475623,"byte_end":475670,"line_start":1259,"line_end":1259,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475784,"byte_end":475793,"line_start":1262,"line_end":1262,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475795,"byte_end":475828,"line_start":1263,"line_end":1263,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477819,"byte_end":477824,"line_start":1329,"line_end":1329,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476042,"byte_end":476117,"line_start":1272,"line_end":1272,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476119,"byte_end":476173,"line_start":1273,"line_end":1273,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476175,"byte_end":476178,"line_start":1274,"line_end":1274,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476180,"byte_end":476194,"line_start":1275,"line_end":1275,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476196,"byte_end":476199,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476201,"byte_end":476293,"line_start":1277,"line_end":1277,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476295,"byte_end":476298,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476300,"byte_end":476321,"line_start":1279,"line_end":1279,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476323,"byte_end":476326,"line_start":1280,"line_end":1280,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476328,"byte_end":476396,"line_start":1281,"line_end":1281,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476398,"byte_end":476472,"line_start":1282,"line_end":1282,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476474,"byte_end":476484,"line_start":1283,"line_end":1283,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476486,"byte_end":476489,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476491,"byte_end":476505,"line_start":1285,"line_end":1285,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476507,"byte_end":476510,"line_start":1286,"line_end":1286,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476512,"byte_end":476523,"line_start":1287,"line_end":1287,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476525,"byte_end":476552,"line_start":1288,"line_end":1288,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476554,"byte_end":476557,"line_start":1289,"line_end":1289,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476559,"byte_end":476593,"line_start":1290,"line_end":1290,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476595,"byte_end":476652,"line_start":1291,"line_end":1291,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476654,"byte_end":476657,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476659,"byte_end":476709,"line_start":1293,"line_end":1293,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476711,"byte_end":476758,"line_start":1294,"line_end":1294,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476760,"byte_end":476795,"line_start":1295,"line_end":1295,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476797,"byte_end":476804,"line_start":1296,"line_end":1296,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476806,"byte_end":476809,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476811,"byte_end":476881,"line_start":1298,"line_end":1298,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last bit in the slice is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476883,"byte_end":476955,"line_start":1299,"line_end":1299,"column_start":2,"column_end":74}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476957,"byte_end":477032,"line_start":1300,"line_end":1300,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477034,"byte_end":477037,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477039,"byte_end":477050,"line_start":1302,"line_end":1302,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477052,"byte_end":477079,"line_start":1303,"line_end":1303,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477081,"byte_end":477084,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477086,"byte_end":477117,"line_start":1305,"line_end":1305,"column_start":2,"column_end":33}},{"value":"/ let mut iter = slice.split(|_pos, bit| *bit);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477119,"byte_end":477168,"line_start":1306,"line_end":1306,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477170,"byte_end":477173,"line_start":1307,"line_end":1307,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477175,"byte_end":477225,"line_start":1308,"line_end":1308,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477227,"byte_end":477273,"line_start":1309,"line_end":1309,"column_start":2,"column_end":48}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477275,"byte_end":477310,"line_start":1310,"line_end":1310,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477312,"byte_end":477319,"line_start":1311,"line_end":1311,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477321,"byte_end":477324,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477326,"byte_end":477395,"line_start":1313,"line_end":1313,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477397,"byte_end":477422,"line_start":1314,"line_end":1314,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477424,"byte_end":477427,"line_start":1315,"line_end":1315,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477429,"byte_end":477440,"line_start":1316,"line_end":1316,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477442,"byte_end":477469,"line_start":1317,"line_end":1317,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477471,"byte_end":477474,"line_start":1318,"line_end":1318,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477476,"byte_end":477510,"line_start":1319,"line_end":1319,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|_pos, bit| !*bit);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477512,"byte_end":477562,"line_start":1320,"line_end":1320,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477564,"byte_end":477567,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477569,"byte_end":477616,"line_start":1322,"line_end":1322,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477618,"byte_end":477664,"line_start":1323,"line_end":1323,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477666,"byte_end":477713,"line_start":1324,"line_end":1324,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477715,"byte_end":477750,"line_start":1325,"line_end":1325,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477752,"byte_end":477759,"line_start":1326,"line_end":1326,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477761,"byte_end":477778,"line_start":1327,"line_end":1327,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477780,"byte_end":477810,"line_start":1328,"line_end":1328,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479129,"byte_end":479138,"line_start":1368,"line_end":1368,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477932,"byte_end":478007,"line_start":1334,"line_end":1334,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478009,"byte_end":478071,"line_start":1335,"line_end":1335,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478073,"byte_end":478076,"line_start":1336,"line_end":1336,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478078,"byte_end":478092,"line_start":1337,"line_end":1337,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478094,"byte_end":478097,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478099,"byte_end":478199,"line_start":1339,"line_end":1339,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478201,"byte_end":478204,"line_start":1340,"line_end":1340,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478206,"byte_end":478227,"line_start":1341,"line_end":1341,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478229,"byte_end":478232,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478234,"byte_end":478302,"line_start":1343,"line_end":1343,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478304,"byte_end":478378,"line_start":1344,"line_end":1344,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478380,"byte_end":478390,"line_start":1345,"line_end":1345,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478392,"byte_end":478395,"line_start":1346,"line_end":1346,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478397,"byte_end":478470,"line_start":1347,"line_end":1347,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478472,"byte_end":478542,"line_start":1348,"line_end":1348,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478544,"byte_end":478613,"line_start":1349,"line_end":1349,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478615,"byte_end":478691,"line_start":1350,"line_end":1350,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478693,"byte_end":478748,"line_start":1351,"line_end":1351,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478750,"byte_end":478753,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478755,"byte_end":478769,"line_start":1353,"line_end":1353,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478771,"byte_end":478774,"line_start":1354,"line_end":1354,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478776,"byte_end":478787,"line_start":1355,"line_end":1355,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478789,"byte_end":478816,"line_start":1356,"line_end":1356,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478818,"byte_end":478821,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478823,"byte_end":478863,"line_start":1358,"line_end":1358,"column_start":2,"column_end":42}},{"value":"/ for group in v.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478865,"byte_end":478913,"line_start":1359,"line_end":1359,"column_start":2,"column_end":50}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478915,"byte_end":478940,"line_start":1360,"line_end":1360,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478942,"byte_end":478947,"line_start":1361,"line_end":1361,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478949,"byte_end":478992,"line_start":1362,"line_end":1362,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478994,"byte_end":479001,"line_start":1363,"line_end":1363,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479003,"byte_end":479006,"line_start":1364,"line_end":1364,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479008,"byte_end":479069,"line_start":1365,"line_end":1365,"column_start":2,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479071,"byte_end":479088,"line_start":1366,"line_end":1366,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479090,"byte_end":479120,"line_start":1367,"line_end":1367,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480715,"byte_end":480721,"line_start":1418,"line_end":1418,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479268,"byte_end":479343,"line_start":1373,"line_end":1373,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479345,"byte_end":479420,"line_start":1374,"line_end":1374,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479422,"byte_end":479460,"line_start":1375,"line_end":1375,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479462,"byte_end":479465,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479467,"byte_end":479481,"line_start":1377,"line_end":1377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479483,"byte_end":479486,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479488,"byte_end":479582,"line_start":1379,"line_end":1379,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479584,"byte_end":479587,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479589,"byte_end":479610,"line_start":1381,"line_end":1381,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479612,"byte_end":479615,"line_start":1382,"line_end":1382,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479617,"byte_end":479685,"line_start":1383,"line_end":1383,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479687,"byte_end":479761,"line_start":1384,"line_end":1384,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479763,"byte_end":479773,"line_start":1385,"line_end":1385,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479775,"byte_end":479778,"line_start":1386,"line_end":1386,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479780,"byte_end":479794,"line_start":1387,"line_end":1387,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479796,"byte_end":479799,"line_start":1388,"line_end":1388,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479801,"byte_end":479812,"line_start":1389,"line_end":1389,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479814,"byte_end":479841,"line_start":1390,"line_end":1390,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479843,"byte_end":479846,"line_start":1391,"line_end":1391,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 1, 1, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479848,"byte_end":479888,"line_start":1392,"line_end":1392,"column_start":2,"column_end":42}},{"value":"/ let mut iter = slice.rsplit(|_pos, bit| !*bit);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479890,"byte_end":479941,"line_start":1393,"line_end":1393,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479943,"byte_end":479946,"line_start":1394,"line_end":1394,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479948,"byte_end":479998,"line_start":1395,"line_end":1395,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 3]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480000,"byte_end":480050,"line_start":1396,"line_end":1396,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480052,"byte_end":480087,"line_start":1397,"line_end":1397,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480089,"byte_end":480096,"line_start":1398,"line_end":1398,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480098,"byte_end":480101,"line_start":1399,"line_end":1399,"column_start":2,"column_end":5}},{"value":"/ As with [`.split()`], if the first or last bit is matched, an empty","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480103,"byte_end":480174,"line_start":1400,"line_end":1400,"column_start":2,"column_end":73}},{"value":"/ slice will be the first (or last) item returned by the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480176,"byte_end":480244,"line_start":1401,"line_end":1401,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480246,"byte_end":480249,"line_start":1402,"line_end":1402,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480251,"byte_end":480262,"line_start":1403,"line_end":1403,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480264,"byte_end":480291,"line_start":1404,"line_end":1404,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480293,"byte_end":480296,"line_start":1405,"line_end":1405,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0, 1, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480298,"byte_end":480337,"line_start":1406,"line_end":1406,"column_start":2,"column_end":41}},{"value":"/ let mut it = v.rsplit(|_pos, bit| *bit);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480339,"byte_end":480383,"line_start":1407,"line_end":1407,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480385,"byte_end":480429,"line_start":1408,"line_end":1408,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480431,"byte_end":480479,"line_start":1409,"line_end":1409,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480481,"byte_end":480529,"line_start":1410,"line_end":1410,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480531,"byte_end":480575,"line_start":1411,"line_end":1411,"column_start":2,"column_end":46}},{"value":"/ assert!(it.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480577,"byte_end":480610,"line_start":1412,"line_end":1412,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480612,"byte_end":480619,"line_start":1413,"line_end":1413,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480621,"byte_end":480624,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480626,"byte_end":480655,"line_start":1415,"line_end":1415,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480657,"byte_end":480674,"line_start":1416,"line_end":1416,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480676,"byte_end":480706,"line_start":1417,"line_end":1417,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482093,"byte_end":482103,"line_start":1458,"line_end":1458,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480831,"byte_end":480906,"line_start":1423,"line_end":1423,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480908,"byte_end":480979,"line_start":1424,"line_end":1424,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480981,"byte_end":481031,"line_start":1425,"line_end":1425,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481033,"byte_end":481036,"line_start":1426,"line_end":1426,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481038,"byte_end":481052,"line_start":1427,"line_end":1427,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481054,"byte_end":481057,"line_start":1428,"line_end":1428,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481059,"byte_end":481161,"line_start":1429,"line_end":1429,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481163,"byte_end":481166,"line_start":1430,"line_end":1430,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481168,"byte_end":481189,"line_start":1431,"line_end":1431,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481191,"byte_end":481194,"line_start":1432,"line_end":1432,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481196,"byte_end":481264,"line_start":1433,"line_end":1433,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481266,"byte_end":481340,"line_start":1434,"line_end":1434,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481342,"byte_end":481352,"line_start":1435,"line_end":1435,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481354,"byte_end":481357,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481359,"byte_end":481432,"line_start":1437,"line_end":1437,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481434,"byte_end":481504,"line_start":1438,"line_end":1438,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481506,"byte_end":481575,"line_start":1439,"line_end":1439,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481577,"byte_end":481653,"line_start":1440,"line_end":1440,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481655,"byte_end":481710,"line_start":1441,"line_end":1441,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481712,"byte_end":481715,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481717,"byte_end":481731,"line_start":1443,"line_end":1443,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481733,"byte_end":481736,"line_start":1444,"line_end":1444,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481738,"byte_end":481749,"line_start":1445,"line_end":1445,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481751,"byte_end":481778,"line_start":1446,"line_end":1446,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481780,"byte_end":481783,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481785,"byte_end":481825,"line_start":1448,"line_end":1448,"column_start":2,"column_end":42}},{"value":"/ for group in v.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481827,"byte_end":481876,"line_start":1449,"line_end":1449,"column_start":2,"column_end":51}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481878,"byte_end":481903,"line_start":1450,"line_end":1450,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481905,"byte_end":481910,"line_start":1451,"line_end":1451,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481912,"byte_end":481955,"line_start":1452,"line_end":1452,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481957,"byte_end":481964,"line_start":1453,"line_end":1453,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481966,"byte_end":481969,"line_start":1454,"line_end":1454,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481971,"byte_end":482033,"line_start":1455,"line_end":1455,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482035,"byte_end":482052,"line_start":1456,"line_end":1456,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482054,"byte_end":482084,"line_start":1457,"line_end":1457,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483208,"byte_end":483214,"line_start":1496,"line_end":1496,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482235,"byte_end":482310,"line_start":1463,"line_end":1463,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482312,"byte_end":482388,"line_start":1464,"line_end":1464,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482390,"byte_end":482411,"line_start":1465,"line_end":1465,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482413,"byte_end":482416,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482418,"byte_end":482494,"line_start":1467,"line_end":1467,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482496,"byte_end":482499,"line_start":1468,"line_end":1468,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482501,"byte_end":482515,"line_start":1469,"line_end":1469,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482517,"byte_end":482520,"line_start":1470,"line_end":1470,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482522,"byte_end":482616,"line_start":1471,"line_end":1471,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482618,"byte_end":482621,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482623,"byte_end":482644,"line_start":1473,"line_end":1473,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482646,"byte_end":482649,"line_start":1474,"line_end":1474,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482651,"byte_end":482719,"line_start":1475,"line_end":1475,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482721,"byte_end":482795,"line_start":1476,"line_end":1476,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482797,"byte_end":482807,"line_start":1477,"line_end":1477,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482809,"byte_end":482812,"line_start":1478,"line_end":1478,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482814,"byte_end":482828,"line_start":1479,"line_end":1479,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482830,"byte_end":482833,"line_start":1480,"line_end":1480,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once by set bits (i.e., `[0, 0,]`, `[0, 1, 0]`):","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482835,"byte_end":482909,"line_start":1481,"line_end":1481,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482911,"byte_end":482914,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482916,"byte_end":482927,"line_start":1483,"line_end":1483,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482929,"byte_end":482956,"line_start":1484,"line_end":1484,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482958,"byte_end":482961,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482963,"byte_end":482999,"line_start":1486,"line_end":1486,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483001,"byte_end":483004,"line_start":1487,"line_end":1487,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483006,"byte_end":483054,"line_start":1488,"line_end":1488,"column_start":2,"column_end":50}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483056,"byte_end":483089,"line_start":1489,"line_end":1489,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483091,"byte_end":483121,"line_start":1490,"line_end":1490,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483123,"byte_end":483132,"line_start":1491,"line_end":1491,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483134,"byte_end":483139,"line_start":1492,"line_end":1492,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483141,"byte_end":483148,"line_start":1493,"line_end":1493,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483150,"byte_end":483167,"line_start":1494,"line_end":1494,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483169,"byte_end":483199,"line_start":1495,"line_end":1495,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484666,"byte_end":484676,"line_start":1539,"line_end":1539,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483337,"byte_end":483412,"line_start":1501,"line_end":1501,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483414,"byte_end":483490,"line_start":1502,"line_end":1502,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483492,"byte_end":483513,"line_start":1503,"line_end":1503,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483515,"byte_end":483518,"line_start":1504,"line_end":1504,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483520,"byte_end":483596,"line_start":1505,"line_end":1505,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483598,"byte_end":483601,"line_start":1506,"line_end":1506,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483603,"byte_end":483617,"line_start":1507,"line_end":1507,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483619,"byte_end":483622,"line_start":1508,"line_end":1508,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483624,"byte_end":483726,"line_start":1509,"line_end":1509,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483728,"byte_end":483731,"line_start":1510,"line_end":1510,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483733,"byte_end":483754,"line_start":1511,"line_end":1511,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483756,"byte_end":483759,"line_start":1512,"line_end":1512,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483761,"byte_end":483829,"line_start":1513,"line_end":1513,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483831,"byte_end":483905,"line_start":1514,"line_end":1514,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483907,"byte_end":483917,"line_start":1515,"line_end":1515,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483919,"byte_end":483922,"line_start":1516,"line_end":1516,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483924,"byte_end":483997,"line_start":1517,"line_end":1517,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483999,"byte_end":484069,"line_start":1518,"line_end":1518,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484071,"byte_end":484140,"line_start":1519,"line_end":1519,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484142,"byte_end":484218,"line_start":1520,"line_end":1520,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484220,"byte_end":484275,"line_start":1521,"line_end":1521,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484277,"byte_end":484280,"line_start":1522,"line_end":1522,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484282,"byte_end":484296,"line_start":1523,"line_end":1523,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484298,"byte_end":484301,"line_start":1524,"line_end":1524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484303,"byte_end":484314,"line_start":1525,"line_end":1525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484316,"byte_end":484343,"line_start":1526,"line_end":1526,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484345,"byte_end":484348,"line_start":1527,"line_end":1527,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484350,"byte_end":484390,"line_start":1528,"line_end":1528,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484392,"byte_end":484395,"line_start":1529,"line_end":1529,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484397,"byte_end":484449,"line_start":1530,"line_end":1530,"column_start":2,"column_end":54}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484451,"byte_end":484476,"line_start":1531,"line_end":1531,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484478,"byte_end":484483,"line_start":1532,"line_end":1532,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484485,"byte_end":484528,"line_start":1533,"line_end":1533,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484530,"byte_end":484537,"line_start":1534,"line_end":1534,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484539,"byte_end":484542,"line_start":1535,"line_end":1535,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitNMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484544,"byte_end":484606,"line_start":1536,"line_end":1536,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484608,"byte_end":484625,"line_start":1537,"line_end":1537,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484627,"byte_end":484657,"line_start":1538,"line_end":1538,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485887,"byte_end":485894,"line_start":1579,"line_end":1579,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484821,"byte_end":484896,"line_start":1544,"line_end":1544,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484898,"byte_end":484971,"line_start":1545,"line_end":1545,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484973,"byte_end":485043,"line_start":1546,"line_end":1546,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485045,"byte_end":485059,"line_start":1547,"line_end":1547,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485061,"byte_end":485064,"line_start":1548,"line_end":1548,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485066,"byte_end":485142,"line_start":1549,"line_end":1549,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485144,"byte_end":485147,"line_start":1550,"line_end":1550,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485149,"byte_end":485163,"line_start":1551,"line_end":1551,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485165,"byte_end":485168,"line_start":1552,"line_end":1552,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485170,"byte_end":485266,"line_start":1553,"line_end":1553,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485268,"byte_end":485271,"line_start":1554,"line_end":1554,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485273,"byte_end":485294,"line_start":1555,"line_end":1555,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485296,"byte_end":485299,"line_start":1556,"line_end":1556,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485301,"byte_end":485369,"line_start":1557,"line_end":1557,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485371,"byte_end":485445,"line_start":1558,"line_end":1558,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485447,"byte_end":485457,"line_start":1559,"line_end":1559,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485459,"byte_end":485462,"line_start":1560,"line_end":1560,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485464,"byte_end":485478,"line_start":1561,"line_end":1561,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485480,"byte_end":485483,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once, starting from the end, by set bits (i.e.,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485485,"byte_end":485558,"line_start":1563,"line_end":1563,"column_start":2,"column_end":75}},{"value":"/ `[0]`, `[0, 0, 1, 0]`):","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485560,"byte_end":485587,"line_start":1564,"line_end":1564,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485589,"byte_end":485592,"line_start":1565,"line_end":1565,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485594,"byte_end":485605,"line_start":1566,"line_end":1566,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485607,"byte_end":485634,"line_start":1567,"line_end":1567,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485636,"byte_end":485639,"line_start":1568,"line_end":1568,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485641,"byte_end":485677,"line_start":1569,"line_end":1569,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485679,"byte_end":485682,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485684,"byte_end":485733,"line_start":1571,"line_end":1571,"column_start":2,"column_end":51}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485735,"byte_end":485768,"line_start":1572,"line_end":1572,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485770,"byte_end":485800,"line_start":1573,"line_end":1573,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485802,"byte_end":485811,"line_start":1574,"line_end":1574,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485813,"byte_end":485818,"line_start":1575,"line_end":1575,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485820,"byte_end":485827,"line_start":1576,"line_end":1576,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485829,"byte_end":485846,"line_start":1577,"line_end":1577,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485848,"byte_end":485878,"line_start":1578,"line_end":1578,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487414,"byte_end":487425,"line_start":1623,"line_end":1623,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486019,"byte_end":486094,"line_start":1584,"line_end":1584,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486096,"byte_end":486169,"line_start":1585,"line_end":1585,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486171,"byte_end":486241,"line_start":1586,"line_end":1586,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486243,"byte_end":486257,"line_start":1587,"line_end":1587,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486259,"byte_end":486262,"line_start":1588,"line_end":1588,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486264,"byte_end":486340,"line_start":1589,"line_end":1589,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486342,"byte_end":486345,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486347,"byte_end":486361,"line_start":1591,"line_end":1591,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486363,"byte_end":486366,"line_start":1592,"line_end":1592,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486368,"byte_end":486472,"line_start":1593,"line_end":1593,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486474,"byte_end":486477,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486479,"byte_end":486500,"line_start":1595,"line_end":1595,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486502,"byte_end":486505,"line_start":1596,"line_end":1596,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486507,"byte_end":486575,"line_start":1597,"line_end":1597,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486577,"byte_end":486651,"line_start":1598,"line_end":1598,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486653,"byte_end":486663,"line_start":1599,"line_end":1599,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486665,"byte_end":486668,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486670,"byte_end":486743,"line_start":1601,"line_end":1601,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486745,"byte_end":486815,"line_start":1602,"line_end":1602,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486817,"byte_end":486886,"line_start":1603,"line_end":1603,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486888,"byte_end":486964,"line_start":1604,"line_end":1604,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486966,"byte_end":487021,"line_start":1605,"line_end":1605,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487023,"byte_end":487026,"line_start":1606,"line_end":1606,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487028,"byte_end":487042,"line_start":1607,"line_end":1607,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487044,"byte_end":487047,"line_start":1608,"line_end":1608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487049,"byte_end":487060,"line_start":1609,"line_end":1609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487062,"byte_end":487089,"line_start":1610,"line_end":1610,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487091,"byte_end":487094,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487096,"byte_end":487136,"line_start":1612,"line_end":1612,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487138,"byte_end":487141,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487143,"byte_end":487196,"line_start":1614,"line_end":1614,"column_start":2,"column_end":55}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487198,"byte_end":487223,"line_start":1615,"line_end":1615,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487225,"byte_end":487230,"line_start":1616,"line_end":1616,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487232,"byte_end":487275,"line_start":1617,"line_end":1617,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487277,"byte_end":487284,"line_start":1618,"line_end":1618,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487286,"byte_end":487289,"line_start":1619,"line_end":1619,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitNMut::remove_alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487291,"byte_end":487354,"line_start":1620,"line_end":1620,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487356,"byte_end":487373,"line_start":1621,"line_end":1621,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487375,"byte_end":487405,"line_start":1622,"line_end":1622,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488724,"byte_end":488732,"line_start":1663,"line_end":1663,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487572,"byte_end":487646,"line_start":1628,"line_end":1628,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487648,"byte_end":487657,"line_start":1629,"line_end":1629,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487659,"byte_end":487662,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487664,"byte_end":487678,"line_start":1631,"line_end":1631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487680,"byte_end":487683,"line_start":1632,"line_end":1632,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.contains)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487685,"byte_end":487783,"line_start":1633,"line_end":1633,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487785,"byte_end":487788,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487790,"byte_end":487811,"line_start":1635,"line_end":1635,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487813,"byte_end":487816,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487818,"byte_end":487884,"line_start":1637,"line_end":1637,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487886,"byte_end":487959,"line_start":1638,"line_end":1638,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487961,"byte_end":488035,"line_start":1639,"line_end":1639,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488037,"byte_end":488040,"line_start":1640,"line_end":1640,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488042,"byte_end":488112,"line_start":1641,"line_end":1641,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488114,"byte_end":488187,"line_start":1642,"line_end":1642,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488189,"byte_end":488202,"line_start":1643,"line_end":1643,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488204,"byte_end":488207,"line_start":1644,"line_end":1644,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488209,"byte_end":488223,"line_start":1645,"line_end":1645,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488225,"byte_end":488228,"line_start":1646,"line_end":1646,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488230,"byte_end":488241,"line_start":1647,"line_end":1647,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488243,"byte_end":488270,"line_start":1648,"line_end":1648,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488272,"byte_end":488275,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488277,"byte_end":488306,"line_start":1650,"line_end":1650,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488308,"byte_end":488352,"line_start":1651,"line_end":1651,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488354,"byte_end":488398,"line_start":1652,"line_end":1652,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488400,"byte_end":488450,"line_start":1653,"line_end":1653,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488452,"byte_end":488459,"line_start":1654,"line_end":1654,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488461,"byte_end":488464,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488466,"byte_end":488538,"line_start":1656,"line_end":1656,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488540,"byte_end":488616,"line_start":1657,"line_end":1657,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488618,"byte_end":488643,"line_start":1658,"line_end":1658,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488645,"byte_end":488648,"line_start":1659,"line_end":1659,"column_start":2,"column_end":5}},{"value":"/ [`any`]: Self::any","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488650,"byte_end":488672,"line_start":1660,"line_end":1660,"column_start":2,"column_end":24}},{"value":"/ [`not_all`]: Self::not_all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488674,"byte_end":488704,"line_start":1661,"line_end":1661,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488706,"byte_end":488715,"line_start":1662,"line_end":1662,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489665,"byte_end":489676,"line_start":1704,"line_end":1704,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488928,"byte_end":488984,"line_start":1675,"line_end":1675,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488986,"byte_end":488989,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488991,"byte_end":489005,"line_start":1677,"line_end":1677,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489007,"byte_end":489010,"line_start":1678,"line_end":1678,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489012,"byte_end":489116,"line_start":1679,"line_end":1679,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489118,"byte_end":489121,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489123,"byte_end":489137,"line_start":1681,"line_end":1681,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489139,"byte_end":489142,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489144,"byte_end":489155,"line_start":1683,"line_end":1683,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489157,"byte_end":489184,"line_start":1684,"line_end":1684,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489186,"byte_end":489189,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489191,"byte_end":489221,"line_start":1686,"line_end":1686,"column_start":2,"column_end":32}},{"value":"/ assert!(v.starts_with(bits![0]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489223,"byte_end":489260,"line_start":1687,"line_end":1687,"column_start":2,"column_end":39}},{"value":"/ assert!(v.starts_with(bits![0, 1]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489262,"byte_end":489302,"line_start":1688,"line_end":1688,"column_start":2,"column_end":42}},{"value":"/ assert!(!v.starts_with(bits![1]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489304,"byte_end":489342,"line_start":1689,"line_end":1689,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.starts_with(bits![1, 0]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489344,"byte_end":489385,"line_start":1690,"line_end":1690,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489387,"byte_end":489394,"line_start":1691,"line_end":1691,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489396,"byte_end":489399,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489401,"byte_end":489457,"line_start":1693,"line_end":1693,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489459,"byte_end":489462,"line_start":1694,"line_end":1694,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489464,"byte_end":489475,"line_start":1695,"line_end":1695,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489477,"byte_end":489504,"line_start":1696,"line_end":1696,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489506,"byte_end":489509,"line_start":1697,"line_end":1697,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489511,"byte_end":489538,"line_start":1698,"line_end":1698,"column_start":2,"column_end":29}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489540,"byte_end":489576,"line_start":1699,"line_end":1699,"column_start":2,"column_end":38}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489578,"byte_end":489598,"line_start":1700,"line_end":1700,"column_start":2,"column_end":22}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489600,"byte_end":489636,"line_start":1701,"line_end":1701,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489638,"byte_end":489645,"line_start":1702,"line_end":1702,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489647,"byte_end":489656,"line_start":1703,"line_end":1703,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490592,"byte_end":490601,"line_start":1742,"line_end":1742,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489871,"byte_end":489927,"line_start":1713,"line_end":1713,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489929,"byte_end":489932,"line_start":1714,"line_end":1714,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489934,"byte_end":489948,"line_start":1715,"line_end":1715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489950,"byte_end":489953,"line_start":1716,"line_end":1716,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489955,"byte_end":490055,"line_start":1717,"line_end":1717,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490057,"byte_end":490060,"line_start":1718,"line_end":1718,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490062,"byte_end":490076,"line_start":1719,"line_end":1719,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490078,"byte_end":490081,"line_start":1720,"line_end":1720,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490083,"byte_end":490094,"line_start":1721,"line_end":1721,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490096,"byte_end":490123,"line_start":1722,"line_end":1722,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490125,"byte_end":490128,"line_start":1723,"line_end":1723,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490130,"byte_end":490160,"line_start":1724,"line_end":1724,"column_start":2,"column_end":32}},{"value":"/ assert!(v.ends_with(bits![0]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490162,"byte_end":490197,"line_start":1725,"line_end":1725,"column_start":2,"column_end":37}},{"value":"/ assert!(v.ends_with(bits![0; 2]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490199,"byte_end":490237,"line_start":1726,"line_end":1726,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.ends_with(bits![1]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490239,"byte_end":490275,"line_start":1727,"line_end":1727,"column_start":2,"column_end":38}},{"value":"/ assert!(!v.ends_with(bits![1, 0]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490277,"byte_end":490316,"line_start":1728,"line_end":1728,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490318,"byte_end":490325,"line_start":1729,"line_end":1729,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490327,"byte_end":490330,"line_start":1730,"line_end":1730,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490332,"byte_end":490388,"line_start":1731,"line_end":1731,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490390,"byte_end":490393,"line_start":1732,"line_end":1732,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490395,"byte_end":490406,"line_start":1733,"line_end":1733,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490408,"byte_end":490435,"line_start":1734,"line_end":1734,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490437,"byte_end":490440,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490442,"byte_end":490469,"line_start":1736,"line_end":1736,"column_start":2,"column_end":29}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490471,"byte_end":490505,"line_start":1737,"line_end":1737,"column_start":2,"column_end":36}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490507,"byte_end":490527,"line_start":1738,"line_end":1738,"column_start":2,"column_end":22}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490529,"byte_end":490563,"line_start":1739,"line_end":1739,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490565,"byte_end":490572,"line_start":1740,"line_end":1740,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490574,"byte_end":490583,"line_start":1741,"line_end":1741,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491913,"byte_end":491924,"line_start":1792,"line_end":1792,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the\n front. After calling `.rotate_left()`, the bit previously at index `by`\n will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490822,"byte_end":490895,"line_start":1752,"line_end":1752,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490897,"byte_end":490966,"line_start":1753,"line_end":1753,"column_start":2,"column_end":71}},{"value":"/ front. After calling `.rotate_left()`, the bit previously at index `by`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490968,"byte_end":491043,"line_start":1754,"line_end":1754,"column_start":2,"column_end":77}},{"value":"/ will become the first bit in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491045,"byte_end":491088,"line_start":1755,"line_end":1755,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491090,"byte_end":491093,"line_start":1756,"line_end":1756,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491095,"byte_end":491109,"line_start":1757,"line_end":1757,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491111,"byte_end":491114,"line_start":1758,"line_end":1758,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_left)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491116,"byte_end":491213,"line_start":1759,"line_end":1759,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491215,"byte_end":491218,"line_start":1760,"line_end":1760,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491220,"byte_end":491232,"line_start":1761,"line_end":1761,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491234,"byte_end":491237,"line_start":1762,"line_end":1762,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491239,"byte_end":491309,"line_start":1763,"line_end":1763,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491311,"byte_end":491383,"line_start":1764,"line_end":1764,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491385,"byte_end":491388,"line_start":1765,"line_end":1765,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491390,"byte_end":491406,"line_start":1766,"line_end":1766,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491408,"byte_end":491411,"line_start":1767,"line_end":1767,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491413,"byte_end":491455,"line_start":1768,"line_end":1768,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491457,"byte_end":491460,"line_start":1769,"line_end":1769,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491462,"byte_end":491476,"line_start":1770,"line_end":1770,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491478,"byte_end":491481,"line_start":1771,"line_end":1771,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491483,"byte_end":491494,"line_start":1772,"line_end":1772,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491496,"byte_end":491523,"line_start":1773,"line_end":1773,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491525,"byte_end":491528,"line_start":1774,"line_end":1774,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491530,"byte_end":491570,"line_start":1775,"line_end":1775,"column_start":2,"column_end":42}},{"value":"/ a.rotate_left(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491572,"byte_end":491593,"line_start":1776,"line_end":1776,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(a, bits![1, 0, 1, 0, 0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491595,"byte_end":491638,"line_start":1777,"line_end":1777,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491640,"byte_end":491647,"line_start":1778,"line_end":1778,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491649,"byte_end":491652,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491654,"byte_end":491678,"line_start":1780,"line_end":1780,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491680,"byte_end":491683,"line_start":1781,"line_end":1781,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491685,"byte_end":491696,"line_start":1782,"line_end":1782,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491698,"byte_end":491725,"line_start":1783,"line_end":1783,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491727,"byte_end":491730,"line_start":1784,"line_end":1784,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491732,"byte_end":491772,"line_start":1785,"line_end":1785,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_left(1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491774,"byte_end":491803,"line_start":1786,"line_end":1786,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491805,"byte_end":491848,"line_start":1787,"line_end":1787,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491850,"byte_end":491857,"line_start":1788,"line_end":1788,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491859,"byte_end":491862,"line_start":1789,"line_end":1789,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491864,"byte_end":491893,"line_start":1790,"line_end":1790,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491895,"byte_end":491904,"line_start":1791,"line_end":1791,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494254,"byte_end":494266,"line_start":1867,"line_end":1867,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `.rotate_right()`, the bit previously at index `self.len()\n - by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493145,"byte_end":493221,"line_start":1827,"line_end":1827,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493223,"byte_end":493296,"line_start":1828,"line_end":1828,"column_start":2,"column_end":75}},{"value":"/ After calling `.rotate_right()`, the bit previously at index `self.len()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493298,"byte_end":493374,"line_start":1829,"line_end":1829,"column_start":2,"column_end":78}},{"value":"/ - by` will become the first bit in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493376,"byte_end":493425,"line_start":1830,"line_end":1830,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493427,"byte_end":493430,"line_start":1831,"line_end":1831,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493432,"byte_end":493446,"line_start":1832,"line_end":1832,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493448,"byte_end":493451,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_right)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493453,"byte_end":493552,"line_start":1834,"line_end":1834,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493554,"byte_end":493557,"line_start":1835,"line_end":1835,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493559,"byte_end":493571,"line_start":1836,"line_end":1836,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493573,"byte_end":493576,"line_start":1837,"line_end":1837,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493578,"byte_end":493648,"line_start":1838,"line_end":1838,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493650,"byte_end":493722,"line_start":1839,"line_end":1839,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493724,"byte_end":493727,"line_start":1840,"line_end":1840,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493729,"byte_end":493745,"line_start":1841,"line_end":1841,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493747,"byte_end":493750,"line_start":1842,"line_end":1842,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493752,"byte_end":493794,"line_start":1843,"line_end":1843,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493796,"byte_end":493799,"line_start":1844,"line_end":1844,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493801,"byte_end":493815,"line_start":1845,"line_end":1845,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493817,"byte_end":493820,"line_start":1846,"line_end":1846,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493822,"byte_end":493833,"line_start":1847,"line_end":1847,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493835,"byte_end":493862,"line_start":1848,"line_end":1848,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493864,"byte_end":493867,"line_start":1849,"line_end":1849,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493869,"byte_end":493909,"line_start":1850,"line_end":1850,"column_start":2,"column_end":42}},{"value":"/ a.rotate_right(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493911,"byte_end":493933,"line_start":1851,"line_end":1851,"column_start":2,"column_end":24}},{"value":"/ assert_eq!(a, bits![1, 0, 0, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493935,"byte_end":493978,"line_start":1852,"line_end":1852,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493980,"byte_end":493987,"line_start":1853,"line_end":1853,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493989,"byte_end":493992,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493994,"byte_end":494018,"line_start":1855,"line_end":1855,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494020,"byte_end":494023,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494025,"byte_end":494036,"line_start":1857,"line_end":1857,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494038,"byte_end":494065,"line_start":1858,"line_end":1858,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494067,"byte_end":494070,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494072,"byte_end":494112,"line_start":1860,"line_end":1860,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_right(1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494114,"byte_end":494144,"line_start":1861,"line_end":1861,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494146,"byte_end":494189,"line_start":1862,"line_end":1862,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494191,"byte_end":494198,"line_start":1863,"line_end":1863,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494200,"byte_end":494203,"line_start":1864,"line_end":1864,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494205,"byte_end":494234,"line_start":1865,"line_end":1865,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494236,"byte_end":494245,"line_start":1866,"line_end":1866,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495026,"byte_end":495042,"line_start":1895,"line_end":1895,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494897,"byte_end":494914,"line_start":1892,"line_end":1892,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494916,"byte_end":494946,"line_start":1893,"line_end":1893,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `clone_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494948,"byte_end":495017,"line_start":1894,"line_end":1894,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495309,"byte_end":495324,"line_start":1907,"line_end":1907,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495181,"byte_end":495198,"line_start":1904,"line_end":1904,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495200,"byte_end":495230,"line_start":1905,"line_end":1905,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `copy_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495232,"byte_end":495300,"line_start":1906,"line_end":1906,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496374,"byte_end":496385,"line_start":1943,"line_end":1943,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495386,"byte_end":495455,"line_start":1911,"line_end":1911,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495457,"byte_end":495460,"line_start":1912,"line_end":1912,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495462,"byte_end":495535,"line_start":1913,"line_end":1913,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495537,"byte_end":495610,"line_start":1914,"line_end":1914,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495612,"byte_end":495687,"line_start":1915,"line_end":1915,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495689,"byte_end":495738,"line_start":1916,"line_end":1916,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495740,"byte_end":495743,"line_start":1917,"line_end":1917,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495745,"byte_end":495759,"line_start":1918,"line_end":1918,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495761,"byte_end":495764,"line_start":1919,"line_end":1919,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495766,"byte_end":495870,"line_start":1920,"line_end":1920,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495872,"byte_end":495875,"line_start":1921,"line_end":1921,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495877,"byte_end":495889,"line_start":1922,"line_end":1922,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495891,"byte_end":495894,"line_start":1923,"line_end":1923,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495896,"byte_end":495970,"line_start":1924,"line_end":1924,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495972,"byte_end":496019,"line_start":1925,"line_end":1925,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496021,"byte_end":496024,"line_start":1926,"line_end":1926,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496026,"byte_end":496040,"line_start":1927,"line_end":1927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496042,"byte_end":496045,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ Copying four bits within a slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496047,"byte_end":496084,"line_start":1929,"line_end":1929,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496086,"byte_end":496089,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496091,"byte_end":496102,"line_start":1931,"line_end":1931,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496104,"byte_end":496131,"line_start":1932,"line_end":1932,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496133,"byte_end":496136,"line_start":1933,"line_end":1933,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496138,"byte_end":496199,"line_start":1934,"line_end":1934,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496201,"byte_end":496204,"line_start":1935,"line_end":1935,"column_start":2,"column_end":5}},{"value":"/ bits.copy_within(1 .. 5, 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496206,"byte_end":496238,"line_start":1936,"line_end":1936,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496240,"byte_end":496243,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496245,"byte_end":496309,"line_start":1938,"line_end":1938,"column_start":2,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496311,"byte_end":496318,"line_start":1939,"line_end":1939,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496320,"byte_end":496323,"line_start":1940,"line_end":1940,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496325,"byte_end":496354,"line_start":1941,"line_end":1941,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496356,"byte_end":496365,"line_start":1942,"line_end":1942,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496936,"byte_end":496951,"line_start":1960,"line_end":1960,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496808,"byte_end":496825,"line_start":1957,"line_end":1957,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496827,"byte_end":496857,"line_start":1958,"line_end":1958,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `swap_with_bitslice` to swap between bitslices\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496859,"byte_end":496927,"line_start":1959,"line_end":1959,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499728,"byte_end":499736,"line_start":2037,"line_end":2037,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497082,"byte_end":497150,"line_start":1968,"line_end":1968,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497152,"byte_end":497193,"line_start":1969,"line_end":1969,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497195,"byte_end":497198,"line_start":1970,"line_end":1970,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497200,"byte_end":497214,"line_start":1971,"line_end":1971,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497216,"byte_end":497219,"line_start":1972,"line_end":1972,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497221,"byte_end":497244,"line_start":1973,"line_end":1973,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497246,"byte_end":497249,"line_start":1974,"line_end":1974,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497251,"byte_end":497272,"line_start":1975,"line_end":1975,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497274,"byte_end":497277,"line_start":1976,"line_end":1976,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497279,"byte_end":497352,"line_start":1977,"line_end":1977,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497354,"byte_end":497429,"line_start":1978,"line_end":1978,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497431,"byte_end":497505,"line_start":1979,"line_end":1979,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497507,"byte_end":497583,"line_start":1980,"line_end":1980,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497585,"byte_end":497656,"line_start":1981,"line_end":1981,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497658,"byte_end":497682,"line_start":1982,"line_end":1982,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497684,"byte_end":497687,"line_start":1983,"line_end":1983,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497689,"byte_end":497709,"line_start":1984,"line_end":1984,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497711,"byte_end":497714,"line_start":1985,"line_end":1985,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497716,"byte_end":497788,"line_start":1986,"line_end":1986,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497790,"byte_end":497865,"line_start":1987,"line_end":1987,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`Domain`] restrictions: the left and right slices","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497867,"byte_end":497939,"line_start":1988,"line_end":1988,"column_start":2,"column_end":74}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":497941,"byte_end":498017,"line_start":1989,"line_end":1989,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498019,"byte_end":498092,"line_start":1990,"line_end":1990,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to`] on the domain body (if present).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498094,"byte_end":498170,"line_start":1991,"line_end":1991,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498172,"byte_end":498175,"line_start":1992,"line_end":1992,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498177,"byte_end":498253,"line_start":1993,"line_end":1993,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498255,"byte_end":498330,"line_start":1994,"line_end":1994,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498332,"byte_end":498403,"line_start":1995,"line_end":1995,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498405,"byte_end":498481,"line_start":1996,"line_end":1996,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498483,"byte_end":498549,"line_start":1997,"line_end":1997,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498551,"byte_end":498579,"line_start":1998,"line_end":1998,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498581,"byte_end":498584,"line_start":1999,"line_end":1999,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498586,"byte_end":498598,"line_start":2000,"line_end":2000,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498600,"byte_end":498603,"line_start":2001,"line_end":2001,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498605,"byte_end":498680,"line_start":2002,"line_end":2002,"column_start":2,"column_end":77}},{"value":"/ memory region in the returned middle slice, so all of the usual caveats","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498682,"byte_end":498757,"line_start":2003,"line_end":2003,"column_start":2,"column_end":77}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498759,"byte_end":498824,"line_start":2004,"line_end":2004,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498826,"byte_end":498829,"line_start":2005,"line_end":2005,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498831,"byte_end":498845,"line_start":2006,"line_end":2006,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498847,"byte_end":498850,"line_start":2007,"line_end":2007,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498852,"byte_end":498868,"line_start":2008,"line_end":2008,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498870,"byte_end":498873,"line_start":2009,"line_end":2009,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498875,"byte_end":498886,"line_start":2010,"line_end":2010,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498888,"byte_end":498915,"line_start":2011,"line_end":2011,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498917,"byte_end":498920,"line_start":2012,"line_end":2012,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498922,"byte_end":498934,"line_start":2013,"line_end":2013,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498936,"byte_end":498985,"line_start":2014,"line_end":2014,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498987,"byte_end":499035,"line_start":2015,"line_end":2015,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499037,"byte_end":499097,"line_start":2016,"line_end":2016,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499099,"byte_end":499125,"line_start":2017,"line_end":2017,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499127,"byte_end":499141,"line_start":2018,"line_end":2018,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499143,"byte_end":499185,"line_start":2019,"line_end":2019,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499187,"byte_end":499229,"line_start":2020,"line_end":2020,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499231,"byte_end":499241,"line_start":2021,"line_end":2021,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499243,"byte_end":499257,"line_start":2022,"line_end":2022,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499259,"byte_end":499300,"line_start":2023,"line_end":2023,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499302,"byte_end":499343,"line_start":2024,"line_end":2024,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499345,"byte_end":499355,"line_start":2025,"line_end":2025,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499357,"byte_end":499410,"line_start":2026,"line_end":2026,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499412,"byte_end":499419,"line_start":2027,"line_end":2027,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499421,"byte_end":499426,"line_start":2028,"line_end":2028,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499428,"byte_end":499435,"line_start":2029,"line_end":2029,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499437,"byte_end":499440,"line_start":2030,"line_end":2030,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499442,"byte_end":499472,"line_start":2031,"line_end":2031,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499474,"byte_end":499514,"line_start":2032,"line_end":2032,"column_start":2,"column_end":42}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499516,"byte_end":499553,"line_start":2033,"line_end":2033,"column_start":2,"column_end":39}},{"value":"/ [`slice::align_to`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499555,"byte_end":499653,"line_start":2034,"line_end":2034,"column_start":2,"column_end":100}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499655,"byte_end":499701,"line_start":2035,"line_end":2035,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499703,"byte_end":499712,"line_start":2036,"line_end":2036,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502360,"byte_end":502372,"line_start":2107,"line_end":2107,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499941,"byte_end":500009,"line_start":2047,"line_end":2047,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500011,"byte_end":500052,"line_start":2048,"line_end":2048,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500054,"byte_end":500057,"line_start":2049,"line_end":2049,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500059,"byte_end":500073,"line_start":2050,"line_end":2050,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500075,"byte_end":500078,"line_start":2051,"line_end":2051,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to_mut`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500080,"byte_end":500107,"line_start":2052,"line_end":2052,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500109,"byte_end":500112,"line_start":2053,"line_end":2053,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500114,"byte_end":500135,"line_start":2054,"line_end":2054,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500137,"byte_end":500140,"line_start":2055,"line_end":2055,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500142,"byte_end":500215,"line_start":2056,"line_end":2056,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500217,"byte_end":500292,"line_start":2057,"line_end":2057,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500294,"byte_end":500368,"line_start":2058,"line_end":2058,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500370,"byte_end":500446,"line_start":2059,"line_end":2059,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500448,"byte_end":500519,"line_start":2060,"line_end":2060,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500521,"byte_end":500545,"line_start":2061,"line_end":2061,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500547,"byte_end":500550,"line_start":2062,"line_end":2062,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500552,"byte_end":500572,"line_start":2063,"line_end":2063,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500574,"byte_end":500577,"line_start":2064,"line_end":2064,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500579,"byte_end":500651,"line_start":2065,"line_end":2065,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500653,"byte_end":500728,"line_start":2066,"line_end":2066,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`DomainMut`] restrictions: the left and right slices","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500730,"byte_end":500805,"line_start":2067,"line_end":2067,"column_start":2,"column_end":77}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500807,"byte_end":500883,"line_start":2068,"line_end":2068,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500885,"byte_end":500958,"line_start":2069,"line_end":2069,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to_mut`] on the domain body (if","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500960,"byte_end":501030,"line_start":2070,"line_end":2070,"column_start":2,"column_end":72}},{"value":"/ present).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501032,"byte_end":501045,"line_start":2071,"line_end":2071,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501047,"byte_end":501050,"line_start":2072,"line_end":2072,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501052,"byte_end":501128,"line_start":2073,"line_end":2073,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501130,"byte_end":501205,"line_start":2074,"line_end":2074,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501207,"byte_end":501278,"line_start":2075,"line_end":2075,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501280,"byte_end":501356,"line_start":2076,"line_end":2076,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501358,"byte_end":501424,"line_start":2077,"line_end":2077,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501426,"byte_end":501454,"line_start":2078,"line_end":2078,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501456,"byte_end":501459,"line_start":2079,"line_end":2079,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501461,"byte_end":501473,"line_start":2080,"line_end":2080,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501475,"byte_end":501478,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501480,"byte_end":501555,"line_start":2082,"line_end":2082,"column_start":2,"column_end":77}},{"value":"/ memory region in the returned middle slice, so all of the usual caveats","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501557,"byte_end":501632,"line_start":2083,"line_end":2083,"column_start":2,"column_end":77}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501634,"byte_end":501699,"line_start":2084,"line_end":2084,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501701,"byte_end":501704,"line_start":2085,"line_end":2085,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501706,"byte_end":501720,"line_start":2086,"line_end":2086,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501722,"byte_end":501725,"line_start":2087,"line_end":2087,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501727,"byte_end":501743,"line_start":2088,"line_end":2088,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501745,"byte_end":501748,"line_start":2089,"line_end":2089,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501750,"byte_end":501761,"line_start":2090,"line_end":2090,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501763,"byte_end":501790,"line_start":2091,"line_end":2091,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501792,"byte_end":501795,"line_start":2092,"line_end":2092,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501797,"byte_end":501809,"line_start":2093,"line_end":2093,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501811,"byte_end":501864,"line_start":2094,"line_end":2094,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501866,"byte_end":501918,"line_start":2095,"line_end":2095,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501920,"byte_end":501984,"line_start":2096,"line_end":2096,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501986,"byte_end":502037,"line_start":2097,"line_end":2097,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502039,"byte_end":502044,"line_start":2098,"line_end":2098,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502046,"byte_end":502053,"line_start":2099,"line_end":2099,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502055,"byte_end":502058,"line_start":2100,"line_end":2100,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502060,"byte_end":502090,"line_start":2101,"line_end":2101,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502092,"byte_end":502132,"line_start":2102,"line_end":2102,"column_start":2,"column_end":42}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502134,"byte_end":502177,"line_start":2103,"line_end":2103,"column_start":2,"column_end":45}},{"value":"/ [`slice::align_to_mut`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502179,"byte_end":502285,"line_start":2104,"line_end":2104,"column_start":2,"column_end":108}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502287,"byte_end":502333,"line_start":2105,"line_end":2105,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502335,"byte_end":502344,"line_start":2106,"line_end":2106,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504566,"byte_end":504574,"line_start":2200,"line_end":2200,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_ref`](core::slice::from_ref)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504342,"byte_end":504509,"line_start":2190,"line_end":2197,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504510,"byte_end":504527,"line_start":2198,"line_end":2198,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504528,"byte_end":504558,"line_start":2199,"line_end":2199,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504903,"byte_end":504911,"line_start":2218,"line_end":2218,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_mut`](core::slice::from_mut)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504679,"byte_end":504846,"line_start":2208,"line_end":2215,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504847,"byte_end":504864,"line_start":2216,"line_end":2216,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504865,"byte_end":504895,"line_start":2217,"line_end":2217,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2513},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508740,"byte_end":508754,"line_start":2332,"line_end":2332,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> Result<&'a BitSlice<O, T>, BitSpanError<T>> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"/ Forms a bit-slice from a bit-pointer and a length.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505261,"byte_end":505315,"line_start":2231,"line_end":2231,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505316,"byte_end":505319,"line_start":2232,"line_end":2232,"column_start":1,"column_end":4}},{"value":"/ The `len` argument is the number of **bits**, not the number of bytes or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505320,"byte_end":505396,"line_start":2233,"line_end":2233,"column_start":1,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505397,"byte_end":505410,"line_start":2234,"line_end":2234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505411,"byte_end":505414,"line_start":2235,"line_end":2235,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505415,"byte_end":505429,"line_start":2236,"line_end":2236,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505430,"byte_end":505433,"line_start":2237,"line_end":2237,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts`](core::slice::from_raw_parts)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505434,"byte_end":505492,"line_start":2238,"line_end":2238,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505493,"byte_end":505496,"line_start":2239,"line_end":2239,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505497,"byte_end":505518,"line_start":2240,"line_end":2240,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505519,"byte_end":505522,"line_start":2241,"line_end":2241,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505523,"byte_end":505596,"line_start":2242,"line_end":2242,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505597,"byte_end":505671,"line_start":2243,"line_end":2243,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505672,"byte_end":505675,"line_start":2244,"line_end":2244,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505676,"byte_end":505754,"line_start":2245,"line_end":2245,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505755,"byte_end":505788,"line_start":2246,"line_end":2246,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505789,"byte_end":505792,"line_start":2247,"line_end":2247,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505793,"byte_end":505805,"line_start":2248,"line_end":2248,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505806,"byte_end":505809,"line_start":2249,"line_end":2249,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505810,"byte_end":505884,"line_start":2250,"line_end":2250,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505885,"byte_end":505888,"line_start":2251,"line_end":2251,"column_start":1,"column_end":4}},{"value":"/ - `data` must be valid for reads for `len` many bits, and it must be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505889,"byte_end":505961,"line_start":2252,"line_end":2252,"column_start":1,"column_end":73}},{"value":"/   properly aligned. This means in particular:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505962,"byte_end":506011,"line_start":2253,"line_end":2253,"column_start":1,"column_end":50}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506012,"byte_end":506091,"line_start":2254,"line_end":2254,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506092,"byte_end":506165,"line_start":2255,"line_end":2255,"column_start":1,"column_end":74}},{"value":"/     objects. See [below] for an example incorrectly not taking this into","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506166,"byte_end":506242,"line_start":2256,"line_end":2256,"column_start":1,"column_end":77}},{"value":"/     account.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506243,"byte_end":506259,"line_start":2257,"line_end":2257,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506260,"byte_end":506337,"line_start":2258,"line_end":2258,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506338,"byte_end":506418,"line_start":2259,"line_end":2259,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506419,"byte_end":506499,"line_start":2260,"line_end":2260,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506500,"byte_end":506546,"line_start":2261,"line_end":2261,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506547,"byte_end":506624,"line_start":2262,"line_end":2262,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506625,"byte_end":506651,"line_start":2263,"line_end":2263,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be mutated for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506652,"byte_end":506729,"line_start":2264,"line_end":2264,"column_start":1,"column_end":78}},{"value":"/   duration of the lifetime `'a`, except if `T` is an atomic or a `Cell`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506730,"byte_end":506805,"line_start":2265,"line_end":2265,"column_start":1,"column_end":76}},{"value":"/   type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506806,"byte_end":506817,"line_start":2266,"line_end":2266,"column_start":1,"column_end":12}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506818,"byte_end":506867,"line_start":2267,"line_end":2267,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506868,"byte_end":506871,"line_start":2268,"line_end":2268,"column_start":1,"column_end":4}},{"value":"/ # Caveat","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506872,"byte_end":506884,"line_start":2269,"line_end":2269,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506885,"byte_end":506888,"line_start":2270,"line_end":2270,"column_start":1,"column_end":4}},{"value":"/ The lifetime for the returned slice is inferred from its usage. To prevent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506889,"byte_end":506967,"line_start":2271,"line_end":2271,"column_start":1,"column_end":79}},{"value":"/ accidental misuse, it’s suggested to tie the lifetime to whichever source","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506968,"byte_end":507047,"line_start":2272,"line_end":2272,"column_start":1,"column_end":78}},{"value":"/ lifetime is safe in the context, such as by providing a helper function","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507048,"byte_end":507123,"line_start":2273,"line_end":2273,"column_start":1,"column_end":76}},{"value":"/ taking the lifetime of a host value for the slice, or by explicit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507124,"byte_end":507193,"line_start":2274,"line_end":2274,"column_start":1,"column_end":70}},{"value":"/ annotation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507194,"byte_end":507209,"line_start":2275,"line_end":2275,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507210,"byte_end":507213,"line_start":2276,"line_end":2276,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507214,"byte_end":507228,"line_start":2277,"line_end":2277,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507229,"byte_end":507232,"line_start":2278,"line_end":2278,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507233,"byte_end":507244,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507245,"byte_end":507272,"line_start":2280,"line_end":2280,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507273,"byte_end":507307,"line_start":2281,"line_end":2281,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507308,"byte_end":507311,"line_start":2282,"line_end":2282,"column_start":1,"column_end":4}},{"value":"/ let x = 42u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507312,"byte_end":507329,"line_start":2283,"line_end":2283,"column_start":1,"column_end":18}},{"value":"/ let bitptr = BitPtr::from(&x);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507330,"byte_end":507364,"line_start":2284,"line_end":2284,"column_start":1,"column_end":35}},{"value":"/ let bits: &BitSlice<LocalBits, _> = unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507365,"byte_end":507413,"line_start":2285,"line_end":2285,"column_start":1,"column_end":49}},{"value":"/   bv_slice::from_raw_parts(bitptr, 8)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507414,"byte_end":507455,"line_start":2286,"line_end":2286,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507456,"byte_end":507461,"line_start":2287,"line_end":2287,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507462,"byte_end":507476,"line_start":2288,"line_end":2288,"column_start":1,"column_end":15}},{"value":"/ assert_eq!(bits, x.view_bits::<LocalBits>());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507477,"byte_end":507526,"line_start":2289,"line_end":2289,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507527,"byte_end":507534,"line_start":2290,"line_end":2290,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507535,"byte_end":507538,"line_start":2291,"line_end":2291,"column_start":1,"column_end":4}},{"value":"/ ### Incorrect Usage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507539,"byte_end":507562,"line_start":2292,"line_end":2292,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507563,"byte_end":507566,"line_start":2293,"line_end":2293,"column_start":1,"column_end":4}},{"value":"/ The following `join_slices` function is **unsound** ⚠️","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507567,"byte_end":507629,"line_start":2294,"line_end":2294,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507630,"byte_end":507633,"line_start":2295,"line_end":2295,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507634,"byte_end":507652,"line_start":2296,"line_end":2296,"column_start":1,"column_end":19}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507653,"byte_end":507680,"line_start":2297,"line_end":2297,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507681,"byte_end":507715,"line_start":2298,"line_end":2298,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507716,"byte_end":507719,"line_start":2299,"line_end":2299,"column_start":1,"column_end":4}},{"value":"/ fn join_bitslices<'a, O, T>(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507720,"byte_end":507752,"line_start":2300,"line_end":2300,"column_start":1,"column_end":33}},{"value":"/   fst: &'a BitSlice<O, T>,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507753,"byte_end":507783,"line_start":2301,"line_end":2301,"column_start":1,"column_end":31}},{"value":"/   snd: &'a BitSlice<O, T>,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507784,"byte_end":507814,"line_start":2302,"line_end":2302,"column_start":1,"column_end":31}},{"value":"/ ) -> &'a BitSlice<O, T>","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507815,"byte_end":507842,"line_start":2303,"line_end":2303,"column_start":1,"column_end":28}},{"value":"/ where O: BitOrder, T: BitStore {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507843,"byte_end":507879,"line_start":2304,"line_end":2304,"column_start":1,"column_end":37}},{"value":"/   let fst_end = unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507880,"byte_end":507908,"line_start":2305,"line_end":2305,"column_start":1,"column_end":29}},{"value":"/     fst.as_bitptr().wrapping_add(fst.len())","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507909,"byte_end":507956,"line_start":2306,"line_end":2306,"column_start":1,"column_end":48}},{"value":"/   };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507957,"byte_end":507965,"line_start":2307,"line_end":2307,"column_start":1,"column_end":9}},{"value":"/   let snd_start = snd.as_bitptr();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507966,"byte_end":508004,"line_start":2308,"line_end":2308,"column_start":1,"column_end":39}},{"value":"/   assert_eq!(snd_start, fst_end, \"Slices must be adjacent\");","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508005,"byte_end":508069,"line_start":2309,"line_end":2309,"column_start":1,"column_end":65}},{"value":"/   unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508070,"byte_end":508084,"line_start":2310,"line_end":2310,"column_start":1,"column_end":15}},{"value":"/     bv_slice::from_raw_parts(fst.as_bitptr(), fst.len() + snd.len())","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508085,"byte_end":508157,"line_start":2311,"line_end":2311,"column_start":1,"column_end":73}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508158,"byte_end":508165,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/   .unwrap()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508166,"byte_end":508181,"line_start":2313,"line_end":2313,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508182,"byte_end":508187,"line_start":2314,"line_end":2314,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508188,"byte_end":508191,"line_start":2315,"line_end":2315,"column_start":1,"column_end":4}},{"value":"/ let a = [0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508192,"byte_end":508213,"line_start":2316,"line_end":2316,"column_start":1,"column_end":22}},{"value":"/ let b = [!0u8; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508214,"byte_end":508236,"line_start":2317,"line_end":2317,"column_start":1,"column_end":23}},{"value":"/ let c = join_bitslices(","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508237,"byte_end":508264,"line_start":2318,"line_end":2318,"column_start":1,"column_end":28}},{"value":"/   a.view_bits::<LocalBits>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508265,"byte_end":508298,"line_start":2319,"line_end":2319,"column_start":1,"column_end":34}},{"value":"/   b.view_bits::<LocalBits>(),","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508299,"byte_end":508332,"line_start":2320,"line_end":2320,"column_start":1,"column_end":34}},{"value":"/ );","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508333,"byte_end":508339,"line_start":2321,"line_end":2321,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508340,"byte_end":508347,"line_start":2322,"line_end":2322,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508348,"byte_end":508351,"line_start":2323,"line_end":2323,"column_start":1,"column_end":4}},{"value":"/ In this example, the compiler may elect to place `a` and `b` in adjacent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508352,"byte_end":508428,"line_start":2324,"line_end":2324,"column_start":1,"column_end":77}},{"value":"/ stack slots, but because they are still *separate allocation* regions, it is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508429,"byte_end":508509,"line_start":2325,"line_end":2325,"column_start":1,"column_end":81}},{"value":"/ illegal for a single region descriptor to be created over both of them.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508510,"byte_end":508585,"line_start":2326,"line_end":2326,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508586,"byte_end":508589,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ [below]: #incorrect-usage","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508590,"byte_end":508619,"line_start":2328,"line_end":2328,"column_start":1,"column_end":30}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508620,"byte_end":508654,"line_start":2329,"line_end":2329,"column_start":1,"column_end":35}},{"value":"/ [`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508655,"byte_end":508715,"line_start":2330,"line_end":2330,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508716,"byte_end":508725,"line_start":2331,"line_end":2331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510830,"byte_end":510848,"line_start":2384,"line_end":2384,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> Result<&'a mut BitSlice<O, T>, BitSpanError<T>> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"/ Performs the same functionality as [`from_raw_parts`], except that a mutable","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508941,"byte_end":509021,"line_start":2343,"line_end":2343,"column_start":1,"column_end":81}},{"value":"/ slice is returned.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509022,"byte_end":509044,"line_start":2344,"line_end":2344,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509045,"byte_end":509048,"line_start":2345,"line_end":2345,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509049,"byte_end":509063,"line_start":2346,"line_end":2346,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509064,"byte_end":509067,"line_start":2347,"line_end":2347,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts_mut`](core::slice::from_raw_parts_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509068,"byte_end":509134,"line_start":2348,"line_end":2348,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509135,"byte_end":509138,"line_start":2349,"line_end":2349,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509139,"byte_end":509160,"line_start":2350,"line_end":2350,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509161,"byte_end":509164,"line_start":2351,"line_end":2351,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509165,"byte_end":509238,"line_start":2352,"line_end":2352,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509239,"byte_end":509313,"line_start":2353,"line_end":2353,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509314,"byte_end":509317,"line_start":2354,"line_end":2354,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509318,"byte_end":509396,"line_start":2355,"line_end":2355,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509397,"byte_end":509430,"line_start":2356,"line_end":2356,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509431,"byte_end":509434,"line_start":2357,"line_end":2357,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509435,"byte_end":509447,"line_start":2358,"line_end":2358,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509448,"byte_end":509451,"line_start":2359,"line_end":2359,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509452,"byte_end":509526,"line_start":2360,"line_end":2360,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509527,"byte_end":509530,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for both reads and writes for `len` many bits, and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509531,"byte_end":509610,"line_start":2362,"line_end":2362,"column_start":1,"column_end":80}},{"value":"/   it must be properly aligned. This means in particular:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509611,"byte_end":509671,"line_start":2363,"line_end":2363,"column_start":1,"column_end":61}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509672,"byte_end":509751,"line_start":2364,"line_end":2364,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509752,"byte_end":509825,"line_start":2365,"line_end":2365,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509826,"byte_end":509842,"line_start":2366,"line_end":2366,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509843,"byte_end":509920,"line_start":2367,"line_end":2367,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509921,"byte_end":510001,"line_start":2368,"line_end":2368,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510002,"byte_end":510082,"line_start":2369,"line_end":2369,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510083,"byte_end":510129,"line_start":2370,"line_end":2370,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510130,"byte_end":510207,"line_start":2371,"line_end":2371,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510208,"byte_end":510234,"line_start":2372,"line_end":2372,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be accessed through","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510235,"byte_end":510313,"line_start":2373,"line_end":2373,"column_start":1,"column_end":79}},{"value":"/   any other pointer (not derived from the return value) for the duration of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510314,"byte_end":510393,"line_start":2374,"line_end":2374,"column_start":1,"column_end":80}},{"value":"/   lifetime `'a`. Both read and write accesses are forbidden. This is true","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510394,"byte_end":510471,"line_start":2375,"line_end":2375,"column_start":1,"column_end":78}},{"value":"/   even if `T` supports aliased mutation! An `&mut` reference requires","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510472,"byte_end":510545,"line_start":2376,"line_end":2376,"column_start":1,"column_end":74}},{"value":"/   **exclusive** access for its lifetime.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510546,"byte_end":510590,"line_start":2377,"line_end":2377,"column_start":1,"column_end":45}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510591,"byte_end":510640,"line_start":2378,"line_end":2378,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510641,"byte_end":510644,"line_start":2379,"line_end":2379,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/stable/core/ptr/index.html#safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510645,"byte_end":510717,"line_start":2380,"line_end":2380,"column_start":1,"column_end":73}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510718,"byte_end":510752,"line_start":2381,"line_end":2381,"column_start":1,"column_end":35}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510753,"byte_end":510805,"line_start":2382,"line_end":2382,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510806,"byte_end":510815,"line_start":2383,"line_end":2383,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511965,"byte_end":511978,"line_start":2420,"line_end":2420,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nmethods. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since [`bitvec`] cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](core::slice::SliceIndex)\n\n# API Differences\n\n[`SliceIndex::Output`] is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n[`BitSlice`] reference; the `usize` implementation defines them to be `&bool`\nand the proxy type.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`SliceIndex::Output`]: core::slice::SliceIndex::Output\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511037,"byte_end":511954,"line_start":2395,"line_end":2419,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512077,"byte_end":512082,"line_start":2426,"line_end":2426,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" The output type for immutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for immutable accessors.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512026,"byte_end":512070,"line_start":2425,"line_end":2425,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512135,"byte_end":512138,"line_start":2429,"line_end":2429,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" The output type for mutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for mutable accessors.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512086,"byte_end":512128,"line_start":2428,"line_end":2428,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512304,"byte_end":512307,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512142,"byte_end":512218,"line_start":2431,"line_end":2431,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512220,"byte_end":512223,"line_start":2432,"line_end":2432,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512225,"byte_end":512239,"line_start":2433,"line_end":2433,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512241,"byte_end":512244,"line_start":2434,"line_end":2434,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](core::slice::SliceIndex::get)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512246,"byte_end":512299,"line_start":2435,"line_end":2435,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512543,"byte_end":512550,"line_start":2444,"line_end":2444,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512367,"byte_end":512436,"line_start":2438,"line_end":2438,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512438,"byte_end":512449,"line_start":2439,"line_end":2439,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512451,"byte_end":512454,"line_start":2440,"line_end":2440,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512456,"byte_end":512470,"line_start":2441,"line_end":2441,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512472,"byte_end":512475,"line_start":2442,"line_end":2442,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](core::slice::SliceIndex::get_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512477,"byte_end":512538,"line_start":2443,"line_end":2443,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513326,"byte_end":513339,"line_start":2463,"line_end":2463,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512612,"byte_end":512682,"line_start":2446,"line_end":2446,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512684,"byte_end":512747,"line_start":2447,"line_end":2447,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512749,"byte_end":512818,"line_start":2448,"line_end":2448,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512820,"byte_end":512846,"line_start":2449,"line_end":2449,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512848,"byte_end":512851,"line_start":2450,"line_end":2450,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512853,"byte_end":512867,"line_start":2451,"line_end":2451,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512869,"byte_end":512872,"line_start":2452,"line_end":2452,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](core::slice::SliceIndex::get_unchecked)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512874,"byte_end":512947,"line_start":2453,"line_end":2453,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512949,"byte_end":512952,"line_start":2454,"line_end":2454,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512954,"byte_end":512966,"line_start":2455,"line_end":2455,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512968,"byte_end":512971,"line_start":2456,"line_end":2456,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512973,"byte_end":513045,"line_start":2457,"line_end":2457,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513047,"byte_end":513121,"line_start":2458,"line_end":2458,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513123,"byte_end":513194,"line_start":2459,"line_end":2459,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513196,"byte_end":513211,"line_start":2460,"line_end":2460,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513213,"byte_end":513216,"line_start":2461,"line_end":2461,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513218,"byte_end":513314,"line_start":2462,"line_end":2462,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514132,"byte_end":514149,"line_start":2483,"line_end":2483,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513391,"byte_end":513462,"line_start":2465,"line_end":2465,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513464,"byte_end":513527,"line_start":2466,"line_end":2466,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513529,"byte_end":513598,"line_start":2467,"line_end":2467,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513600,"byte_end":513626,"line_start":2468,"line_end":2468,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513628,"byte_end":513631,"line_start":2469,"line_end":2469,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513633,"byte_end":513647,"line_start":2470,"line_end":2470,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513649,"byte_end":513652,"line_start":2471,"line_end":2471,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`][orig]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513654,"byte_end":513697,"line_start":2472,"line_end":2472,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513699,"byte_end":513702,"line_start":2473,"line_end":2473,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513704,"byte_end":513716,"line_start":2474,"line_end":2474,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513718,"byte_end":513721,"line_start":2475,"line_end":2475,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513723,"byte_end":513795,"line_start":2476,"line_end":2476,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513797,"byte_end":513871,"line_start":2477,"line_end":2477,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513873,"byte_end":513944,"line_start":2478,"line_end":2478,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513946,"byte_end":513961,"line_start":2479,"line_end":2479,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513963,"byte_end":513966,"line_start":2480,"line_end":2480,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::SliceIndex::get_unchecked_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513968,"byte_end":514022,"line_start":2481,"line_end":2481,"column_start":2,"column_end":56}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514024,"byte_end":514120,"line_start":2482,"line_end":2482,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514396,"byte_end":514401,"line_start":2494,"line_end":2494,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514211,"byte_end":514286,"line_start":2488,"line_end":2488,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514288,"byte_end":514306,"line_start":2489,"line_end":2489,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514308,"byte_end":514311,"line_start":2490,"line_end":2490,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514313,"byte_end":514327,"line_start":2491,"line_end":2491,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514329,"byte_end":514332,"line_start":2492,"line_end":2492,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](core::slice::SliceIndex::index)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514334,"byte_end":514391,"line_start":2493,"line_end":2493,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514647,"byte_end":514656,"line_start":2502,"line_end":2502,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2521},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514453,"byte_end":514529,"line_start":2496,"line_end":2496,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514531,"byte_end":514549,"line_start":2497,"line_end":2497,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514551,"byte_end":514554,"line_start":2498,"line_end":2498,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514556,"byte_end":514570,"line_start":2499,"line_end":2499,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514572,"byte_end":514575,"line_start":2500,"line_end":2500,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](core::slice::SliceIndex::index_mut)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514577,"byte_end":514642,"line_start":2501,"line_end":2501,"column_start":2,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2635},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521169,"byte_end":521173,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2640}],"decl_id":null,"docs":" Immutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Immutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](core::slice::Iter)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![0, 1];\nfor bit in bits.iter() {\n  # #[cfg(feature = \"std\")]\n  println!(\"{}\", bit);\n}\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter()`]: crate::slice::BitSlice::iter\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":520734,"byte_end":521136,"line_start":65,"line_end":89,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521137,"byte_end":521157,"line_start":90,"line_end":90,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522921,"byte_end":522932,"line_start":160,"line_end":160,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521904,"byte_end":521969,"line_start":121,"line_end":121,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521971,"byte_end":521974,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original [`BitSlice`], and so the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521976,"byte_end":522047,"line_start":123,"line_end":123,"column_start":2,"column_end":73}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522049,"byte_end":522104,"line_start":124,"line_end":124,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522106,"byte_end":522109,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522111,"byte_end":522125,"line_start":126,"line_end":126,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522127,"byte_end":522130,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](core::slice::Iter::as_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522132,"byte_end":522183,"line_start":128,"line_end":128,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522185,"byte_end":522188,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522190,"byte_end":522211,"line_start":130,"line_end":130,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522213,"byte_end":522216,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522218,"byte_end":522293,"line_start":132,"line_end":132,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522295,"byte_end":522316,"line_start":133,"line_end":133,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522318,"byte_end":522321,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522323,"byte_end":522337,"line_start":135,"line_end":135,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522339,"byte_end":522342,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522344,"byte_end":522360,"line_start":137,"line_end":137,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522362,"byte_end":522365,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522367,"byte_end":522378,"line_start":139,"line_end":139,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522380,"byte_end":522411,"line_start":140,"line_end":140,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522413,"byte_end":522440,"line_start":141,"line_end":141,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522442,"byte_end":522445,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522447,"byte_end":522480,"line_start":143,"line_end":143,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522482,"byte_end":522485,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ // Get the iterator:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522487,"byte_end":522511,"line_start":145,"line_end":145,"column_start":2,"column_end":26}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522513,"byte_end":522544,"line_start":146,"line_end":146,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522546,"byte_end":522594,"line_start":147,"line_end":147,"column_start":2,"column_end":50}},{"value":"/ // here, we have \"[0011]\":","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522596,"byte_end":522626,"line_start":148,"line_end":148,"column_start":2,"column_end":32}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522628,"byte_end":522669,"line_start":149,"line_end":149,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522671,"byte_end":522674,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522676,"byte_end":522732,"line_start":151,"line_end":151,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522734,"byte_end":522750,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[011]\":","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522752,"byte_end":522793,"line_start":153,"line_end":153,"column_start":2,"column_end":43}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522795,"byte_end":522836,"line_start":154,"line_end":154,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522838,"byte_end":522845,"line_start":155,"line_end":155,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522847,"byte_end":522854,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522856,"byte_end":522859,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522861,"byte_end":522901,"line_start":158,"line_end":158,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":522903,"byte_end":522912,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523163,"byte_end":523171,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523039,"byte_end":523056,"line_start":165,"line_end":165,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523058,"byte_end":523088,"line_start":166,"line_end":166,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523090,"byte_end":523154,"line_start":167,"line_end":167,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524133,"byte_end":524139,"line_start":203,"line_end":203,"column_start":9,"column_end":15},"name":"by_ref","qualname":"<Iter>::by_ref","value":"pub fn by_ref(Self) -> BitRefIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `&bool` references rather than `BitRef`\n proxies.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `&bool` references rather than `BitRef`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523229,"byte_end":523301,"line_start":172,"line_end":172,"column_start":2,"column_end":74}},{"value":"/ proxies.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523303,"byte_end":523315,"line_start":173,"line_end":173,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523317,"byte_end":523320,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523322,"byte_end":523390,"line_start":175,"line_end":175,"column_start":2,"column_end":70}},{"value":"/ references and are not easily modified to receive the proxy structure.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523392,"byte_end":523466,"line_start":176,"line_end":176,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523468,"byte_end":523471,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ It works by yielding `&'static` references to hidden statics; these","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523473,"byte_end":523544,"line_start":178,"line_end":178,"column_start":2,"column_end":73}},{"value":"/ references will **not** have an address value that fits in the context","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523546,"byte_end":523620,"line_start":179,"line_end":179,"column_start":2,"column_end":76}},{"value":"/ of the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523622,"byte_end":523642,"line_start":180,"line_end":180,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523644,"byte_end":523647,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523649,"byte_end":523665,"line_start":182,"line_end":182,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523667,"byte_end":523670,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523672,"byte_end":523684,"line_start":184,"line_end":184,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523686,"byte_end":523689,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523691,"byte_end":523704,"line_start":186,"line_end":186,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523706,"byte_end":523709,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `&bool` instead of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523711,"byte_end":523779,"line_start":188,"line_end":188,"column_start":2,"column_end":70}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523781,"byte_end":523794,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523796,"byte_end":523799,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523801,"byte_end":523815,"line_start":191,"line_end":191,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523817,"byte_end":523820,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523822,"byte_end":523833,"line_start":193,"line_end":193,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523835,"byte_end":523862,"line_start":194,"line_end":194,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523864,"byte_end":523867,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523869,"byte_end":523896,"line_start":196,"line_end":196,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_ref();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523898,"byte_end":523938,"line_start":197,"line_end":197,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(&false));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523940,"byte_end":523982,"line_start":198,"line_end":198,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&true));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":523984,"byte_end":524025,"line_start":199,"line_end":199,"column_start":2,"column_end":43}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524027,"byte_end":524062,"line_start":200,"line_end":200,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524064,"byte_end":524071,"line_start":201,"line_end":201,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524108,"byte_end":524122,"line_start":202,"line_end":202,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525138,"byte_end":525144,"line_start":241,"line_end":241,"column_start":9,"column_end":15},"name":"by_val","qualname":"<Iter>::by_val","value":"pub fn by_val(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `bool` values rather than `BitRef` proxy\n references.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `bool` values rather than `BitRef` proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524221,"byte_end":524294,"line_start":209,"line_end":209,"column_start":2,"column_end":75}},{"value":"/ references.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524296,"byte_end":524311,"line_start":210,"line_end":210,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524313,"byte_end":524316,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary values.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524318,"byte_end":524394,"line_start":212,"line_end":212,"column_start":2,"column_end":78}},{"value":"/ It dereferences the proxy and produces the proxied `bool` directly.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524396,"byte_end":524467,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524469,"byte_end":524472,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `[bool].iter().copied()`, as [`Iterator::copied`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524474,"byte_end":524549,"line_start":215,"line_end":215,"column_start":2,"column_end":77}},{"value":"/ is not available on this iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524551,"byte_end":524589,"line_start":216,"line_end":216,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524591,"byte_end":524594,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524596,"byte_end":524612,"line_start":218,"line_end":218,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524614,"byte_end":524617,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524619,"byte_end":524631,"line_start":220,"line_end":220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524633,"byte_end":524636,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524638,"byte_end":524651,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524653,"byte_end":524656,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `bool` instead of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524658,"byte_end":524725,"line_start":224,"line_end":224,"column_start":2,"column_end":69}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524727,"byte_end":524740,"line_start":225,"line_end":225,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524742,"byte_end":524745,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524747,"byte_end":524761,"line_start":227,"line_end":227,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524763,"byte_end":524766,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524768,"byte_end":524779,"line_start":229,"line_end":229,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524781,"byte_end":524808,"line_start":230,"line_end":230,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524810,"byte_end":524813,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524815,"byte_end":524842,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_val();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524844,"byte_end":524884,"line_start":233,"line_end":233,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(false));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524886,"byte_end":524927,"line_start":234,"line_end":234,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(true));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524929,"byte_end":524969,"line_start":235,"line_end":235,"column_start":2,"column_end":42}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":524971,"byte_end":525006,"line_start":236,"line_end":236,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525008,"byte_end":525015,"line_start":237,"line_end":237,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525017,"byte_end":525020,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`]: core::iter::Iterator::copied","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525022,"byte_end":525076,"line_start":239,"line_end":239,"column_start":2,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525113,"byte_end":525127,"line_start":240,"line_end":240,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525848,"byte_end":525854,"line_start":259,"line_end":259,"column_start":9,"column_end":15},"name":"copied","qualname":"<Iter>::copied","value":"pub fn copied(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Forwards to [`by_val`].","sig":null,"attributes":[{"value":"/ Forwards to [`by_val`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525211,"byte_end":525238,"line_start":245,"line_end":245,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525240,"byte_end":525243,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ This exists to allow ported code to continue to compile when","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525245,"byte_end":525309,"line_start":247,"line_end":247,"column_start":2,"column_end":66}},{"value":"/ `[bool].iter().copied()` is replaced with `BitSlice.iter().copied()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525311,"byte_end":525384,"line_start":248,"line_end":248,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525386,"byte_end":525389,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ However, because [`Iterator::copied`] is not available on this iterator,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525391,"byte_end":525467,"line_start":250,"line_end":250,"column_start":2,"column_end":78}},{"value":"/ this name raises a deprecation warning and encourages the user to use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525469,"byte_end":525542,"line_start":251,"line_end":251,"column_start":2,"column_end":75}},{"value":"/ the correct inherent method instead of the overloaded method name.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525544,"byte_end":525614,"line_start":252,"line_end":252,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525616,"byte_end":525619,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ [`by_val`]: Self::by_val","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525621,"byte_end":525649,"line_start":254,"line_end":254,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525651,"byte_end":525668,"line_start":255,"line_end":255,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525670,"byte_end":525700,"line_start":256,"line_end":256,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"`Iterator::copied` does not exist on this iterator. Use \\\n\t                `by_val` instead to achieve the same effect.\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525702,"byte_end":525839,"line_start":257,"line_end":258,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4137},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526740,"byte_end":526750,"line_start":307,"line_end":307,"column_start":12,"column_end":22},"name":"BitRefIter","qualname":"::slice::iter::BitRefIter","value":"BitRefIter {  }","parent":null,"children":[{"krate":0,"index":4141}],"decl_id":null,"docs":" An iterator over `BitSlice` that produces ordinary `&bool`. May be faster in\n some cases. Produced by [`Iter::by_ref`].\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that produces ordinary `&bool`. May be faster in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526557,"byte_end":526637,"line_start":303,"line_end":303,"column_start":1,"column_end":81}},{"value":"/ some cases. Produced by [`Iter::by_ref`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526638,"byte_end":526683,"line_start":304,"line_end":304,"column_start":1,"column_end":46}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526684,"byte_end":526704,"line_start":305,"line_end":305,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":4152},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528354,"byte_end":528364,"line_start":396,"line_end":396,"column_start":12,"column_end":22},"name":"BitValIter","qualname":"::slice::iter::BitValIter","value":"BitValIter {  }","parent":null,"children":[{"krate":0,"index":4156}],"decl_id":null,"docs":" An iterator over `BitSlice` that produces ordinary `bool`. May be faster in\n some cases. Produced by [`Iter::by_val`].\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that produces ordinary `bool`. May be faster in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528172,"byte_end":528251,"line_start":392,"line_end":392,"column_start":1,"column_end":80}},{"value":"/ some cases. Produced by [`Iter::by_val`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528252,"byte_end":528297,"line_start":393,"line_end":393,"column_start":1,"column_end":46}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528298,"byte_end":528318,"line_start":394,"line_end":394,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2715},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530130,"byte_end":530137,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2719},{"krate":0,"index":2720}],"decl_id":null,"docs":" Mutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Mutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](crate::slice::IterMut)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\nfor mut bit in bits.iter_mut() {\n  *bit = true;\n}\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_mut()`]: crate::slice::BitSlice::iter_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529671,"byte_end":530097,"line_start":471,"line_end":495,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530098,"byte_end":530118,"line_start":496,"line_end":496,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2726},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532213,"byte_end":532226,"line_start":577,"line_end":577,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530953,"byte_end":531018,"line_start":528,"line_end":528,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531020,"byte_end":531023,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias, this is forced to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531025,"byte_end":531094,"line_start":530,"line_end":530,"column_start":2,"column_end":71}},{"value":"/ consume the iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531096,"byte_end":531121,"line_start":531,"line_end":531,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531123,"byte_end":531126,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531128,"byte_end":531142,"line_start":533,"line_end":533,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531144,"byte_end":531147,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_slice`](core::slice::IterMut::into_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531149,"byte_end":531210,"line_start":535,"line_end":535,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531212,"byte_end":531215,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531217,"byte_end":531238,"line_start":537,"line_end":537,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531240,"byte_end":531243,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531245,"byte_end":531320,"line_start":539,"line_end":539,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531322,"byte_end":531343,"line_start":540,"line_end":540,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531345,"byte_end":531348,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531350,"byte_end":531364,"line_start":542,"line_end":542,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531366,"byte_end":531369,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531371,"byte_end":531387,"line_start":544,"line_end":544,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531389,"byte_end":531392,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531394,"byte_end":531405,"line_start":546,"line_end":546,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531407,"byte_end":531438,"line_start":547,"line_end":547,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531440,"byte_end":531467,"line_start":548,"line_end":548,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531469,"byte_end":531472,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531474,"byte_end":531508,"line_start":550,"line_end":550,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531510,"byte_end":531513,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531515,"byte_end":531520,"line_start":552,"line_end":552,"column_start":2,"column_end":7}},{"value":"/   // Get the iterator:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531522,"byte_end":531548,"line_start":553,"line_end":553,"column_start":2,"column_end":28}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531550,"byte_end":531587,"line_start":554,"line_end":554,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531589,"byte_end":531626,"line_start":555,"line_end":555,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531628,"byte_end":531646,"line_start":556,"line_end":556,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531648,"byte_end":531692,"line_start":557,"line_end":557,"column_start":2,"column_end":46}},{"value":"/   // returns here, we have \"[10]\":","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531694,"byte_end":531732,"line_start":558,"line_end":558,"column_start":2,"column_end":40}},{"value":"/   println!(\"{:b}\", iter.into_slice());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531734,"byte_end":531776,"line_start":559,"line_end":559,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531778,"byte_end":531783,"line_start":560,"line_end":560,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531785,"byte_end":531788,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ // Now let’s modify a value of the slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531790,"byte_end":531837,"line_start":562,"line_end":562,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531839,"byte_end":531844,"line_start":563,"line_end":563,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531846,"byte_end":531886,"line_start":564,"line_end":564,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531888,"byte_end":531925,"line_start":565,"line_end":565,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531927,"byte_end":531975,"line_start":566,"line_end":566,"column_start":2,"column_end":50}},{"value":"/   // the slice returned by the `next` method:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531977,"byte_end":532026,"line_start":567,"line_end":567,"column_start":2,"column_end":51}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532028,"byte_end":532063,"line_start":568,"line_end":568,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532065,"byte_end":532070,"line_start":569,"line_end":569,"column_start":2,"column_end":7}},{"value":"/ // Now bits is \"[110]\":","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532072,"byte_end":532099,"line_start":570,"line_end":570,"column_start":2,"column_end":29}},{"value":"/ println!(\"{:b}\", bits);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532101,"byte_end":532128,"line_start":571,"line_end":571,"column_start":2,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532130,"byte_end":532137,"line_start":572,"line_end":572,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532139,"byte_end":532146,"line_start":573,"line_end":573,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532148,"byte_end":532151,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532153,"byte_end":532193,"line_start":575,"line_end":575,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532195,"byte_end":532204,"line_start":576,"line_end":576,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532461,"byte_end":532471,"line_start":585,"line_end":585,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532335,"byte_end":532352,"line_start":582,"line_end":582,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532354,"byte_end":532384,"line_start":583,"line_end":583,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `into_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532386,"byte_end":532452,"line_start":584,"line_end":584,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4233},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536289,"byte_end":536296,"line_start":794,"line_end":794,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":4237},{"krate":0,"index":4238}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`.windows()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Windows`](core::slice::Windows)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.windows()`]: crate::slice::BitSlice::windows\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535978,"byte_end":536253,"line_start":782,"line_end":792,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4272},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":538436,"byte_end":538442,"line_start":884,"line_end":884,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":4276},{"krate":0,"index":4277}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Chunks`](core::slice::Chunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks()`]: crate::slice::BitSlice::chunks\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537937,"byte_end":538400,"line_start":868,"line_end":882,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4311},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":541160,"byte_end":541169,"line_start":993,"line_end":993,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":4315},{"krate":0,"index":4316}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksMut`](core::slice::ChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_mut()`]: crate::slice::BitSlice::chunks_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":540561,"byte_end":541131,"line_start":973,"line_end":991,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4345},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544058,"byte_end":544069,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be ommitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExact`](core::slice::ChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact()`]: crate::slice::BitSlice::chunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":543425,"byte_end":544022,"line_start":1084,"line_end":1100,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":545136,"byte_end":545145,"line_start":1146,"line_end":1146,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544754,"byte_end":544829,"line_start":1136,"line_end":1136,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544831,"byte_end":544899,"line_start":1137,"line_end":1137,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544901,"byte_end":544925,"line_start":1138,"line_end":1138,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544927,"byte_end":544930,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544932,"byte_end":544946,"line_start":1140,"line_end":1140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544948,"byte_end":544951,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](core::slice::ChunksExact::remainder)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544953,"byte_end":545027,"line_start":1142,"line_end":1142,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":545029,"byte_end":545032,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":545034,"byte_end":545074,"line_start":1144,"line_end":1144,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":545111,"byte_end":545125,"line_start":1145,"line_end":1145,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4385},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":547215,"byte_end":547229,"line_start":1230,"line_end":1230,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4389},{"krate":0,"index":4390},{"krate":0,"index":4391}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExactMut`](core::slice::ChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact_mut()`]: crate::slice::BitSlice::chunks_exact_mut\n[`.into_remainder()`]: Self::into_remainder\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":546468,"byte_end":547186,"line_start":1208,"line_end":1228,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548496,"byte_end":548510,"line_start":1280,"line_end":1280,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":547947,"byte_end":548022,"line_start":1264,"line_end":1264,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548024,"byte_end":548092,"line_start":1265,"line_end":1265,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548094,"byte_end":548118,"line_start":1266,"line_end":1266,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548120,"byte_end":548123,"line_start":1267,"line_end":1267,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548125,"byte_end":548139,"line_start":1268,"line_end":1268,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548141,"byte_end":548144,"line_start":1269,"line_end":1269,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548146,"byte_end":548197,"line_start":1270,"line_end":1270,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548199,"byte_end":548202,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548204,"byte_end":548225,"line_start":1272,"line_end":1272,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548227,"byte_end":548230,"line_start":1273,"line_end":1273,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548232,"byte_end":548306,"line_start":1274,"line_end":1274,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548308,"byte_end":548330,"line_start":1275,"line_end":1275,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548332,"byte_end":548335,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548337,"byte_end":548392,"line_start":1277,"line_end":1277,"column_start":2,"column_end":57}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548394,"byte_end":548434,"line_start":1278,"line_end":1278,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548471,"byte_end":548485,"line_start":1279,"line_end":1279,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4420},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":550465,"byte_end":550472,"line_start":1359,"line_end":1359,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":4424},{"krate":0,"index":4425}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last\nslice of the iteration will be the remainder.\n\nThis struct is created by the [`.rchunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](core::slice::RChunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks()`]: crate::slice::BitSlice::rchunks\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549967,"byte_end":550429,"line_start":1343,"line_end":1357,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4459},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553873,"byte_end":553883,"line_start":1480,"line_end":1480,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":4463},{"krate":0,"index":4464}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.rchunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksMut`](core::slice::RChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_mut()`]: crate::slice::BitSlice::rchunks_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553275,"byte_end":553844,"line_start":1460,"line_end":1478,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4493},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":556561,"byte_end":556573,"line_start":1582,"line_end":1582,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExact`](core::slice::RChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_exact()`]: crate::slice::BitSlice::rchunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":555930,"byte_end":556525,"line_start":1564,"line_end":1580,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557606,"byte_end":557615,"line_start":1625,"line_end":1625,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557222,"byte_end":557297,"line_start":1615,"line_end":1615,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557299,"byte_end":557367,"line_start":1616,"line_end":1616,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557369,"byte_end":557393,"line_start":1617,"line_end":1617,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557395,"byte_end":557398,"line_start":1618,"line_end":1618,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557400,"byte_end":557414,"line_start":1619,"line_end":1619,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557416,"byte_end":557419,"line_start":1620,"line_end":1620,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](core::slice::RChunksExact::remainder)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557421,"byte_end":557497,"line_start":1621,"line_end":1621,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557499,"byte_end":557502,"line_start":1622,"line_end":1622,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557504,"byte_end":557544,"line_start":1623,"line_end":1623,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":557581,"byte_end":557595,"line_start":1624,"line_end":1624,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4533},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":559808,"byte_end":559823,"line_start":1710,"line_end":1710,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4539}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExactMut`](core::slice::RChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.into_remainder()`]: Self::into_remainder\n[`.rchunks_exact_mut()`]: crate::slice::BitSlice::rchunks_exact_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":559062,"byte_end":559779,"line_start":1688,"line_end":1708,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":561056,"byte_end":561070,"line_start":1759,"line_end":1759,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560505,"byte_end":560580,"line_start":1743,"line_end":1743,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560582,"byte_end":560650,"line_start":1744,"line_end":1744,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560652,"byte_end":560676,"line_start":1745,"line_end":1745,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560678,"byte_end":560681,"line_start":1746,"line_end":1746,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560683,"byte_end":560697,"line_start":1747,"line_end":1747,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560699,"byte_end":560702,"line_start":1748,"line_end":1748,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560704,"byte_end":560756,"line_start":1749,"line_end":1749,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560758,"byte_end":560761,"line_start":1750,"line_end":1750,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560763,"byte_end":560784,"line_start":1751,"line_end":1751,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560786,"byte_end":560789,"line_start":1752,"line_end":1752,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560791,"byte_end":560865,"line_start":1753,"line_end":1753,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560867,"byte_end":560889,"line_start":1754,"line_end":1754,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560891,"byte_end":560894,"line_start":1755,"line_end":1755,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::RChunksExactMut::into_remainder","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560896,"byte_end":560952,"line_start":1756,"line_end":1756,"column_start":2,"column_end":58}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560954,"byte_end":560994,"line_start":1757,"line_end":1757,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":561031,"byte_end":561045,"line_start":1758,"line_end":1758,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4593},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565350,"byte_end":565355,"line_start":1966,"line_end":1966,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4598},{"krate":0,"index":4599},{"krate":0,"index":4600}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`.split()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Split`](core::slice::Split)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split()`]: crate::slice::BitSlice::split\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":564872,"byte_end":565321,"line_start":1948,"line_end":1964,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2761},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":566955,"byte_end":566963,"line_start":2039,"line_end":2039,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768}],"decl_id":null,"docs":" An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.\n\nThis struct is created by the [`.split_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitMut`](core::slice::SplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split_mut()`]: crate::slice::BitSlice::split_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":566468,"byte_end":566943,"line_start":2022,"line_end":2038,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4683},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":568680,"byte_end":568686,"line_start":2118,"line_end":2118,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplit`](core::slice::RSplit)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit()`]: crate::slice::BitSlice::rsplit\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":568154,"byte_end":568651,"line_start":2100,"line_end":2116,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2769},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":570149,"byte_end":570158,"line_start":2177,"line_end":2177,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitMut`](core::slice::RSplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit_mut()`]: crate::slice::BitSlice::rsplit_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":569622,"byte_end":570137,"line_start":2160,"line_end":2176,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2779},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":571954,"byte_end":571960,"line_start":2245,"line_end":2245,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":2784},{"krate":0,"index":2785}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`.splitn()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitN`](core::slice::SplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.splitn()`]: crate::slice::BitSlice::splitn\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":571451,"byte_end":571942,"line_start":2228,"line_end":2244,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2786},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":572723,"byte_end":572732,"line_start":2276,"line_end":2276,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":2791},{"krate":0,"index":2792}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitNMut`](core::slice::SplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`splitn_mut`]: crate::slice::BitSlice::splitn_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":572208,"byte_end":572711,"line_start":2259,"line_end":2275,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2793},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":573528,"byte_end":573535,"line_start":2308,"line_end":2308,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":2798},{"krate":0,"index":2799}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitN`](core::slice::RSplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn`]: crate::slice::BitSlice::rsplitn\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":572983,"byte_end":573516,"line_start":2290,"line_end":2307,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2800},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":574347,"byte_end":574357,"line_start":2340,"line_end":2340,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":2805},{"krate":0,"index":2806}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitNMut`](core::slice::RSplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn_mut`]: crate::slice::BitSlice::rsplitn_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":573784,"byte_end":574335,"line_start":2322,"line_end":2339,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4865},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":576793,"byte_end":576801,"line_start":2444,"line_end":2444,"column_start":12,"column_end":20},"name":"IterOnes","qualname":"::slice::iter::IterOnes","value":"IterOnes {  }","parent":null,"children":[{"krate":0,"index":4869},{"krate":0,"index":4870}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are set to `1`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are set to `1`.\n\nThis struct is created by the [`.iter_ones()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_ones()`]: crate::slice::BitSlice::iter_ones\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":576494,"byte_end":576719,"line_start":2436,"line_end":2442,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4914},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580130,"byte_end":580139,"line_start":2606,"line_end":2606,"column_start":12,"column_end":21},"name":"IterZeros","qualname":"::slice::iter::IterZeros","value":"IterZeros {  }","parent":null,"children":[{"krate":0,"index":4918},{"krate":0,"index":4919}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are cleared to `0`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are cleared to `0`.\n\nThis struct is created by the [`.iter_zeros()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_zeros()`]: crate::slice::BitSlice::iter_zeros\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579824,"byte_end":580056,"line_start":2598,"line_end":2604,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4963},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588611,"byte_end":588625,"line_start":2946,"line_end":2946,"column_start":5,"column_end":19},"name":"IterMutNoAlias","qualname":"::slice::iter::IterMutNoAlias","value":"IterMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":4967}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5013},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588744,"byte_end":588760,"line_start":2950,"line_end":2950,"column_start":5,"column_end":21},"name":"ChunksMutNoAlias","qualname":"::slice::iter::ChunksMutNoAlias","value":"ChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5017}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5063},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588868,"byte_end":588889,"line_start":2954,"line_end":2954,"column_start":5,"column_end":26},"name":"ChunksExactMutNoAlias","qualname":"::slice::iter::ChunksExactMutNoAlias","value":"ChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5067}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5113},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588993,"byte_end":589010,"line_start":2958,"line_end":2958,"column_start":5,"column_end":22},"name":"RChunksMutNoAlias","qualname":"::slice::iter::RChunksMutNoAlias","value":"RChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5117}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5163},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589119,"byte_end":589141,"line_start":2962,"line_end":2962,"column_start":5,"column_end":27},"name":"RChunksExactMutNoAlias","qualname":"::slice::iter::RChunksExactMutNoAlias","value":"RChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5167}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5213},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589247,"byte_end":589262,"line_start":2966,"line_end":2966,"column_start":5,"column_end":20},"name":"SplitMutNoAlias","qualname":"::slice::iter::SplitMutNoAlias","value":"SplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5218}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5272},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589369,"byte_end":589385,"line_start":2970,"line_end":2970,"column_start":5,"column_end":21},"name":"RSplitMutNoAlias","qualname":"::slice::iter::RSplitMutNoAlias","value":"RSplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5277}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5331},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589492,"byte_end":589508,"line_start":2974,"line_end":2974,"column_start":5,"column_end":21},"name":"SplitNMutNoAlias","qualname":"::slice::iter::SplitNMutNoAlias","value":"SplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5336}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5390},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589616,"byte_end":589633,"line_start":2978,"line_end":2978,"column_start":5,"column_end":22},"name":"RSplitNMutNoAlias","qualname":"::slice::iter::RSplitNMutNoAlias","value":"RSplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5395}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583654,"byte_end":583726,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583729,"byte_end":583747,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583750,"byte_end":583753,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583756,"byte_end":583826,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583829,"byte_end":583900,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583903,"byte_end":583968,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583971,"byte_end":584042,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584045,"byte_end":584116,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584119,"byte_end":584122,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584125,"byte_end":584196,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584199,"byte_end":584271,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584274,"byte_end":584344,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584347,"byte_end":584415,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584418,"byte_end":584428,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584431,"byte_end":584434,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584437,"byte_end":584484,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584487,"byte_end":584530,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3221},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":372316,"byte_end":372324,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\n`BitSlice<O, T>` is an unsized region type; you interact with it through\n`&BitSlice<O, T>` and `&mut BitSlice<O, T>` references, which work exactly like\nall other Rust references. As with the standard slice’s relationship to arrays\nand vectors, this is [`bitvec`]’s primary working type, but you will probably\nhold it through one of the provided [`BitArray`], [`BitBox`], or [`BitVec`]\ncontainers.\n\n`BitSlice` is conceptually a `[bool]` slice, and provides a nearly complete\nmirror of `[bool]`’s API.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\ncalculations from you. `BitSlice` does far more than this: it offers you the\nfull Rust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns you already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().by_ref().position(stop).unwrap_or(0);\n  let back = bits.iter().by_ref().rposition(stop).map_or(0, |p| p + 1);\n  &bits[front .. back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitRef<Mut, O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n[`BitBox`], which behaves like [`Box<[T]>`](alloc::boxed::Box), and [`BitVec`],\nwhich behaves like [`Vec<T>`]. It cannot be used as the type parameter to a\nstandard-library-provided handle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\n[`BitStore`] is the simpler of the two parameters. It refers to the integer type\nused to hold bits. It must be one of the Rust unsigned integer fundamentals:\n`u8`, `u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it\ncan also be an alias-safed wrapper over them (see the [`access`] module) in\norder to permit bit-slices to share underlying memory without interfering with\neach other.\n\n`BitSlice` references can only be constructed over the integers, not over their\naliasing wrappers. `BitSlice` will only use aliasing types in its `T` slots when\nyou invoke APIs that produce them, such as [`.split_at_mut()`].\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\n[`BitOrder`] is the more complex parameter. It has a default argument which,\nlike `usize`, is the good-enough choice when you do not explicitly need to\ncontrol the representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! [`bitvec`] provides these\ntwo main orders as types for you, and if you need a different one, it also\nprovides the tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value [`T::MIN`][minval] for\nsigned integers on most machines).\n\nFor example, this is the ordering used by most C compilers to lay out bit-field\nstruct members on little-endian **byte**-ordered machines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value\n[`T::MIN`][minval] for most signed integers) and the final index at the least\nsignificant bit (numeric value `1`).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on big-endian **byte**-ordered\nmachines.\n\n### Default Ordering\n\nThe default ordering is [`Lsb0`], as it typically produces shorter object code\nthan [`Msb0`] does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use [`mem::transmute`] with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof [`T: BitStore`] type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the [`vec!`] arguments, and creates an\nappropriate buffer in the local scope. The macro expands to a borrowed\n[`BitArray`] temporary; currently, it cannot be assigned to a `static` binding.\n\n```rust\nuse bitvec::prelude::*;\n\nlet immut = bits![Lsb0, u8; 0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable: &mut BitSlice<_, _> = bits![mut Msb0, u8; 0; 8];\n\nassert_ne!(immut, mutable);\nmutable.clone_from_bitslice(immut);\nassert_eq!(immut, mutable);\n```\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct\n`BitSlice` references over them. These are the most basic ways to borrow memory\nand view it as bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements [`.view_bits::<O>()`] and\n[`.view_bits_mut::<O>()`] methods on elements, arrays not larger than 64\nelements, and slices. This trait, imported in the crate prelude, is *probably*\nthe easiest way for you to borrow memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Lsb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[minval]: https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitRef<Mut, O, T>`]: crate::ptr::BitRef\n[`BitOrder`]: crate::order::BitOrder\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell<T>`]: core::cell::Cell\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`T: BitStore`]: crate::store::BitStore\n[`Vec<T>`]: alloc::vec::Vec\n\n[`access`]: crate::access\n[`bits!`]: macro@crate::bits\n[`bitvec`]: crate\n[`bitvec::prelude::LocalBits`]: crate::order::LocalBits\n[`from_element`]: Self::from_element\n[`from_element_mut`]: Self::from_element_mut\n[`from_slice`]: Self::from_slice\n[`from_slice_mut`]: Self::from_slice_mut\n[`mem::transmute`]: core::mem::transmute\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n[`vec!`]: macro@alloc::vec\n\n[`.split_at_mut()`]: Self::split_at_mut\n[`.view_bits::<O>()`]: crate::view::BitView::view_bits\n[`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":358804,"byte_end":372283,"line_start":134,"line_end":456,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":372284,"byte_end":372304,"line_start":457,"line_end":457,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374554,"byte_end":374566,"line_start":524,"line_end":524,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373761,"byte_end":373829,"line_start":496,"line_end":496,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373831,"byte_end":373834,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373836,"byte_end":373908,"line_start":498,"line_end":498,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits::<O>()`] which delegates to this function","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373910,"byte_end":373986,"line_start":499,"line_end":499,"column_start":2,"column_end":78}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373988,"byte_end":374036,"line_start":500,"line_end":500,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374038,"byte_end":374041,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374043,"byte_end":374059,"line_start":502,"line_end":502,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374061,"byte_end":374064,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374066,"byte_end":374119,"line_start":504,"line_end":504,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374121,"byte_end":374124,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374126,"byte_end":374139,"line_start":506,"line_end":506,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374141,"byte_end":374144,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374146,"byte_end":374195,"line_start":508,"line_end":508,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374197,"byte_end":374200,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374202,"byte_end":374216,"line_start":510,"line_end":510,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374218,"byte_end":374221,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374223,"byte_end":374234,"line_start":512,"line_end":512,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374236,"byte_end":374263,"line_start":513,"line_end":513,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374265,"byte_end":374268,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374270,"byte_end":374289,"line_start":515,"line_end":515,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_element(&elem);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374291,"byte_end":374347,"line_start":516,"line_end":516,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374349,"byte_end":374379,"line_start":517,"line_end":517,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374381,"byte_end":374388,"line_start":518,"line_end":518,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374390,"byte_end":374393,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374395,"byte_end":374435,"line_start":520,"line_end":520,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374437,"byte_end":374474,"line_start":521,"line_end":521,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374476,"byte_end":374534,"line_start":522,"line_end":522,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374536,"byte_end":374545,"line_start":523,"line_end":523,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3231},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375713,"byte_end":375729,"line_start":562,"line_end":562,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374689,"byte_end":374759,"line_start":529,"line_end":529,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374761,"byte_end":374764,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374766,"byte_end":374838,"line_start":531,"line_end":531,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits_mut::<O>()`] which delegates to this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374840,"byte_end":374911,"line_start":532,"line_end":532,"column_start":2,"column_end":73}},{"value":"/ function and may be more convenient for you to write.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374913,"byte_end":374970,"line_start":533,"line_end":533,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374972,"byte_end":374975,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374977,"byte_end":374993,"line_start":535,"line_end":535,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":374995,"byte_end":374998,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375000,"byte_end":375057,"line_start":537,"line_end":537,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375059,"byte_end":375062,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375064,"byte_end":375077,"line_start":539,"line_end":539,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375079,"byte_end":375082,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375084,"byte_end":375141,"line_start":541,"line_end":541,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375143,"byte_end":375146,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375148,"byte_end":375220,"line_start":543,"line_end":543,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375222,"byte_end":375277,"line_start":544,"line_end":544,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375279,"byte_end":375282,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375284,"byte_end":375298,"line_start":546,"line_end":546,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375300,"byte_end":375303,"line_start":547,"line_end":547,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375305,"byte_end":375316,"line_start":548,"line_end":548,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375318,"byte_end":375345,"line_start":549,"line_end":549,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375347,"byte_end":375350,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375352,"byte_end":375376,"line_start":551,"line_end":551,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375378,"byte_end":375442,"line_start":552,"line_end":552,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375444,"byte_end":375467,"line_start":553,"line_end":553,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375469,"byte_end":375504,"line_start":554,"line_end":554,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375506,"byte_end":375530,"line_start":555,"line_end":555,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375532,"byte_end":375539,"line_start":556,"line_end":556,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375541,"byte_end":375544,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375546,"byte_end":375586,"line_start":558,"line_end":558,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375588,"byte_end":375625,"line_start":559,"line_end":559,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375627,"byte_end":375693,"line_start":560,"line_end":560,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375695,"byte_end":375704,"line_start":561,"line_end":561,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377160,"byte_end":377170,"line_start":606,"line_end":606,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<&Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375860,"byte_end":375919,"line_start":567,"line_end":567,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375921,"byte_end":375924,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375926,"byte_end":375996,"line_start":569,"line_end":569,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":375998,"byte_end":376074,"line_start":570,"line_end":570,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376076,"byte_end":376113,"line_start":571,"line_end":571,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376115,"byte_end":376118,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376120,"byte_end":376136,"line_start":573,"line_end":573,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376138,"byte_end":376141,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376143,"byte_end":376212,"line_start":575,"line_end":575,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376214,"byte_end":376217,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376219,"byte_end":376232,"line_start":577,"line_end":577,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376234,"byte_end":376237,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view of the provided slice. The error condition is only","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376239,"byte_end":376312,"line_start":579,"line_end":579,"column_start":2,"column_end":75}},{"value":"/ encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376314,"byte_end":376380,"line_start":580,"line_end":580,"column_start":2,"column_end":68}},{"value":"/ `&BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376382,"byte_end":376454,"line_start":581,"line_end":581,"column_start":2,"column_end":74}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376456,"byte_end":376517,"line_start":582,"line_end":582,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376519,"byte_end":376522,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376524,"byte_end":376540,"line_start":584,"line_end":584,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376542,"byte_end":376545,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376547,"byte_end":376621,"line_start":586,"line_end":586,"column_start":2,"column_end":76}},{"value":"/ zeroth element in `slice`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376623,"byte_end":376653,"line_start":587,"line_end":587,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376655,"byte_end":376658,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376660,"byte_end":376674,"line_start":589,"line_end":589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376676,"byte_end":376679,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376681,"byte_end":376692,"line_start":591,"line_end":591,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376694,"byte_end":376721,"line_start":592,"line_end":592,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376723,"byte_end":376726,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376728,"byte_end":376754,"line_start":594,"line_end":594,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376756,"byte_end":376819,"line_start":595,"line_end":595,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376821,"byte_end":376843,"line_start":596,"line_end":596,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376845,"byte_end":376852,"line_start":597,"line_end":597,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376854,"byte_end":376857,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376859,"byte_end":376935,"line_start":599,"line_end":599,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":376937,"byte_end":377002,"line_start":600,"line_end":600,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377004,"byte_end":377007,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377009,"byte_end":377046,"line_start":602,"line_end":602,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377048,"byte_end":377080,"line_start":603,"line_end":603,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377082,"byte_end":377140,"line_start":604,"line_end":604,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377142,"byte_end":377151,"line_start":605,"line_end":605,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379522,"byte_end":379536,"line_start":675,"line_end":675,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Result<&mut Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377570,"byte_end":377637,"line_start":618,"line_end":618,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377639,"byte_end":377642,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377644,"byte_end":377714,"line_start":620,"line_end":620,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377716,"byte_end":377789,"line_start":621,"line_end":621,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377791,"byte_end":377835,"line_start":622,"line_end":622,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377837,"byte_end":377840,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377842,"byte_end":377858,"line_start":624,"line_end":624,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377860,"byte_end":377863,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377865,"byte_end":377938,"line_start":626,"line_end":626,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377940,"byte_end":377943,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377945,"byte_end":377958,"line_start":628,"line_end":628,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377960,"byte_end":377963,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view of the provided slice. The error condition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377965,"byte_end":378037,"line_start":630,"line_end":630,"column_start":2,"column_end":74}},{"value":"/ only encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378039,"byte_end":378110,"line_start":631,"line_end":631,"column_start":2,"column_end":73}},{"value":"/ `&mut BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378112,"byte_end":378188,"line_start":632,"line_end":632,"column_start":2,"column_end":78}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378190,"byte_end":378251,"line_start":633,"line_end":633,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378253,"byte_end":378256,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378258,"byte_end":378331,"line_start":635,"line_end":635,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378333,"byte_end":378388,"line_start":636,"line_end":636,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378390,"byte_end":378393,"line_start":637,"line_end":637,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378395,"byte_end":378411,"line_start":638,"line_end":638,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378413,"byte_end":378416,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378418,"byte_end":378492,"line_start":640,"line_end":640,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378494,"byte_end":378528,"line_start":641,"line_end":641,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378530,"byte_end":378533,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378535,"byte_end":378549,"line_start":643,"line_end":643,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378551,"byte_end":378554,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378556,"byte_end":378567,"line_start":645,"line_end":645,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378569,"byte_end":378596,"line_start":646,"line_end":646,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378598,"byte_end":378601,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378603,"byte_end":378632,"line_start":648,"line_end":648,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378634,"byte_end":378706,"line_start":649,"line_end":649,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378708,"byte_end":378711,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378713,"byte_end":378735,"line_start":651,"line_end":651,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378737,"byte_end":378759,"line_start":652,"line_end":652,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378761,"byte_end":378782,"line_start":653,"line_end":653,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378784,"byte_end":378812,"line_start":654,"line_end":654,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378814,"byte_end":378821,"line_start":655,"line_end":655,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378823,"byte_end":378826,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378828,"byte_end":378904,"line_start":657,"line_end":657,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378906,"byte_end":378980,"line_start":658,"line_end":658,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378982,"byte_end":379022,"line_start":659,"line_end":659,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379024,"byte_end":379027,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379029,"byte_end":379053,"line_start":661,"line_end":661,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379055,"byte_end":379088,"line_start":662,"line_end":662,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379090,"byte_end":379117,"line_start":663,"line_end":663,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379119,"byte_end":379122,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<Lsb0, usize>::MAX_ELTS];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379124,"byte_end":379191,"line_start":665,"line_end":665,"column_start":2,"column_end":69}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379193,"byte_end":379268,"line_start":666,"line_end":666,"column_start":2,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379270,"byte_end":379277,"line_start":667,"line_end":667,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379279,"byte_end":379347,"line_start":668,"line_end":668,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379349,"byte_end":379356,"line_start":669,"line_end":669,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379358,"byte_end":379361,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379363,"byte_end":379400,"line_start":671,"line_end":671,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379402,"byte_end":379434,"line_start":672,"line_end":672,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379436,"byte_end":379502,"line_start":673,"line_end":673,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379504,"byte_end":379513,"line_start":674,"line_end":674,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380325,"byte_end":380345,"line_start":701,"line_end":701,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379812,"byte_end":379887,"line_start":687,"line_end":687,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379889,"byte_end":379926,"line_start":688,"line_end":688,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379928,"byte_end":379931,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379933,"byte_end":379945,"line_start":690,"line_end":690,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379947,"byte_end":379950,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379952,"byte_end":380024,"line_start":692,"line_end":692,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380026,"byte_end":380102,"line_start":693,"line_end":693,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380104,"byte_end":380180,"line_start":694,"line_end":694,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380182,"byte_end":380185,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380187,"byte_end":380217,"line_start":696,"line_end":696,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380219,"byte_end":380222,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380224,"byte_end":380256,"line_start":698,"line_end":698,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice()`]: Self::from_slice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380258,"byte_end":380298,"line_start":699,"line_end":699,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380300,"byte_end":380309,"line_start":700,"line_end":700,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3235},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381037,"byte_end":381061,"line_start":722,"line_end":722,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380512,"byte_end":380587,"line_start":708,"line_end":708,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380589,"byte_end":380626,"line_start":709,"line_end":709,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380628,"byte_end":380631,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380633,"byte_end":380645,"line_start":711,"line_end":711,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380647,"byte_end":380650,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380652,"byte_end":380724,"line_start":713,"line_end":713,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380726,"byte_end":380802,"line_start":714,"line_end":714,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380804,"byte_end":380880,"line_start":715,"line_end":715,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380882,"byte_end":380885,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380887,"byte_end":380921,"line_start":717,"line_end":717,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380923,"byte_end":380926,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380928,"byte_end":380960,"line_start":719,"line_end":719,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice_mut()`]: Self::from_slice_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380962,"byte_end":381010,"line_start":720,"line_end":720,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381012,"byte_end":381021,"line_start":721,"line_end":721,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381525,"byte_end":381530,"line_start":742,"line_end":742,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty slice reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381240,"byte_end":381279,"line_start":729,"line_end":729,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381281,"byte_end":381284,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&[]` for ordinary slices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381286,"byte_end":381338,"line_start":731,"line_end":731,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381340,"byte_end":381343,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381345,"byte_end":381359,"line_start":733,"line_end":733,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381361,"byte_end":381364,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381366,"byte_end":381377,"line_start":735,"line_end":735,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381379,"byte_end":381406,"line_start":736,"line_end":736,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381408,"byte_end":381411,"line_start":737,"line_end":737,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381413,"byte_end":381457,"line_start":738,"line_end":738,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381459,"byte_end":381488,"line_start":739,"line_end":739,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381490,"byte_end":381497,"line_start":740,"line_end":740,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381499,"byte_end":381516,"line_start":741,"line_end":741,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3238},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381911,"byte_end":381920,"line_start":759,"line_end":759,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice reference.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381606,"byte_end":381653,"line_start":746,"line_end":746,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381655,"byte_end":381658,"line_start":747,"line_end":747,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&mut []` for ordinary slices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381660,"byte_end":381716,"line_start":748,"line_end":748,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381718,"byte_end":381721,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381723,"byte_end":381737,"line_start":750,"line_end":750,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381739,"byte_end":381742,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381744,"byte_end":381755,"line_start":752,"line_end":752,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381757,"byte_end":381784,"line_start":753,"line_end":753,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381786,"byte_end":381789,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381791,"byte_end":381843,"line_start":755,"line_end":755,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381845,"byte_end":381874,"line_start":756,"line_end":756,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381876,"byte_end":381883,"line_start":757,"line_end":757,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381885,"byte_end":381902,"line_start":758,"line_end":758,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382895,"byte_end":382898,"line_start":803,"line_end":803,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381985,"byte_end":382023,"line_start":763,"line_end":763,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382025,"byte_end":382028,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382030,"byte_end":382046,"line_start":765,"line_end":765,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382048,"byte_end":382051,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382053,"byte_end":382070,"line_start":767,"line_end":767,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382072,"byte_end":382146,"line_start":768,"line_end":768,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382148,"byte_end":382169,"line_start":769,"line_end":769,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382171,"byte_end":382245,"line_start":770,"line_end":770,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382247,"byte_end":382250,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382252,"byte_end":382265,"line_start":772,"line_end":772,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382267,"byte_end":382270,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382272,"byte_end":382347,"line_start":774,"line_end":774,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382349,"byte_end":382352,"line_start":775,"line_end":775,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382354,"byte_end":382366,"line_start":776,"line_end":776,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382368,"byte_end":382371,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382373,"byte_end":382439,"line_start":778,"line_end":778,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382441,"byte_end":382444,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382446,"byte_end":382460,"line_start":780,"line_end":780,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382462,"byte_end":382465,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382467,"byte_end":382478,"line_start":782,"line_end":782,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382480,"byte_end":382507,"line_start":783,"line_end":783,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382509,"byte_end":382512,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382514,"byte_end":382542,"line_start":785,"line_end":785,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382544,"byte_end":382547,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382549,"byte_end":382571,"line_start":787,"line_end":787,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382573,"byte_end":382595,"line_start":788,"line_end":788,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382597,"byte_end":382618,"line_start":789,"line_end":789,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382620,"byte_end":382627,"line_start":790,"line_end":790,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382629,"byte_end":382632,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382634,"byte_end":382710,"line_start":792,"line_end":792,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382712,"byte_end":382715,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382717,"byte_end":382741,"line_start":794,"line_end":794,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382743,"byte_end":382770,"line_start":795,"line_end":795,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382772,"byte_end":382775,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382777,"byte_end":382805,"line_start":797,"line_end":797,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382807,"byte_end":382830,"line_start":798,"line_end":798,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382832,"byte_end":382839,"line_start":799,"line_end":799,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382841,"byte_end":382844,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382846,"byte_end":382875,"line_start":801,"line_end":801,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382877,"byte_end":382886,"line_start":802,"line_end":802,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383568,"byte_end":383571,"line_start":840,"line_end":840,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383045,"byte_end":383104,"line_start":810,"line_end":810,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383106,"byte_end":383109,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383111,"byte_end":383128,"line_start":812,"line_end":812,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383130,"byte_end":383133,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383135,"byte_end":383146,"line_start":814,"line_end":814,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383148,"byte_end":383160,"line_start":815,"line_end":815,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383162,"byte_end":383174,"line_start":816,"line_end":816,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383176,"byte_end":383188,"line_start":817,"line_end":817,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383190,"byte_end":383202,"line_start":818,"line_end":818,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383204,"byte_end":383211,"line_start":819,"line_end":819,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383213,"byte_end":383216,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383218,"byte_end":383234,"line_start":821,"line_end":821,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383236,"byte_end":383239,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383241,"byte_end":383254,"line_start":823,"line_end":823,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383256,"byte_end":383259,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383261,"byte_end":383274,"line_start":825,"line_end":825,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383276,"byte_end":383279,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383281,"byte_end":383352,"line_start":827,"line_end":827,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383354,"byte_end":383366,"line_start":828,"line_end":828,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383368,"byte_end":383371,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383373,"byte_end":383387,"line_start":830,"line_end":830,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383389,"byte_end":383392,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383394,"byte_end":383405,"line_start":832,"line_end":832,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383407,"byte_end":383434,"line_start":833,"line_end":833,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383436,"byte_end":383439,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383441,"byte_end":383474,"line_start":835,"line_end":835,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383476,"byte_end":383506,"line_start":836,"line_end":836,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383508,"byte_end":383539,"line_start":837,"line_end":837,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383541,"byte_end":383548,"line_start":838,"line_end":838,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383550,"byte_end":383559,"line_start":839,"line_end":839,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384596,"byte_end":384599,"line_start":886,"line_end":886,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384063,"byte_end":384131,"line_start":856,"line_end":856,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384133,"byte_end":384136,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384138,"byte_end":384155,"line_start":858,"line_end":858,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384157,"byte_end":384160,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384162,"byte_end":384173,"line_start":860,"line_end":860,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384175,"byte_end":384187,"line_start":861,"line_end":861,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384189,"byte_end":384201,"line_start":862,"line_end":862,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384203,"byte_end":384215,"line_start":863,"line_end":863,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384217,"byte_end":384229,"line_start":864,"line_end":864,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384231,"byte_end":384238,"line_start":865,"line_end":865,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384240,"byte_end":384243,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384245,"byte_end":384261,"line_start":867,"line_end":867,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384263,"byte_end":384266,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384268,"byte_end":384281,"line_start":869,"line_end":869,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384283,"byte_end":384286,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384288,"byte_end":384301,"line_start":871,"line_end":871,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384303,"byte_end":384306,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384308,"byte_end":384381,"line_start":873,"line_end":873,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384383,"byte_end":384394,"line_start":874,"line_end":874,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384396,"byte_end":384399,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384401,"byte_end":384415,"line_start":876,"line_end":876,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384417,"byte_end":384420,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384422,"byte_end":384433,"line_start":878,"line_end":878,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384435,"byte_end":384462,"line_start":879,"line_end":879,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384464,"byte_end":384467,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384469,"byte_end":384502,"line_start":881,"line_end":881,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384504,"byte_end":384534,"line_start":882,"line_end":882,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384536,"byte_end":384567,"line_start":883,"line_end":883,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384569,"byte_end":384576,"line_start":884,"line_end":884,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384578,"byte_end":384587,"line_start":885,"line_end":885,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386165,"byte_end":386172,"line_start":945,"line_end":945,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385654,"byte_end":385719,"line_start":916,"line_end":916,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385721,"byte_end":385724,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385726,"byte_end":385743,"line_start":918,"line_end":918,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385745,"byte_end":385748,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385750,"byte_end":385761,"line_start":920,"line_end":920,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385763,"byte_end":385775,"line_start":921,"line_end":921,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385777,"byte_end":385789,"line_start":922,"line_end":922,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385791,"byte_end":385803,"line_start":923,"line_end":923,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385805,"byte_end":385817,"line_start":924,"line_end":924,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385819,"byte_end":385826,"line_start":925,"line_end":925,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385828,"byte_end":385831,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385833,"byte_end":385849,"line_start":927,"line_end":927,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385851,"byte_end":385854,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385856,"byte_end":385869,"line_start":929,"line_end":929,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385871,"byte_end":385874,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385876,"byte_end":385889,"line_start":931,"line_end":931,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385891,"byte_end":385894,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385896,"byte_end":385947,"line_start":933,"line_end":933,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385949,"byte_end":385952,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385954,"byte_end":385968,"line_start":935,"line_end":935,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385970,"byte_end":385973,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385975,"byte_end":385986,"line_start":937,"line_end":937,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385988,"byte_end":386015,"line_start":938,"line_end":938,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386017,"byte_end":386020,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386022,"byte_end":386055,"line_start":940,"line_end":940,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386057,"byte_end":386092,"line_start":941,"line_end":941,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386094,"byte_end":386128,"line_start":942,"line_end":942,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386130,"byte_end":386137,"line_start":943,"line_end":943,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386139,"byte_end":386156,"line_start":944,"line_end":944,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3250},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386716,"byte_end":386723,"line_start":978,"line_end":978,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386209,"byte_end":386272,"line_start":949,"line_end":949,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386274,"byte_end":386277,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386279,"byte_end":386296,"line_start":951,"line_end":951,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386298,"byte_end":386301,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386303,"byte_end":386314,"line_start":953,"line_end":953,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386316,"byte_end":386328,"line_start":954,"line_end":954,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386330,"byte_end":386342,"line_start":955,"line_end":955,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386344,"byte_end":386356,"line_start":956,"line_end":956,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386358,"byte_end":386370,"line_start":957,"line_end":957,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386372,"byte_end":386379,"line_start":958,"line_end":958,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386381,"byte_end":386384,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386386,"byte_end":386402,"line_start":960,"line_end":960,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386404,"byte_end":386407,"line_start":961,"line_end":961,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386409,"byte_end":386422,"line_start":962,"line_end":962,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386424,"byte_end":386427,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386429,"byte_end":386442,"line_start":964,"line_end":964,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386444,"byte_end":386447,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386449,"byte_end":386498,"line_start":966,"line_end":966,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386500,"byte_end":386503,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386505,"byte_end":386519,"line_start":968,"line_end":968,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386521,"byte_end":386524,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386526,"byte_end":386537,"line_start":970,"line_end":970,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386539,"byte_end":386566,"line_start":971,"line_end":971,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386568,"byte_end":386571,"line_start":972,"line_end":972,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386573,"byte_end":386606,"line_start":973,"line_end":973,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386608,"byte_end":386643,"line_start":974,"line_end":974,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386645,"byte_end":386679,"line_start":975,"line_end":975,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386681,"byte_end":386688,"line_start":976,"line_end":976,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386690,"byte_end":386707,"line_start":977,"line_end":977,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3251},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387550,"byte_end":387554,"line_start":1021,"line_end":1021,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386760,"byte_end":386833,"line_start":982,"line_end":982,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386835,"byte_end":386859,"line_start":983,"line_end":983,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386861,"byte_end":386864,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all()`] or [`.not_any()`] are `true`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386866,"byte_end":386936,"line_start":985,"line_end":985,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386938,"byte_end":386941,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386943,"byte_end":386960,"line_start":987,"line_end":987,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386962,"byte_end":386965,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386967,"byte_end":386978,"line_start":989,"line_end":989,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386980,"byte_end":386992,"line_start":990,"line_end":990,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386994,"byte_end":387006,"line_start":991,"line_end":991,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387008,"byte_end":387020,"line_start":992,"line_end":992,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387022,"byte_end":387034,"line_start":993,"line_end":993,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387036,"byte_end":387043,"line_start":994,"line_end":994,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387045,"byte_end":387048,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387050,"byte_end":387066,"line_start":996,"line_end":996,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387068,"byte_end":387071,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387073,"byte_end":387086,"line_start":998,"line_end":998,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387088,"byte_end":387091,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387093,"byte_end":387106,"line_start":1000,"line_end":1000,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387108,"byte_end":387111,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387113,"byte_end":387184,"line_start":1002,"line_end":1002,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387186,"byte_end":387198,"line_start":1003,"line_end":1003,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387200,"byte_end":387203,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387205,"byte_end":387219,"line_start":1005,"line_end":1005,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387221,"byte_end":387224,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387226,"byte_end":387237,"line_start":1007,"line_end":1007,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387239,"byte_end":387266,"line_start":1008,"line_end":1008,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387268,"byte_end":387271,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387273,"byte_end":387303,"line_start":1010,"line_end":1010,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387305,"byte_end":387344,"line_start":1011,"line_end":1011,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387346,"byte_end":387349,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387351,"byte_end":387383,"line_start":1013,"line_end":1013,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387385,"byte_end":387419,"line_start":1014,"line_end":1014,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387421,"byte_end":387446,"line_start":1015,"line_end":1015,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387448,"byte_end":387455,"line_start":1016,"line_end":1016,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387457,"byte_end":387460,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ [`.all()`]: Self::all","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387462,"byte_end":387487,"line_start":1018,"line_end":1018,"column_start":2,"column_end":27}},{"value":"/ [`.not_any()`]: Self::not_any","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387489,"byte_end":387522,"line_start":1019,"line_end":1019,"column_start":2,"column_end":35}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387524,"byte_end":387541,"line_start":1020,"line_end":1020,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3252},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388043,"byte_end":388053,"line_start":1046,"line_end":1046,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits set to `1` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits set to `1` in the slice contents.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387608,"byte_end":387671,"line_start":1025,"line_end":1025,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387673,"byte_end":387676,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387678,"byte_end":387694,"line_start":1027,"line_end":1027,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387696,"byte_end":387699,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387701,"byte_end":387714,"line_start":1029,"line_end":1029,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387716,"byte_end":387719,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387721,"byte_end":387734,"line_start":1031,"line_end":1031,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387736,"byte_end":387739,"line_start":1032,"line_end":1032,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387741,"byte_end":387804,"line_start":1033,"line_end":1033,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387806,"byte_end":387809,"line_start":1034,"line_end":1034,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387811,"byte_end":387825,"line_start":1035,"line_end":1035,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387827,"byte_end":387830,"line_start":1036,"line_end":1036,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387832,"byte_end":387848,"line_start":1037,"line_end":1037,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387850,"byte_end":387853,"line_start":1038,"line_end":1038,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387855,"byte_end":387866,"line_start":1039,"line_end":1039,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387868,"byte_end":387895,"line_start":1040,"line_end":1040,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387897,"byte_end":387900,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387902,"byte_end":387935,"line_start":1042,"line_end":1042,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387937,"byte_end":387980,"line_start":1043,"line_end":1043,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387982,"byte_end":388025,"line_start":1044,"line_end":1044,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388027,"byte_end":388034,"line_start":1045,"line_end":1045,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3256},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389121,"byte_end":389132,"line_start":1091,"line_end":1091,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits cleared to `0` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits cleared to `0` in the slice contents.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388676,"byte_end":388743,"line_start":1070,"line_end":1070,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388745,"byte_end":388748,"line_start":1071,"line_end":1071,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388750,"byte_end":388766,"line_start":1072,"line_end":1072,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388768,"byte_end":388771,"line_start":1073,"line_end":1073,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388773,"byte_end":388786,"line_start":1074,"line_end":1074,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388788,"byte_end":388791,"line_start":1075,"line_end":1075,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388793,"byte_end":388806,"line_start":1076,"line_end":1076,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388808,"byte_end":388811,"line_start":1077,"line_end":1077,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are cleared to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388813,"byte_end":388880,"line_start":1078,"line_end":1078,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388882,"byte_end":388885,"line_start":1079,"line_end":1079,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388887,"byte_end":388901,"line_start":1080,"line_end":1080,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388903,"byte_end":388906,"line_start":1081,"line_end":1081,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388908,"byte_end":388924,"line_start":1082,"line_end":1082,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388926,"byte_end":388929,"line_start":1083,"line_end":1083,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388931,"byte_end":388942,"line_start":1084,"line_end":1084,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388944,"byte_end":388971,"line_start":1085,"line_end":1085,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388973,"byte_end":388976,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388978,"byte_end":389011,"line_start":1087,"line_end":1087,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389013,"byte_end":389057,"line_start":1088,"line_end":1088,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389059,"byte_end":389103,"line_start":1089,"line_end":1089,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389105,"byte_end":389112,"line_start":1090,"line_end":1090,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390377,"byte_end":390386,"line_start":1138,"line_end":1138,"column_start":9,"column_end":18},"name":"iter_ones","qualname":"<BitSlice<O, T>>::iter_ones","value":"pub fn iter_ones(&Self) -> IterOnes<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are set to `1`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389762,"byte_end":389822,"line_start":1115,"line_end":1115,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389824,"byte_end":389827,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389829,"byte_end":389843,"line_start":1117,"line_end":1117,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389845,"byte_end":389848,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389850,"byte_end":389861,"line_start":1119,"line_end":1119,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389863,"byte_end":389890,"line_start":1120,"line_end":1120,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389892,"byte_end":389895,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389897,"byte_end":389945,"line_start":1122,"line_end":1122,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389947,"byte_end":389995,"line_start":1123,"line_end":1123,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389997,"byte_end":390000,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ let mut iter_ones = bits.iter_ones();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390002,"byte_end":390043,"line_start":1125,"line_end":1125,"column_start":2,"column_end":43}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390045,"byte_end":390078,"line_start":1126,"line_end":1126,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390080,"byte_end":390095,"line_start":1127,"line_end":1127,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390097,"byte_end":390115,"line_start":1128,"line_end":1128,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if bit { Some(idx) } else { None });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390117,"byte_end":390184,"line_start":1129,"line_end":1129,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390186,"byte_end":390189,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_ones.zip(compose).zip(indices) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390191,"byte_end":390251,"line_start":1131,"line_end":1131,"column_start":2,"column_end":62}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390253,"byte_end":390276,"line_start":1132,"line_end":1132,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390278,"byte_end":390301,"line_start":1133,"line_end":1133,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390303,"byte_end":390308,"line_start":1134,"line_end":1134,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390310,"byte_end":390317,"line_start":1135,"line_end":1135,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390319,"byte_end":390336,"line_start":1136,"line_end":1136,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390338,"byte_end":390368,"line_start":1137,"line_end":1137,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391064,"byte_end":391074,"line_start":1165,"line_end":1165,"column_start":9,"column_end":19},"name":"iter_zeros","qualname":"<BitSlice<O, T>>::iter_zeros","value":"pub fn iter_zeros(&Self) -> IterZeros<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are cleared to `0`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are cleared to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390441,"byte_end":390505,"line_start":1142,"line_end":1142,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390507,"byte_end":390510,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390512,"byte_end":390526,"line_start":1144,"line_end":1144,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390528,"byte_end":390531,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390533,"byte_end":390544,"line_start":1146,"line_end":1146,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390546,"byte_end":390573,"line_start":1147,"line_end":1147,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390575,"byte_end":390578,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 1, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390580,"byte_end":390628,"line_start":1149,"line_end":1149,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390630,"byte_end":390678,"line_start":1150,"line_end":1150,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390680,"byte_end":390683,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ let mut iter_zeros = bits.iter_zeros();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390685,"byte_end":390728,"line_start":1152,"line_end":1152,"column_start":2,"column_end":45}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390730,"byte_end":390763,"line_start":1153,"line_end":1153,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390765,"byte_end":390780,"line_start":1154,"line_end":1154,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390782,"byte_end":390800,"line_start":1155,"line_end":1155,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if !bit { Some(idx) } else { None });","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390802,"byte_end":390870,"line_start":1156,"line_end":1156,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390872,"byte_end":390875,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_zeros.zip(compose).zip(indices) {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390877,"byte_end":390938,"line_start":1158,"line_end":1158,"column_start":2,"column_end":63}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390940,"byte_end":390963,"line_start":1159,"line_end":1159,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390965,"byte_end":390988,"line_start":1160,"line_end":1160,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390990,"byte_end":390995,"line_start":1161,"line_end":1161,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390997,"byte_end":391004,"line_start":1162,"line_end":1162,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391006,"byte_end":391023,"line_start":1163,"line_end":1163,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391025,"byte_end":391055,"line_start":1164,"line_end":1164,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391399,"byte_end":391408,"line_start":1180,"line_end":1180,"column_start":9,"column_end":18},"name":"first_one","qualname":"<BitSlice<O, T>>::first_one","value":"pub fn first_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391131,"byte_end":391195,"line_start":1169,"line_end":1169,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391197,"byte_end":391200,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391202,"byte_end":391216,"line_start":1171,"line_end":1171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391218,"byte_end":391221,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391223,"byte_end":391234,"line_start":1173,"line_end":1173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391236,"byte_end":391263,"line_start":1174,"line_end":1174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391265,"byte_end":391268,"line_start":1175,"line_end":1175,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_one().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391270,"byte_end":391313,"line_start":1176,"line_end":1176,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 0, 1].first_one().unwrap(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391315,"byte_end":391370,"line_start":1177,"line_end":1177,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391372,"byte_end":391379,"line_start":1178,"line_end":1178,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391381,"byte_end":391390,"line_start":1179,"line_end":1179,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391736,"byte_end":391746,"line_start":1195,"line_end":1195,"column_start":9,"column_end":19},"name":"first_zero","qualname":"<BitSlice<O, T>>::first_zero","value":"pub fn first_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391466,"byte_end":391530,"line_start":1184,"line_end":1184,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391532,"byte_end":391535,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391537,"byte_end":391551,"line_start":1186,"line_end":1186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391553,"byte_end":391556,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391558,"byte_end":391569,"line_start":1188,"line_end":1188,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391571,"byte_end":391598,"line_start":1189,"line_end":1189,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391600,"byte_end":391603,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_zero().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391605,"byte_end":391649,"line_start":1191,"line_end":1191,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 1, 0].first_zero().unwrap(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391651,"byte_end":391707,"line_start":1192,"line_end":1192,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391709,"byte_end":391716,"line_start":1193,"line_end":1193,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391718,"byte_end":391727,"line_start":1194,"line_end":1194,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3264},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392073,"byte_end":392081,"line_start":1210,"line_end":1210,"column_start":9,"column_end":17},"name":"last_one","qualname":"<BitSlice<O, T>>::last_one","value":"pub fn last_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391805,"byte_end":391868,"line_start":1199,"line_end":1199,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391870,"byte_end":391873,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391875,"byte_end":391889,"line_start":1201,"line_end":1201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391891,"byte_end":391894,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391896,"byte_end":391907,"line_start":1203,"line_end":1203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391909,"byte_end":391936,"line_start":1204,"line_end":1204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391938,"byte_end":391941,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_one().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391943,"byte_end":391985,"line_start":1206,"line_end":1206,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![1, 0, 0, 1].last_one().unwrap(), 3);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391987,"byte_end":392044,"line_start":1207,"line_end":1207,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392046,"byte_end":392053,"line_start":1208,"line_end":1208,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392055,"byte_end":392064,"line_start":1209,"line_end":1209,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3265},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392414,"byte_end":392423,"line_start":1225,"line_end":1225,"column_start":9,"column_end":18},"name":"last_zero","qualname":"<BitSlice<O, T>>::last_zero","value":"pub fn last_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392144,"byte_end":392207,"line_start":1214,"line_end":1214,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392209,"byte_end":392212,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392214,"byte_end":392228,"line_start":1216,"line_end":1216,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392230,"byte_end":392233,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392235,"byte_end":392246,"line_start":1218,"line_end":1218,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392248,"byte_end":392275,"line_start":1219,"line_end":1219,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392277,"byte_end":392280,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_zero().is_none());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392282,"byte_end":392325,"line_start":1221,"line_end":1221,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 1, 1, 0].last_zero().unwrap(), 3);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392327,"byte_end":392385,"line_start":1222,"line_end":1222,"column_start":2,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392387,"byte_end":392394,"line_start":1223,"line_end":1223,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392396,"byte_end":392405,"line_start":1224,"line_end":1224,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392881,"byte_end":392893,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"name":"leading_ones","qualname":"<BitSlice<O, T>>::leading_ones","value":"pub fn leading_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392487,"byte_end":392561,"line_start":1229,"line_end":1229,"column_start":2,"column_end":76}},{"value":"/ bit set to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392563,"byte_end":392582,"line_start":1230,"line_end":1230,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392584,"byte_end":392587,"line_start":1231,"line_end":1231,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392589,"byte_end":392636,"line_start":1232,"line_end":1232,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392638,"byte_end":392641,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392643,"byte_end":392657,"line_start":1234,"line_end":1234,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392659,"byte_end":392662,"line_start":1235,"line_end":1235,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392664,"byte_end":392675,"line_start":1236,"line_end":1236,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392677,"byte_end":392704,"line_start":1237,"line_end":1237,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392706,"byte_end":392709,"line_start":1238,"line_end":1238,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_ones(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392711,"byte_end":392753,"line_start":1239,"line_end":1239,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![0].leading_ones(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392755,"byte_end":392798,"line_start":1240,"line_end":1240,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].leading_ones(), 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392800,"byte_end":392852,"line_start":1241,"line_end":1241,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392854,"byte_end":392861,"line_start":1242,"line_end":1242,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392863,"byte_end":392872,"line_start":1243,"line_end":1243,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393354,"byte_end":393367,"line_start":1263,"line_end":1263,"column_start":9,"column_end":22},"name":"leading_zeros","qualname":"<BitSlice<O, T>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392957,"byte_end":393031,"line_start":1248,"line_end":1248,"column_start":2,"column_end":76}},{"value":"/ bit set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393033,"byte_end":393052,"line_start":1249,"line_end":1249,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393054,"byte_end":393057,"line_start":1250,"line_end":1250,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393059,"byte_end":393106,"line_start":1251,"line_end":1251,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393108,"byte_end":393111,"line_start":1252,"line_end":1252,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393113,"byte_end":393127,"line_start":1253,"line_end":1253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393129,"byte_end":393132,"line_start":1254,"line_end":1254,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393134,"byte_end":393145,"line_start":1255,"line_end":1255,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393147,"byte_end":393174,"line_start":1256,"line_end":1256,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393176,"byte_end":393179,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_zeros(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393181,"byte_end":393224,"line_start":1258,"line_end":1258,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1].leading_zeros(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393226,"byte_end":393270,"line_start":1259,"line_end":1259,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].leading_zeros(), 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393272,"byte_end":393325,"line_start":1260,"line_end":1260,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393327,"byte_end":393334,"line_start":1261,"line_end":1261,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393336,"byte_end":393345,"line_start":1262,"line_end":1262,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393824,"byte_end":393837,"line_start":1282,"line_end":1282,"column_start":9,"column_end":22},"name":"trailing_ones","qualname":"<BitSlice<O, T>>::trailing_ones","value":"pub fn trailing_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393430,"byte_end":393505,"line_start":1267,"line_end":1267,"column_start":2,"column_end":77}},{"value":"/ set to `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393507,"byte_end":393522,"line_start":1268,"line_end":1268,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393524,"byte_end":393527,"line_start":1269,"line_end":1269,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393529,"byte_end":393576,"line_start":1270,"line_end":1270,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393578,"byte_end":393581,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393583,"byte_end":393597,"line_start":1272,"line_end":1272,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393599,"byte_end":393602,"line_start":1273,"line_end":1273,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393604,"byte_end":393615,"line_start":1274,"line_end":1274,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393617,"byte_end":393644,"line_start":1275,"line_end":1275,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393646,"byte_end":393649,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_ones(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393651,"byte_end":393694,"line_start":1277,"line_end":1277,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0].trailing_ones(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393696,"byte_end":393740,"line_start":1278,"line_end":1278,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].trailing_ones(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393742,"byte_end":393795,"line_start":1279,"line_end":1279,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393797,"byte_end":393804,"line_start":1280,"line_end":1280,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393806,"byte_end":393815,"line_start":1281,"line_end":1281,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394337,"byte_end":394351,"line_start":1303,"line_end":1303,"column_start":9,"column_end":23},"name":"trailing_zeros","qualname":"<BitSlice<O, T>>::trailing_zeros","value":"pub fn trailing_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393940,"byte_end":394015,"line_start":1288,"line_end":1288,"column_start":2,"column_end":77}},{"value":"/ set to `1`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394017,"byte_end":394032,"line_start":1289,"line_end":1289,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394034,"byte_end":394037,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394039,"byte_end":394086,"line_start":1291,"line_end":1291,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394088,"byte_end":394091,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394093,"byte_end":394107,"line_start":1293,"line_end":1293,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394109,"byte_end":394112,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394114,"byte_end":394125,"line_start":1295,"line_end":1295,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394127,"byte_end":394154,"line_start":1296,"line_end":1296,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394156,"byte_end":394159,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_zeros(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394161,"byte_end":394205,"line_start":1298,"line_end":1298,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1].trailing_zeros(), 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394207,"byte_end":394252,"line_start":1299,"line_end":1299,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].trailing_zeros(), 2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394254,"byte_end":394308,"line_start":1300,"line_end":1300,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394310,"byte_end":394317,"line_start":1301,"line_end":1301,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394319,"byte_end":394328,"line_start":1302,"line_end":1302,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396668,"byte_end":396687,"line_start":1382,"line_end":1382,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394453,"byte_end":394496,"line_start":1309,"line_end":1309,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394498,"byte_end":394501,"line_start":1310,"line_end":1310,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394503,"byte_end":394553,"line_start":1311,"line_end":1311,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394555,"byte_end":394558,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ If `src` has the same type arguments as `self`, it can be more","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394560,"byte_end":394626,"line_start":1313,"line_end":1313,"column_start":2,"column_end":68}},{"value":"/ performant to use [`.copy_from_bitslice()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394628,"byte_end":394676,"line_start":1314,"line_end":1314,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394678,"byte_end":394681,"line_start":1315,"line_end":1315,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394683,"byte_end":394697,"line_start":1316,"line_end":1316,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394699,"byte_end":394702,"line_start":1317,"line_end":1317,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_bitslice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.clone_from_bitslice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394704,"byte_end":394824,"line_start":1318,"line_end":1318,"column_start":2,"column_end":122}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394826,"byte_end":394829,"line_start":1319,"line_end":1319,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394831,"byte_end":394852,"line_start":1320,"line_end":1320,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394854,"byte_end":394857,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394859,"byte_end":394933,"line_start":1322,"line_end":1322,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394935,"byte_end":394945,"line_start":1323,"line_end":1323,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394947,"byte_end":394950,"line_start":1324,"line_end":1324,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394952,"byte_end":394964,"line_start":1325,"line_end":1325,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394966,"byte_end":394969,"line_start":1326,"line_end":1326,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394971,"byte_end":395041,"line_start":1327,"line_end":1327,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395043,"byte_end":395046,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395048,"byte_end":395062,"line_start":1329,"line_end":1329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395064,"byte_end":395067,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395069,"byte_end":395116,"line_start":1331,"line_end":1331,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395118,"byte_end":395121,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395123,"byte_end":395134,"line_start":1333,"line_end":1333,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395136,"byte_end":395163,"line_start":1334,"line_end":1334,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395165,"byte_end":395168,"line_start":1335,"line_end":1335,"column_start":2,"column_end":5}},{"value":"/ let src = bits![Msb0, u16; 1; 4];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395170,"byte_end":395207,"line_start":1336,"line_end":1336,"column_start":2,"column_end":39}},{"value":"/ let dst = bits![mut Lsb0, u8; 0; 2];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395209,"byte_end":395249,"line_start":1337,"line_end":1337,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395251,"byte_end":395254,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ dst.clone_from_bitslice(&src[2 ..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395256,"byte_end":395296,"line_start":1339,"line_end":1339,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(dst, bits![1; 2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395298,"byte_end":395331,"line_start":1340,"line_end":1340,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395333,"byte_end":395340,"line_start":1341,"line_end":1341,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395342,"byte_end":395345,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395347,"byte_end":395417,"line_start":1343,"line_end":1343,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395419,"byte_end":395489,"line_start":1344,"line_end":1344,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use clone_from_slice on a single","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395491,"byte_end":395565,"line_start":1345,"line_end":1345,"column_start":2,"column_end":76}},{"value":"/ slice will result in a compile failure:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395567,"byte_end":395610,"line_start":1346,"line_end":1346,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395612,"byte_end":395615,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395617,"byte_end":395641,"line_start":1348,"line_end":1348,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395643,"byte_end":395670,"line_start":1349,"line_end":1349,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395672,"byte_end":395675,"line_start":1350,"line_end":1350,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395677,"byte_end":395718,"line_start":1351,"line_end":1351,"column_start":2,"column_end":43}},{"value":"/ slice[.. 2].clone_from_bitslice(&slice[3 ..]); // compile fail!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395720,"byte_end":395787,"line_start":1352,"line_end":1352,"column_start":2,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395789,"byte_end":395796,"line_start":1353,"line_end":1353,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395798,"byte_end":395801,"line_start":1354,"line_end":1354,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395803,"byte_end":395872,"line_start":1355,"line_end":1355,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395874,"byte_end":395911,"line_start":1356,"line_end":1356,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395913,"byte_end":395916,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395918,"byte_end":395929,"line_start":1358,"line_end":1358,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395931,"byte_end":395958,"line_start":1359,"line_end":1359,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395960,"byte_end":395963,"line_start":1360,"line_end":1360,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395965,"byte_end":396006,"line_start":1361,"line_end":1361,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396008,"byte_end":396011,"line_start":1362,"line_end":1362,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396013,"byte_end":396018,"line_start":1363,"line_end":1363,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396020,"byte_end":396068,"line_start":1364,"line_end":1364,"column_start":2,"column_end":50}},{"value":"/   left.clone_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396070,"byte_end":396115,"line_start":1365,"line_end":1365,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396117,"byte_end":396122,"line_start":1366,"line_end":1366,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396124,"byte_end":396127,"line_start":1367,"line_end":1367,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396129,"byte_end":396173,"line_start":1368,"line_end":1368,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396175,"byte_end":396182,"line_start":1369,"line_end":1369,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396184,"byte_end":396187,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396189,"byte_end":396206,"line_start":1371,"line_end":1371,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396208,"byte_end":396211,"line_start":1372,"line_end":1372,"column_start":2,"column_end":5}},{"value":"/ If `self` and `src` use the same type arguments, this specializes to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396213,"byte_end":396285,"line_start":1373,"line_end":1373,"column_start":2,"column_end":74}},{"value":"/ [`.copy_from_bitslice()`]; if you know statically that this is the case,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396287,"byte_end":396363,"line_start":1374,"line_end":1374,"column_start":2,"column_end":78}},{"value":"/ prefer to call that method directly and avoid the cost of detection at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396365,"byte_end":396439,"line_start":1375,"line_end":1375,"column_start":2,"column_end":76}},{"value":"/ runtime. Otherwise, this is a bit-by-bit crawl across both slices, which","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396441,"byte_end":396517,"line_start":1376,"line_end":1376,"column_start":2,"column_end":78}},{"value":"/ is a slow process.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396519,"byte_end":396541,"line_start":1377,"line_end":1377,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396543,"byte_end":396546,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from_bitslice()`]: Self::copy_from_bitslice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396548,"byte_end":396603,"line_start":1379,"line_end":1379,"column_start":2,"column_end":57}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396605,"byte_end":396648,"line_start":1380,"line_end":1380,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396650,"byte_end":396659,"line_start":1381,"line_end":1381,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3275},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399130,"byte_end":399148,"line_start":1478,"line_end":1478,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`, using a memcpy wherever\n possible.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`, using a memcpy wherever","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397170,"byte_end":397237,"line_start":1410,"line_end":1410,"column_start":2,"column_end":69}},{"value":"/ possible.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397239,"byte_end":397252,"line_start":1411,"line_end":1411,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397254,"byte_end":397257,"line_start":1412,"line_end":1412,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be same as `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397259,"byte_end":397306,"line_start":1413,"line_end":1413,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397308,"byte_end":397311,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ If `src` does not use the same type arguments as `self`, use","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397313,"byte_end":397377,"line_start":1415,"line_end":1415,"column_start":2,"column_end":66}},{"value":"/ [`.clone_from_bitslice()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397379,"byte_end":397410,"line_start":1416,"line_end":1416,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397412,"byte_end":397415,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397417,"byte_end":397431,"line_start":1418,"line_end":1418,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397433,"byte_end":397436,"line_start":1419,"line_end":1419,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_from_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397438,"byte_end":397550,"line_start":1420,"line_end":1420,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397552,"byte_end":397555,"line_start":1421,"line_end":1421,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397557,"byte_end":397578,"line_start":1422,"line_end":1422,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397580,"byte_end":397583,"line_start":1423,"line_end":1423,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397585,"byte_end":397659,"line_start":1424,"line_end":1424,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397661,"byte_end":397671,"line_start":1425,"line_end":1425,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397673,"byte_end":397676,"line_start":1426,"line_end":1426,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397678,"byte_end":397690,"line_start":1427,"line_end":1427,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397692,"byte_end":397695,"line_start":1428,"line_end":1428,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397697,"byte_end":397767,"line_start":1429,"line_end":1429,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397769,"byte_end":397772,"line_start":1430,"line_end":1430,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397774,"byte_end":397788,"line_start":1431,"line_end":1431,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397790,"byte_end":397793,"line_start":1432,"line_end":1432,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397795,"byte_end":397842,"line_start":1433,"line_end":1433,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397844,"byte_end":397847,"line_start":1434,"line_end":1434,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397849,"byte_end":397860,"line_start":1435,"line_end":1435,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397862,"byte_end":397889,"line_start":1436,"line_end":1436,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397891,"byte_end":397894,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ let src = bits![1; 4];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397896,"byte_end":397922,"line_start":1438,"line_end":1438,"column_start":2,"column_end":28}},{"value":"/ let dst = bits![mut 0; 2];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397924,"byte_end":397954,"line_start":1439,"line_end":1439,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397956,"byte_end":397959,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ // Because the slices have to be the same length,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397961,"byte_end":398014,"line_start":1441,"line_end":1441,"column_start":2,"column_end":55}},{"value":"/ // we slice the source slice from four bits to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398016,"byte_end":398066,"line_start":1442,"line_end":1442,"column_start":2,"column_end":52}},{"value":"/ // two. It will panic if we don't do this.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398068,"byte_end":398114,"line_start":1443,"line_end":1443,"column_start":2,"column_end":48}},{"value":"/ dst.clone_from_bitslice(&src[2..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398116,"byte_end":398155,"line_start":1444,"line_end":1444,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398157,"byte_end":398164,"line_start":1445,"line_end":1445,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398166,"byte_end":398169,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398171,"byte_end":398241,"line_start":1447,"line_end":1447,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398243,"byte_end":398313,"line_start":1448,"line_end":1448,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use [.copy_from_slice()] on a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398315,"byte_end":398386,"line_start":1449,"line_end":1449,"column_start":2,"column_end":73}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398388,"byte_end":398438,"line_start":1450,"line_end":1450,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398440,"byte_end":398443,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398445,"byte_end":398469,"line_start":1452,"line_end":1452,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398471,"byte_end":398498,"line_start":1453,"line_end":1453,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398500,"byte_end":398503,"line_start":1454,"line_end":1454,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398505,"byte_end":398546,"line_start":1455,"line_end":1455,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398548,"byte_end":398551,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ slice[.. 2].copy_from_bitslice(&bits[3 ..]); // compile fail!","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398553,"byte_end":398618,"line_start":1457,"line_end":1457,"column_start":2,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398620,"byte_end":398627,"line_start":1458,"line_end":1458,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398629,"byte_end":398632,"line_start":1459,"line_end":1459,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398634,"byte_end":398703,"line_start":1460,"line_end":1460,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398705,"byte_end":398742,"line_start":1461,"line_end":1461,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398744,"byte_end":398747,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398749,"byte_end":398760,"line_start":1463,"line_end":1463,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398762,"byte_end":398789,"line_start":1464,"line_end":1464,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398791,"byte_end":398794,"line_start":1465,"line_end":1465,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398796,"byte_end":398837,"line_start":1466,"line_end":1466,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398839,"byte_end":398842,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398844,"byte_end":398849,"line_start":1468,"line_end":1468,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398851,"byte_end":398899,"line_start":1469,"line_end":1469,"column_start":2,"column_end":50}},{"value":"/   left.copy_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398901,"byte_end":398945,"line_start":1470,"line_end":1470,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398947,"byte_end":398952,"line_start":1471,"line_end":1471,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398954,"byte_end":398957,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398959,"byte_end":399003,"line_start":1473,"line_end":1473,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399005,"byte_end":399012,"line_start":1474,"line_end":1474,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399014,"byte_end":399017,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ [`.clone_from_bitslice()`]: Self::clone_from_bitslice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399019,"byte_end":399076,"line_start":1476,"line_end":1476,"column_start":2,"column_end":59}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399078,"byte_end":399121,"line_start":1477,"line_end":1477,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3276},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403479,"byte_end":403497,"line_start":1620,"line_end":1620,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402575,"byte_end":402626,"line_start":1585,"line_end":1585,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402628,"byte_end":402631,"line_start":1586,"line_end":1586,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402633,"byte_end":402686,"line_start":1587,"line_end":1587,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402688,"byte_end":402691,"line_start":1588,"line_end":1588,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402693,"byte_end":402707,"line_start":1589,"line_end":1589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402709,"byte_end":402712,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402714,"byte_end":402826,"line_start":1591,"line_end":1591,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402828,"byte_end":402831,"line_start":1592,"line_end":1592,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402833,"byte_end":402854,"line_start":1593,"line_end":1593,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402856,"byte_end":402859,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402861,"byte_end":402935,"line_start":1595,"line_end":1595,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402937,"byte_end":402947,"line_start":1596,"line_end":1596,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402949,"byte_end":402952,"line_start":1597,"line_end":1597,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402954,"byte_end":402966,"line_start":1598,"line_end":1598,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402968,"byte_end":402971,"line_start":1599,"line_end":1599,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402973,"byte_end":403043,"line_start":1600,"line_end":1600,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403045,"byte_end":403048,"line_start":1601,"line_end":1601,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403050,"byte_end":403064,"line_start":1602,"line_end":1602,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403066,"byte_end":403069,"line_start":1603,"line_end":1603,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403071,"byte_end":403082,"line_start":1604,"line_end":1604,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403084,"byte_end":403111,"line_start":1605,"line_end":1605,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403113,"byte_end":403116,"line_start":1606,"line_end":1606,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403118,"byte_end":403151,"line_start":1607,"line_end":1607,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403153,"byte_end":403181,"line_start":1608,"line_end":1608,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403183,"byte_end":403230,"line_start":1609,"line_end":1609,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403232,"byte_end":403279,"line_start":1610,"line_end":1610,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403281,"byte_end":403284,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403286,"byte_end":403328,"line_start":1612,"line_end":1612,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403330,"byte_end":403333,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403335,"byte_end":403369,"line_start":1614,"line_end":1614,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403371,"byte_end":403411,"line_start":1615,"line_end":1615,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403413,"byte_end":403441,"line_start":1616,"line_end":1616,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403443,"byte_end":403450,"line_start":1617,"line_end":1617,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403452,"byte_end":403459,"line_start":1618,"line_end":1618,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403461,"byte_end":403470,"line_start":1619,"line_end":1619,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3279},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404471,"byte_end":404481,"line_start":1661,"line_end":1661,"column_start":9,"column_end":19},"name":"shift_left","qualname":"<BitSlice<O, T>>::shift_left","value":"pub fn shift_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice left (towards index `0`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice left (towards index `0`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403766,"byte_end":403830,"line_start":1635,"line_end":1635,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403832,"byte_end":403835,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `by ..` down to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403837,"byte_end":403898,"line_start":1637,"line_end":1637,"column_start":2,"column_end":63}},{"value":"/ `0 .. len - by`, and erases `len - by ..` to `0`. As this is a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403900,"byte_end":403966,"line_start":1638,"line_end":1638,"column_start":2,"column_end":68}},{"value":"/ destructive (and linearly expensive) operation, you may prefer instead","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403968,"byte_end":404042,"line_start":1639,"line_end":1639,"column_start":2,"column_end":76}},{"value":"/ to use range subslicing.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404044,"byte_end":404072,"line_start":1640,"line_end":1640,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404074,"byte_end":404077,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404079,"byte_end":404095,"line_start":1642,"line_end":1642,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404097,"byte_end":404100,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404102,"byte_end":404119,"line_start":1644,"line_end":1644,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404121,"byte_end":404183,"line_start":1645,"line_end":1645,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404185,"byte_end":404188,"line_start":1646,"line_end":1646,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404190,"byte_end":404202,"line_start":1647,"line_end":1647,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404204,"byte_end":404207,"line_start":1648,"line_end":1648,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404209,"byte_end":404263,"line_start":1649,"line_end":1649,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404265,"byte_end":404268,"line_start":1650,"line_end":1650,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404270,"byte_end":404284,"line_start":1651,"line_end":1651,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404286,"byte_end":404289,"line_start":1652,"line_end":1652,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404291,"byte_end":404302,"line_start":1653,"line_end":1653,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404304,"byte_end":404331,"line_start":1654,"line_end":1654,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404333,"byte_end":404336,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404338,"byte_end":404369,"line_start":1656,"line_end":1656,"column_start":2,"column_end":33}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404371,"byte_end":404394,"line_start":1657,"line_end":1657,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404396,"byte_end":404442,"line_start":1658,"line_end":1658,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404444,"byte_end":404451,"line_start":1659,"line_end":1659,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404453,"byte_end":404462,"line_start":1660,"line_end":1660,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3280},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405509,"byte_end":405520,"line_start":1705,"line_end":1705,"column_start":9,"column_end":20},"name":"shift_right","qualname":"<BitSlice<O, T>>::shift_right","value":"pub fn shift_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice right (towards index `self.len()`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice right (towards index `self.len()`).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404808,"byte_end":404882,"line_start":1680,"line_end":1680,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404884,"byte_end":404887,"line_start":1681,"line_end":1681,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `.. len - by` up to `by ..`,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404889,"byte_end":404963,"line_start":1682,"line_end":1682,"column_start":2,"column_end":76}},{"value":"/ and erases `.. by` to `0`. As this is a destructive (and linearly","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404965,"byte_end":405034,"line_start":1683,"line_end":1683,"column_start":2,"column_end":71}},{"value":"/ expensive) operation, you may prefer instead to use range subslicing.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405036,"byte_end":405109,"line_start":1684,"line_end":1684,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405111,"byte_end":405114,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405116,"byte_end":405132,"line_start":1686,"line_end":1686,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405134,"byte_end":405137,"line_start":1687,"line_end":1687,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405139,"byte_end":405156,"line_start":1688,"line_end":1688,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405158,"byte_end":405220,"line_start":1689,"line_end":1689,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405222,"byte_end":405225,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405227,"byte_end":405239,"line_start":1691,"line_end":1691,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405241,"byte_end":405244,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405246,"byte_end":405300,"line_start":1693,"line_end":1693,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405302,"byte_end":405305,"line_start":1694,"line_end":1694,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405307,"byte_end":405321,"line_start":1695,"line_end":1695,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405323,"byte_end":405326,"line_start":1696,"line_end":1696,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405328,"byte_end":405339,"line_start":1697,"line_end":1697,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405341,"byte_end":405368,"line_start":1698,"line_end":1698,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405370,"byte_end":405373,"line_start":1699,"line_end":1699,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405375,"byte_end":405406,"line_start":1700,"line_end":1700,"column_start":2,"column_end":33}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405408,"byte_end":405432,"line_start":1701,"line_end":1701,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405434,"byte_end":405480,"line_start":1702,"line_end":1702,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405482,"byte_end":405489,"line_start":1703,"line_end":1703,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405491,"byte_end":405500,"line_start":1704,"line_end":1704,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3281},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406430,"byte_end":406437,"line_start":1745,"line_end":1745,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405847,"byte_end":405889,"line_start":1724,"line_end":1724,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405891,"byte_end":405894,"line_start":1725,"line_end":1725,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405896,"byte_end":405912,"line_start":1726,"line_end":1726,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405914,"byte_end":405917,"line_start":1727,"line_end":1727,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405919,"byte_end":405936,"line_start":1728,"line_end":1728,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":405938,"byte_end":406010,"line_start":1729,"line_end":1729,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406012,"byte_end":406015,"line_start":1730,"line_end":1730,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406017,"byte_end":406031,"line_start":1731,"line_end":1731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406033,"byte_end":406036,"line_start":1732,"line_end":1732,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406038,"byte_end":406049,"line_start":1733,"line_end":1733,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406051,"byte_end":406078,"line_start":1734,"line_end":1734,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406080,"byte_end":406083,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406085,"byte_end":406107,"line_start":1736,"line_end":1736,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406109,"byte_end":406152,"line_start":1737,"line_end":1737,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406154,"byte_end":406185,"line_start":1738,"line_end":1738,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b0011_1100]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406187,"byte_end":406239,"line_start":1739,"line_end":1739,"column_start":2,"column_end":54}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406241,"byte_end":406273,"line_start":1740,"line_end":1740,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b0010_0100]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406275,"byte_end":406327,"line_start":1741,"line_end":1741,"column_start":2,"column_end":54}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406329,"byte_end":406358,"line_start":1742,"line_end":1742,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b1010_0100]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406360,"byte_end":406412,"line_start":1743,"line_end":1743,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":406414,"byte_end":406421,"line_start":1744,"line_end":1744,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3282},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408277,"byte_end":408285,"line_start":1805,"line_end":1805,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407118,"byte_end":407166,"line_start":1771,"line_end":1771,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407168,"byte_end":407171,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement [`IndexMut`], as it cannot manifest `&mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407173,"byte_end":407246,"line_start":1773,"line_end":1773,"column_start":2,"column_end":75}},{"value":"/ bool` references, and the [`BitRef`] proxy reference has an unavoidable","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407248,"byte_end":407323,"line_start":1774,"line_end":1774,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407325,"byte_end":407400,"line_start":1775,"line_end":1775,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407402,"byte_end":407477,"line_start":1776,"line_end":1776,"column_start":2,"column_end":77}},{"value":"/ reference. Benchmarks indicate that this method is about 2–4 times","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407479,"byte_end":407551,"line_start":1777,"line_end":1777,"column_start":2,"column_end":72}},{"value":"/ faster than the `.iter_mut().enumerate()` equivalent.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407553,"byte_end":407610,"line_start":1778,"line_end":1778,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407612,"byte_end":407615,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407617,"byte_end":407633,"line_start":1780,"line_end":1780,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407635,"byte_end":407638,"line_start":1781,"line_end":1781,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407640,"byte_end":407657,"line_start":1782,"line_end":1782,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407659,"byte_end":407732,"line_start":1783,"line_end":1783,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407734,"byte_end":407776,"line_start":1784,"line_end":1784,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407778,"byte_end":407781,"line_start":1785,"line_end":1785,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407783,"byte_end":407796,"line_start":1786,"line_end":1786,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407798,"byte_end":407801,"line_start":1787,"line_end":1787,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407803,"byte_end":407874,"line_start":1788,"line_end":1788,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407876,"byte_end":407941,"line_start":1789,"line_end":1789,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407943,"byte_end":407946,"line_start":1790,"line_end":1790,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407948,"byte_end":407962,"line_start":1791,"line_end":1791,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407964,"byte_end":407967,"line_start":1792,"line_end":1792,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407969,"byte_end":407980,"line_start":1793,"line_end":1793,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407982,"byte_end":408009,"line_start":1794,"line_end":1794,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408011,"byte_end":408014,"line_start":1795,"line_end":1795,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408016,"byte_end":408039,"line_start":1796,"line_end":1796,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408041,"byte_end":408085,"line_start":1797,"line_end":1797,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408087,"byte_end":408131,"line_start":1798,"line_end":1798,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408133,"byte_end":408168,"line_start":1799,"line_end":1799,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408170,"byte_end":408177,"line_start":1800,"line_end":1800,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408179,"byte_end":408182,"line_start":1801,"line_end":1801,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408184,"byte_end":408218,"line_start":1802,"line_end":1802,"column_start":2,"column_end":36}},{"value":"/ [`IndexMut`]: core::ops::IndexMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408220,"byte_end":408257,"line_start":1803,"line_end":1803,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408259,"byte_end":408268,"line_start":1804,"line_end":1804,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3284},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410188,"byte_end":410199,"line_start":1862,"line_end":1862,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408477,"byte_end":408542,"line_start":1814,"line_end":1814,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408544,"byte_end":408547,"line_start":1815,"line_end":1815,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408549,"byte_end":408624,"line_start":1816,"line_end":1816,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408626,"byte_end":408701,"line_start":1817,"line_end":1817,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408703,"byte_end":408773,"line_start":1818,"line_end":1818,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408775,"byte_end":408846,"line_start":1819,"line_end":1819,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408848,"byte_end":408921,"line_start":1820,"line_end":1820,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408923,"byte_end":408994,"line_start":1821,"line_end":1821,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408996,"byte_end":409017,"line_start":1822,"line_end":1822,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409019,"byte_end":409022,"line_start":1823,"line_end":1823,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409024,"byte_end":409048,"line_start":1824,"line_end":1824,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409050,"byte_end":409053,"line_start":1825,"line_end":1825,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409055,"byte_end":409099,"line_start":1826,"line_end":1826,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409101,"byte_end":409104,"line_start":1827,"line_end":1827,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409106,"byte_end":409117,"line_start":1828,"line_end":1828,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409119,"byte_end":409150,"line_start":1829,"line_end":1829,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409152,"byte_end":409181,"line_start":1830,"line_end":1830,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409183,"byte_end":409212,"line_start":1831,"line_end":1831,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409214,"byte_end":409221,"line_start":1832,"line_end":1832,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409223,"byte_end":409226,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409228,"byte_end":409297,"line_start":1834,"line_end":1834,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409299,"byte_end":409369,"line_start":1835,"line_end":1835,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409371,"byte_end":409406,"line_start":1836,"line_end":1836,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409408,"byte_end":409411,"line_start":1837,"line_end":1837,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409413,"byte_end":409427,"line_start":1838,"line_end":1838,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409429,"byte_end":409432,"line_start":1839,"line_end":1839,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409434,"byte_end":409510,"line_start":1840,"line_end":1840,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409512,"byte_end":409582,"line_start":1841,"line_end":1841,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409584,"byte_end":409616,"line_start":1842,"line_end":1842,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409618,"byte_end":409621,"line_start":1843,"line_end":1843,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409623,"byte_end":409649,"line_start":1844,"line_end":1844,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409651,"byte_end":409654,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409656,"byte_end":409730,"line_start":1846,"line_end":1846,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409732,"byte_end":409750,"line_start":1847,"line_end":1847,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409752,"byte_end":409755,"line_start":1848,"line_end":1848,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409757,"byte_end":409773,"line_start":1849,"line_end":1849,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409775,"byte_end":409778,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409780,"byte_end":409793,"line_start":1851,"line_end":1851,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409795,"byte_end":409870,"line_start":1852,"line_end":1852,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409872,"byte_end":409909,"line_start":1853,"line_end":1853,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409911,"byte_end":409914,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409916,"byte_end":409929,"line_start":1855,"line_end":1855,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409931,"byte_end":409934,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits between the heads of each region. The","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409936,"byte_end":410009,"line_start":1857,"line_end":1857,"column_start":2,"column_end":75}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410011,"byte_end":410081,"line_start":1858,"line_end":1858,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410083,"byte_end":410155,"line_start":1859,"line_end":1859,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410157,"byte_end":410168,"line_start":1860,"line_end":1860,"column_start":2,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410170,"byte_end":410179,"line_start":1861,"line_end":1861,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3285},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410384,"byte_end":410403,"line_start":1869,"line_end":1869,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410314,"byte_end":410330,"line_start":1867,"line_end":1867,"column_start":2,"column_end":18}},{"value":"deprecated = \"Use `BitPtr::offset_from`\"","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410332,"byte_end":410375,"line_start":1868,"line_end":1868,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3289},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412531,"byte_end":412544,"line_start":1936,"line_end":1936,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410840,"byte_end":410909,"line_start":1885,"line_end":1885,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410911,"byte_end":410914,"line_start":1886,"line_end":1886,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410916,"byte_end":410992,"line_start":1887,"line_end":1887,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]*. For a safe","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410994,"byte_end":411063,"line_start":1888,"line_end":1888,"column_start":2,"column_end":71}},{"value":"/ alternative, see [`.set()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411065,"byte_end":411097,"line_start":1889,"line_end":1889,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411099,"byte_end":411102,"line_start":1890,"line_end":1890,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411104,"byte_end":411120,"line_start":1891,"line_end":1891,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411122,"byte_end":411125,"line_start":1892,"line_end":1892,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411127,"byte_end":411144,"line_start":1893,"line_end":1893,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411146,"byte_end":411220,"line_start":1894,"line_end":1894,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411222,"byte_end":411243,"line_start":1895,"line_end":1895,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411245,"byte_end":411319,"line_start":1896,"line_end":1896,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411321,"byte_end":411324,"line_start":1897,"line_end":1897,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411326,"byte_end":411339,"line_start":1898,"line_end":1898,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411341,"byte_end":411344,"line_start":1899,"line_end":1899,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411346,"byte_end":411421,"line_start":1900,"line_end":1900,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411423,"byte_end":411491,"line_start":1901,"line_end":1901,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411493,"byte_end":411496,"line_start":1902,"line_end":1902,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411498,"byte_end":411510,"line_start":1903,"line_end":1903,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411512,"byte_end":411515,"line_start":1904,"line_end":1904,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411517,"byte_end":411592,"line_start":1905,"line_end":1905,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411594,"byte_end":411665,"line_start":1906,"line_end":1906,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411667,"byte_end":411737,"line_start":1907,"line_end":1907,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411739,"byte_end":411787,"line_start":1908,"line_end":1908,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411789,"byte_end":411792,"line_start":1909,"line_end":1909,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411794,"byte_end":411865,"line_start":1910,"line_end":1910,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411867,"byte_end":411940,"line_start":1911,"line_end":1911,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411942,"byte_end":411952,"line_start":1912,"line_end":1912,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411954,"byte_end":411957,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411959,"byte_end":411973,"line_start":1914,"line_end":1914,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411975,"byte_end":411978,"line_start":1915,"line_end":1915,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411980,"byte_end":412043,"line_start":1916,"line_end":1916,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412045,"byte_end":412101,"line_start":1917,"line_end":1917,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412103,"byte_end":412106,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412108,"byte_end":412119,"line_start":1919,"line_end":1919,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412121,"byte_end":412148,"line_start":1920,"line_end":1920,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412150,"byte_end":412153,"line_start":1921,"line_end":1921,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412155,"byte_end":412186,"line_start":1922,"line_end":1922,"column_start":2,"column_end":33}},{"value":"/ let (first, _) = bits.split_at_mut(1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412188,"byte_end":412230,"line_start":1923,"line_end":1923,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412232,"byte_end":412235,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412237,"byte_end":412249,"line_start":1925,"line_end":1925,"column_start":2,"column_end":14}},{"value":"/   first.set_unchecked(1, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412251,"byte_end":412286,"line_start":1926,"line_end":1926,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412288,"byte_end":412293,"line_start":1927,"line_end":1927,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412295,"byte_end":412298,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412300,"byte_end":412334,"line_start":1929,"line_end":1929,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412336,"byte_end":412343,"line_start":1930,"line_end":1930,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412345,"byte_end":412348,"line_start":1931,"line_end":1931,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412350,"byte_end":412379,"line_start":1932,"line_end":1932,"column_start":2,"column_end":31}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412381,"byte_end":412477,"line_start":1933,"line_end":1933,"column_start":2,"column_end":98}},{"value":"/ [`.set()`]: Self::set","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412479,"byte_end":412504,"line_start":1934,"line_end":1934,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412506,"byte_end":412515,"line_start":1935,"line_end":1935,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3290},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412869,"byte_end":412883,"line_start":1951,"line_end":1951,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412638,"byte_end":412670,"line_start":1940,"line_end":1940,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412672,"byte_end":412675,"line_start":1941,"line_end":1941,"column_start":2,"column_end":5}},{"value":"/ See [`.swap()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412677,"byte_end":412697,"line_start":1942,"line_end":1942,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412699,"byte_end":412702,"line_start":1943,"line_end":1943,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412704,"byte_end":412716,"line_start":1944,"line_end":1944,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412718,"byte_end":412721,"line_start":1945,"line_end":1945,"column_start":2,"column_end":5}},{"value":"/ `a` and `b` must both be less than [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412723,"byte_end":412777,"line_start":1946,"line_end":1946,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412779,"byte_end":412782,"line_start":1947,"line_end":1947,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412784,"byte_end":412813,"line_start":1948,"line_end":1948,"column_start":2,"column_end":31}},{"value":"/ [`.swap()`]: Self::swap","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412815,"byte_end":412842,"line_start":1949,"line_end":1949,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412844,"byte_end":412853,"line_start":1950,"line_end":1950,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3291},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413730,"byte_end":413748,"line_start":1985,"line_end":1985,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index, without performing any bounds\n checking.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index, without performing any bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413013,"byte_end":413086,"line_start":1957,"line_end":1957,"column_start":2,"column_end":75}},{"value":"/ checking.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413088,"byte_end":413101,"line_start":1958,"line_end":1958,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413103,"byte_end":413106,"line_start":1959,"line_end":1959,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413108,"byte_end":413132,"line_start":1960,"line_end":1960,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413134,"byte_end":413137,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413139,"byte_end":413151,"line_start":1962,"line_end":1962,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413153,"byte_end":413156,"line_start":1963,"line_end":1963,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`]. If this condition is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413158,"byte_end":413229,"line_start":1964,"line_end":1964,"column_start":2,"column_end":73}},{"value":"/ violated, the function behavior is *unspecified*.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413231,"byte_end":413284,"line_start":1965,"line_end":1965,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413286,"byte_end":413289,"line_start":1966,"line_end":1966,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413291,"byte_end":413305,"line_start":1967,"line_end":1967,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413307,"byte_end":413310,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413312,"byte_end":413323,"line_start":1969,"line_end":1969,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413325,"byte_end":413352,"line_start":1970,"line_end":1970,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413354,"byte_end":413357,"line_start":1971,"line_end":1971,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413359,"byte_end":413398,"line_start":1972,"line_end":1972,"column_start":2,"column_end":41}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(3) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413400,"byte_end":413455,"line_start":1973,"line_end":1973,"column_start":2,"column_end":57}},{"value":"/ assert!(l.not_any());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413457,"byte_end":413482,"line_start":1974,"line_end":1974,"column_start":2,"column_end":27}},{"value":"/ assert!(r.all());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413484,"byte_end":413505,"line_start":1975,"line_end":1975,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413507,"byte_end":413510,"line_start":1976,"line_end":1976,"column_start":2,"column_end":5}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(6) };","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413512,"byte_end":413567,"line_start":1977,"line_end":1977,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(l, bits);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413569,"byte_end":413593,"line_start":1978,"line_end":1978,"column_start":2,"column_end":26}},{"value":"/ assert!(r.is_empty());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413595,"byte_end":413621,"line_start":1979,"line_end":1979,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413623,"byte_end":413630,"line_start":1980,"line_end":1980,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413632,"byte_end":413635,"line_start":1981,"line_end":1981,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413637,"byte_end":413666,"line_start":1982,"line_end":1982,"column_start":2,"column_end":31}},{"value":"/ [`.split_at()`]: Self::split_at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413668,"byte_end":413703,"line_start":1983,"line_end":1983,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413705,"byte_end":413714,"line_start":1984,"line_end":1984,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3292},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414157,"byte_end":414179,"line_start":2001,"line_end":2001,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413852,"byte_end":413903,"line_start":1989,"line_end":1989,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413905,"byte_end":413908,"line_start":1990,"line_end":1990,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413910,"byte_end":413938,"line_start":1991,"line_end":1991,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413940,"byte_end":413943,"line_start":1992,"line_end":1992,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413945,"byte_end":413957,"line_start":1993,"line_end":1993,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413959,"byte_end":413962,"line_start":1994,"line_end":1994,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413964,"byte_end":414014,"line_start":1995,"line_end":1995,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414016,"byte_end":414019,"line_start":1996,"line_end":1996,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414021,"byte_end":414050,"line_start":1997,"line_end":1997,"column_start":2,"column_end":31}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414052,"byte_end":414095,"line_start":1998,"line_end":1998,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414097,"byte_end":414106,"line_start":1999,"line_end":1999,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414108,"byte_end":414141,"line_start":2000,"line_end":2000,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3293},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415019,"byte_end":415040,"line_start":2033,"line_end":2033,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself,\n without doing bounds checks.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414434,"byte_end":414503,"line_start":2012,"line_end":2012,"column_start":2,"column_end":71}},{"value":"/ without doing bounds checks.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414505,"byte_end":414537,"line_start":2013,"line_end":2013,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414539,"byte_end":414542,"line_start":2014,"line_end":2014,"column_start":2,"column_end":5}},{"value":"/ The ranges are allowed to overlap.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414544,"byte_end":414582,"line_start":2015,"line_end":2015,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414584,"byte_end":414587,"line_start":2016,"line_end":2016,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414589,"byte_end":414605,"line_start":2017,"line_end":2017,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414607,"byte_end":414610,"line_start":2018,"line_end":2018,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414612,"byte_end":414629,"line_start":2019,"line_end":2019,"column_start":2,"column_end":19}},{"value":"/ - `src`: The range within `self` from which to copy.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414631,"byte_end":414687,"line_start":2020,"line_end":2020,"column_start":2,"column_end":58}},{"value":"/ - `dst`: The starting index within `self` at which to paste.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414689,"byte_end":414753,"line_start":2021,"line_end":2021,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414755,"byte_end":414758,"line_start":2022,"line_end":2022,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414760,"byte_end":414773,"line_start":2023,"line_end":2023,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414775,"byte_end":414778,"line_start":2024,"line_end":2024,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414780,"byte_end":414856,"line_start":2025,"line_end":2025,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414858,"byte_end":414861,"line_start":2026,"line_end":2026,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414863,"byte_end":414875,"line_start":2027,"line_end":2027,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414877,"byte_end":414880,"line_start":2028,"line_end":2028,"column_start":2,"column_end":5}},{"value":"/ `src` and `dest .. dest + src.len()` must be entirely within","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414882,"byte_end":414946,"line_start":2029,"line_end":2029,"column_start":2,"column_end":66}},{"value":"/ [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414948,"byte_end":414967,"line_start":2030,"line_end":2030,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414969,"byte_end":414972,"line_start":2031,"line_end":2031,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414974,"byte_end":415003,"line_start":2032,"line_end":2032,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3298},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417519,"byte_end":417528,"line_start":2117,"line_end":2117,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitSlice<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-pointer to the base of the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-pointer to the base of the bit-slice’s region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416006,"byte_end":416076,"line_start":2072,"line_end":2072,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416078,"byte_end":416081,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416083,"byte_end":416158,"line_start":2074,"line_end":2074,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416160,"byte_end":416225,"line_start":2075,"line_end":2075,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416227,"byte_end":416230,"line_start":2076,"line_end":2076,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416232,"byte_end":416295,"line_start":2077,"line_end":2077,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to using this bit-pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416297,"byte_end":416372,"line_start":2078,"line_end":2078,"column_start":2,"column_end":77}},{"value":"/ or any bit-pointer derived from it. If you need to mutate the contents","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416374,"byte_end":416448,"line_start":2079,"line_end":2079,"column_start":2,"column_end":76}},{"value":"/ of the slice, use [`.as_mut_bitptr()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416450,"byte_end":416493,"line_start":2080,"line_end":2080,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416495,"byte_end":416498,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416500,"byte_end":416570,"line_start":2082,"line_end":2082,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416572,"byte_end":416647,"line_start":2083,"line_end":2083,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416649,"byte_end":416661,"line_start":2084,"line_end":2084,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416663,"byte_end":416666,"line_start":2085,"line_end":2085,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416668,"byte_end":416682,"line_start":2086,"line_end":2086,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416684,"byte_end":416687,"line_start":2087,"line_end":2087,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416689,"byte_end":416783,"line_start":2088,"line_end":2088,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416785,"byte_end":416788,"line_start":2089,"line_end":2089,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416790,"byte_end":416811,"line_start":2090,"line_end":2090,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416813,"byte_end":416816,"line_start":2091,"line_end":2091,"column_start":2,"column_end":5}},{"value":"/ This returns a structure, [`BitPtr`], rather than an actual raw pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416818,"byte_end":416893,"line_start":2092,"line_end":2092,"column_start":2,"column_end":77}},{"value":"/ `*Bit`. The information required to address a bit within a memory","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416895,"byte_end":416964,"line_start":2093,"line_end":2093,"column_start":2,"column_end":71}},{"value":"/ element cannot be encoded into a single pointer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416966,"byte_end":417018,"line_start":2094,"line_end":2094,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417020,"byte_end":417023,"line_start":2095,"line_end":2095,"column_start":2,"column_end":5}},{"value":"/ This structure can be converted back into a `&BitSlice` with the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417025,"byte_end":417093,"line_start":2096,"line_end":2096,"column_start":2,"column_end":70}},{"value":"/ function [`from_raw_parts`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417095,"byte_end":417127,"line_start":2097,"line_end":2097,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417129,"byte_end":417132,"line_start":2098,"line_end":2098,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417134,"byte_end":417148,"line_start":2099,"line_end":2099,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417150,"byte_end":417153,"line_start":2100,"line_end":2100,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417155,"byte_end":417166,"line_start":2101,"line_end":2101,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417168,"byte_end":417195,"line_start":2102,"line_end":2102,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417197,"byte_end":417200,"line_start":2103,"line_end":2103,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417202,"byte_end":417229,"line_start":2104,"line_end":2104,"column_start":2,"column_end":29}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417231,"byte_end":417258,"line_start":2105,"line_end":2105,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417260,"byte_end":417263,"line_start":2106,"line_end":2106,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417265,"byte_end":417277,"line_start":2107,"line_end":2107,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. x.len() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417279,"byte_end":417308,"line_start":2108,"line_end":2108,"column_start":2,"column_end":31}},{"value":"/     assert_eq!(*x.get_unchecked(i), (&*x)[i]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417310,"byte_end":417360,"line_start":2109,"line_end":2109,"column_start":2,"column_end":52}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417362,"byte_end":417369,"line_start":2110,"line_end":2110,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417371,"byte_end":417376,"line_start":2111,"line_end":2111,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417378,"byte_end":417385,"line_start":2112,"line_end":2112,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417387,"byte_end":417390,"line_start":2113,"line_end":2113,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitptr()`]: Self::as_mut_bitptr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417392,"byte_end":417437,"line_start":2114,"line_end":2114,"column_start":2,"column_end":47}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417439,"byte_end":417491,"line_start":2115,"line_end":2115,"column_start":2,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417493,"byte_end":417510,"line_start":2116,"line_end":2116,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3299},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418800,"byte_end":418813,"line_start":2157,"line_end":2157,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitSlice<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-slice’s region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417598,"byte_end":417668,"line_start":2121,"line_end":2121,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417670,"byte_end":417673,"line_start":2122,"line_end":2122,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417675,"byte_end":417750,"line_start":2123,"line_end":2123,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417752,"byte_end":417817,"line_start":2124,"line_end":2124,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417819,"byte_end":417822,"line_start":2125,"line_end":2125,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417824,"byte_end":417894,"line_start":2126,"line_end":2126,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417896,"byte_end":417971,"line_start":2127,"line_end":2127,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417973,"byte_end":417985,"line_start":2128,"line_end":2128,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417987,"byte_end":417990,"line_start":2129,"line_end":2129,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417992,"byte_end":418006,"line_start":2130,"line_end":2130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418008,"byte_end":418011,"line_start":2131,"line_end":2131,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418013,"byte_end":418115,"line_start":2132,"line_end":2132,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418117,"byte_end":418120,"line_start":2133,"line_end":2133,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418122,"byte_end":418143,"line_start":2134,"line_end":2134,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418145,"byte_end":418148,"line_start":2135,"line_end":2135,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalent of `*mut [T]`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418150,"byte_end":418221,"line_start":2136,"line_end":2136,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418223,"byte_end":418296,"line_start":2137,"line_end":2137,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418298,"byte_end":418372,"line_start":2138,"line_end":2138,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418374,"byte_end":418441,"line_start":2139,"line_end":2139,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418443,"byte_end":418446,"line_start":2140,"line_end":2140,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418448,"byte_end":418462,"line_start":2141,"line_end":2141,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418464,"byte_end":418467,"line_start":2142,"line_end":2142,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418469,"byte_end":418480,"line_start":2143,"line_end":2143,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418482,"byte_end":418509,"line_start":2144,"line_end":2144,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418511,"byte_end":418514,"line_start":2145,"line_end":2145,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418516,"byte_end":418557,"line_start":2146,"line_end":2146,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418559,"byte_end":418596,"line_start":2147,"line_end":2147,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418598,"byte_end":418601,"line_start":2148,"line_end":2148,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418603,"byte_end":418633,"line_start":2149,"line_end":2149,"column_start":2,"column_end":32}},{"value":"/   unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418635,"byte_end":418649,"line_start":2150,"line_end":2150,"column_start":2,"column_end":16}},{"value":"/     bits_ptr.add(i).write(i % 3 == 0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418651,"byte_end":418693,"line_start":2151,"line_end":2151,"column_start":2,"column_end":44}},{"value":"/   }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418695,"byte_end":418702,"line_start":2152,"line_end":2152,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418704,"byte_end":418709,"line_start":2153,"line_end":2153,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_raw_slice()[0], 0b0100_1001);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418711,"byte_end":418763,"line_start":2154,"line_end":2154,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418765,"byte_end":418772,"line_start":2155,"line_end":2155,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418774,"byte_end":418791,"line_start":2156,"line_end":2156,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3300},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420552,"byte_end":420567,"line_start":2205,"line_end":2205,"column_start":9,"column_end":24},"name":"as_bitptr_range","qualname":"<BitSlice<O, T>>::as_bitptr_range","value":"pub fn as_bitptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two raw bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two raw bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418889,"byte_end":418949,"line_start":2161,"line_end":2161,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418951,"byte_end":418954,"line_start":2162,"line_end":2162,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418956,"byte_end":419029,"line_start":2163,"line_end":2163,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bit of the bit-slice. This way, an empty","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419031,"byte_end":419102,"line_start":2164,"line_end":2164,"column_start":2,"column_end":73}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419104,"byte_end":419178,"line_start":2165,"line_end":2165,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419180,"byte_end":419250,"line_start":2166,"line_end":2166,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419252,"byte_end":419255,"line_start":2167,"line_end":2167,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419257,"byte_end":419328,"line_start":2168,"line_end":2168,"column_start":2,"column_end":73}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419330,"byte_end":419405,"line_start":2169,"line_end":2169,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419407,"byte_end":419428,"line_start":2170,"line_end":2170,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419430,"byte_end":419433,"line_start":2171,"line_end":2171,"column_start":2,"column_end":5}},{"value":"/ This function allows a more direct access to bit-pointers, without","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419435,"byte_end":419505,"line_start":2172,"line_end":2172,"column_start":2,"column_end":72}},{"value":"/ paying the cost of encoding into a `*BitSlice`, at the cost of no longer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419507,"byte_end":419583,"line_start":2173,"line_end":2173,"column_start":2,"column_end":78}},{"value":"/ fitting into ordinary Rust interfaces.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419585,"byte_end":419627,"line_start":2174,"line_end":2174,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419629,"byte_end":419632,"line_start":2175,"line_end":2175,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419634,"byte_end":419648,"line_start":2176,"line_end":2176,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419650,"byte_end":419653,"line_start":2177,"line_end":2177,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419655,"byte_end":419761,"line_start":2178,"line_end":2178,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419763,"byte_end":419766,"line_start":2179,"line_end":2179,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419768,"byte_end":419789,"line_start":2180,"line_end":2180,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419791,"byte_end":419794,"line_start":2181,"line_end":2181,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419796,"byte_end":419871,"line_start":2182,"line_end":2182,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419873,"byte_end":419947,"line_start":2183,"line_end":2183,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419949,"byte_end":420024,"line_start":2184,"line_end":2184,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420026,"byte_end":420069,"line_start":2185,"line_end":2185,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420071,"byte_end":420074,"line_start":2186,"line_end":2186,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420076,"byte_end":420090,"line_start":2187,"line_end":2187,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420092,"byte_end":420095,"line_start":2188,"line_end":2188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420097,"byte_end":420108,"line_start":2189,"line_end":2189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420110,"byte_end":420137,"line_start":2190,"line_end":2190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420139,"byte_end":420142,"line_start":2191,"line_end":2191,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420144,"byte_end":420180,"line_start":2192,"line_end":2192,"column_start":2,"column_end":38}},{"value":"/ let mid_ptr = bits.get(2).unwrap().into_bitptr();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420182,"byte_end":420235,"line_start":2193,"line_end":2193,"column_start":2,"column_end":55}},{"value":"/ let mut range = bits.as_bitptr_range();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420237,"byte_end":420280,"line_start":2194,"line_end":2194,"column_start":2,"column_end":45}},{"value":"/ assert!(range.contains(&mid_ptr));","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420282,"byte_end":420320,"line_start":2195,"line_end":2195,"column_start":2,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420322,"byte_end":420334,"line_start":2196,"line_end":2196,"column_start":2,"column_end":14}},{"value":"/   assert!(!range.next().unwrap().read());","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420336,"byte_end":420381,"line_start":2197,"line_end":2197,"column_start":2,"column_end":47}},{"value":"/   assert!(range.next_back().unwrap().read())","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420383,"byte_end":420431,"line_start":2198,"line_end":2198,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420433,"byte_end":420438,"line_start":2199,"line_end":2199,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420440,"byte_end":420447,"line_start":2200,"line_end":2200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420449,"byte_end":420452,"line_start":2201,"line_end":2201,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420454,"byte_end":420488,"line_start":2202,"line_end":2202,"column_start":2,"column_end":36}},{"value":"/ [`as_bitptr`]: Self::as_bitptr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420490,"byte_end":420524,"line_start":2203,"line_end":2203,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420526,"byte_end":420543,"line_start":2204,"line_end":2204,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422084,"byte_end":422103,"line_start":2248,"line_end":2248,"column_start":9,"column_end":28},"name":"as_mut_bitptr_range","qualname":"<BitSlice<O, T>>::as_mut_bitptr_range","value":"pub fn as_mut_bitptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two unsafe mutable bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two unsafe mutable bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420648,"byte_end":420719,"line_start":2209,"line_end":2209,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420721,"byte_end":420724,"line_start":2210,"line_end":2210,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420726,"byte_end":420799,"line_start":2211,"line_end":2211,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bitt of the bit-slice. This way, an empty","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420801,"byte_end":420873,"line_start":2212,"line_end":2212,"column_start":2,"column_end":74}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420875,"byte_end":420949,"line_start":2213,"line_end":2213,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420951,"byte_end":421021,"line_start":2214,"line_end":2214,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421023,"byte_end":421026,"line_start":2215,"line_end":2215,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421028,"byte_end":421103,"line_start":2216,"line_end":2216,"column_start":2,"column_end":77}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421105,"byte_end":421180,"line_start":2217,"line_end":2217,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421182,"byte_end":421203,"line_start":2218,"line_end":2218,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421205,"byte_end":421208,"line_start":2219,"line_end":2219,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421210,"byte_end":421224,"line_start":2220,"line_end":2220,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421226,"byte_end":421229,"line_start":2221,"line_end":2221,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421231,"byte_end":421345,"line_start":2222,"line_end":2222,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421347,"byte_end":421350,"line_start":2223,"line_end":2223,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421352,"byte_end":421373,"line_start":2224,"line_end":2224,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421375,"byte_end":421378,"line_start":2225,"line_end":2225,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421380,"byte_end":421455,"line_start":2226,"line_end":2226,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421457,"byte_end":421531,"line_start":2227,"line_end":2227,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421533,"byte_end":421608,"line_start":2228,"line_end":2228,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421610,"byte_end":421653,"line_start":2229,"line_end":2229,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421655,"byte_end":421658,"line_start":2230,"line_end":2230,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421660,"byte_end":421674,"line_start":2231,"line_end":2231,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421676,"byte_end":421679,"line_start":2232,"line_end":2232,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421681,"byte_end":421692,"line_start":2233,"line_end":2233,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421694,"byte_end":421721,"line_start":2234,"line_end":2234,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421723,"byte_end":421753,"line_start":2235,"line_end":2235,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421755,"byte_end":421758,"line_start":2236,"line_end":2236,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421760,"byte_end":421783,"line_start":2237,"line_end":2237,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421785,"byte_end":421829,"line_start":2238,"line_end":2238,"column_start":2,"column_end":46}},{"value":"/ for mut bitptr in bits.as_mut_bitptr_range() {","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421831,"byte_end":421881,"line_start":2239,"line_end":2239,"column_start":2,"column_end":52}},{"value":"/   unsafe { bv_ptr::write(bitptr, true); }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421883,"byte_end":421928,"line_start":2240,"line_end":2240,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421930,"byte_end":421935,"line_start":2241,"line_end":2241,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, !0);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421937,"byte_end":421962,"line_start":2242,"line_end":2242,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421964,"byte_end":421971,"line_start":2243,"line_end":2243,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421973,"byte_end":421976,"line_start":2244,"line_end":2244,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421978,"byte_end":422012,"line_start":2245,"line_end":2245,"column_start":2,"column_end":36}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422014,"byte_end":422056,"line_start":2246,"line_end":2246,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422058,"byte_end":422075,"line_start":2247,"line_end":2247,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423368,"byte_end":423378,"line_start":2287,"line_end":2287,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422190,"byte_end":422246,"line_start":2252,"line_end":2252,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422248,"byte_end":422251,"line_start":2253,"line_end":2253,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422253,"byte_end":422329,"line_start":2254,"line_end":2254,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422331,"byte_end":422404,"line_start":2255,"line_end":2255,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422406,"byte_end":422478,"line_start":2256,"line_end":2256,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422480,"byte_end":422555,"line_start":2257,"line_end":2257,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422557,"byte_end":422571,"line_start":2258,"line_end":2258,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422573,"byte_end":422576,"line_start":2259,"line_end":2259,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomain`] splitting in its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422578,"byte_end":422640,"line_start":2260,"line_end":2260,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422642,"byte_end":422660,"line_start":2261,"line_end":2261,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422662,"byte_end":422665,"line_start":2262,"line_end":2262,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422667,"byte_end":422681,"line_start":2263,"line_end":2263,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422683,"byte_end":422686,"line_start":2264,"line_end":2264,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422688,"byte_end":422699,"line_start":2265,"line_end":2265,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422701,"byte_end":422728,"line_start":2266,"line_end":2266,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422730,"byte_end":422733,"line_start":2267,"line_end":2267,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422735,"byte_end":422764,"line_start":2268,"line_end":2268,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422766,"byte_end":422809,"line_start":2269,"line_end":2269,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422811,"byte_end":422851,"line_start":2270,"line_end":2270,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422853,"byte_end":422924,"line_start":2271,"line_end":2271,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422926,"byte_end":422929,"line_start":2272,"line_end":2272,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422931,"byte_end":422964,"line_start":2273,"line_end":2273,"column_start":2,"column_end":35}},{"value":"/   .bit_domain()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422966,"byte_end":422985,"line_start":2274,"line_end":2274,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422987,"byte_end":423002,"line_start":2275,"line_end":2275,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423004,"byte_end":423020,"line_start":2276,"line_end":2276,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423022,"byte_end":423052,"line_start":2277,"line_end":2277,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423054,"byte_end":423084,"line_start":2278,"line_end":2278,"column_start":2,"column_end":32}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423086,"byte_end":423146,"line_start":2279,"line_end":2279,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423148,"byte_end":423208,"line_start":2280,"line_end":2280,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423210,"byte_end":423249,"line_start":2281,"line_end":2281,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423251,"byte_end":423258,"line_start":2282,"line_end":2282,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423260,"byte_end":423263,"line_start":2283,"line_end":2283,"column_start":2,"column_end":5}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423265,"byte_end":423308,"line_start":2284,"line_end":2284,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423310,"byte_end":423327,"line_start":2285,"line_end":2285,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423329,"byte_end":423359,"line_start":2286,"line_end":2286,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3303},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424653,"byte_end":424667,"line_start":2327,"line_end":2327,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423435,"byte_end":423491,"line_start":2291,"line_end":2291,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423493,"byte_end":423496,"line_start":2292,"line_end":2292,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423498,"byte_end":423574,"line_start":2293,"line_end":2293,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423576,"byte_end":423649,"line_start":2294,"line_end":2294,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423651,"byte_end":423723,"line_start":2295,"line_end":2295,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423725,"byte_end":423800,"line_start":2296,"line_end":2296,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423802,"byte_end":423816,"line_start":2297,"line_end":2297,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423818,"byte_end":423821,"line_start":2298,"line_end":2298,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomainMut`] splitting in its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423823,"byte_end":423888,"line_start":2299,"line_end":2299,"column_start":2,"column_end":67}},{"value":"/ documentation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423890,"byte_end":423908,"line_start":2300,"line_end":2300,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423910,"byte_end":423913,"line_start":2301,"line_end":2301,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423915,"byte_end":423929,"line_start":2302,"line_end":2302,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423931,"byte_end":423934,"line_start":2303,"line_end":2303,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423936,"byte_end":423947,"line_start":2304,"line_end":2304,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423949,"byte_end":423976,"line_start":2305,"line_end":2305,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423978,"byte_end":423981,"line_start":2306,"line_end":2306,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423983,"byte_end":424012,"line_start":2307,"line_end":2307,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424014,"byte_end":424057,"line_start":2308,"line_end":2308,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424059,"byte_end":424099,"line_start":2309,"line_end":2309,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias>","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424101,"byte_end":424160,"line_start":2310,"line_end":2310,"column_start":2,"column_end":61}},{"value":"/   = &mut rest[.. 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424162,"byte_end":424187,"line_start":2311,"line_end":2311,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424189,"byte_end":424192,"line_start":2312,"line_end":2312,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424194,"byte_end":424227,"line_start":2313,"line_end":2313,"column_start":2,"column_end":35}},{"value":"/   .bit_domain_mut()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424229,"byte_end":424252,"line_start":2314,"line_end":2314,"column_start":2,"column_end":25}},{"value":"/   .region()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424254,"byte_end":424269,"line_start":2315,"line_end":2315,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424271,"byte_end":424287,"line_start":2316,"line_end":2316,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424289,"byte_end":424319,"line_start":2317,"line_end":2317,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424321,"byte_end":424351,"line_start":2318,"line_end":2318,"column_start":2,"column_end":32}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424353,"byte_end":424417,"line_start":2319,"line_end":2319,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424419,"byte_end":424483,"line_start":2320,"line_end":2320,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424485,"byte_end":424528,"line_start":2321,"line_end":2321,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424530,"byte_end":424537,"line_start":2322,"line_end":2322,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424539,"byte_end":424542,"line_start":2323,"line_end":2323,"column_start":2,"column_end":5}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424544,"byte_end":424593,"line_start":2324,"line_end":2324,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424595,"byte_end":424612,"line_start":2325,"line_end":2325,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424614,"byte_end":424644,"line_start":2326,"line_end":2326,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3304},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425872,"byte_end":425878,"line_start":2366,"line_end":2366,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424734,"byte_end":424802,"line_start":2331,"line_end":2331,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424804,"byte_end":424819,"line_start":2332,"line_end":2332,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424821,"byte_end":424824,"line_start":2333,"line_end":2333,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424826,"byte_end":424902,"line_start":2334,"line_end":2334,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424904,"byte_end":424977,"line_start":2335,"line_end":2335,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424979,"byte_end":425051,"line_start":2336,"line_end":2336,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425053,"byte_end":425128,"line_start":2337,"line_end":2337,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425130,"byte_end":425144,"line_start":2338,"line_end":2338,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425146,"byte_end":425149,"line_start":2339,"line_end":2339,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`Domain`] splitting in its documentation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425151,"byte_end":425225,"line_start":2340,"line_end":2340,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425227,"byte_end":425230,"line_start":2341,"line_end":2341,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425232,"byte_end":425246,"line_start":2342,"line_end":2342,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425248,"byte_end":425251,"line_start":2343,"line_end":2343,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425253,"byte_end":425264,"line_start":2344,"line_end":2344,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425266,"byte_end":425293,"line_start":2345,"line_end":2345,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425295,"byte_end":425298,"line_start":2346,"line_end":2346,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425300,"byte_end":425329,"line_start":2347,"line_end":2347,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425331,"byte_end":425374,"line_start":2348,"line_end":2348,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425376,"byte_end":425416,"line_start":2349,"line_end":2349,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425418,"byte_end":425489,"line_start":2350,"line_end":2350,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425491,"byte_end":425494,"line_start":2351,"line_end":2351,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425496,"byte_end":425529,"line_start":2352,"line_end":2352,"column_start":2,"column_end":35}},{"value":"/   .domain()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425531,"byte_end":425546,"line_start":2353,"line_end":2353,"column_start":2,"column_end":17}},{"value":"/   .region()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425548,"byte_end":425563,"line_start":2354,"line_end":2354,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425565,"byte_end":425581,"line_start":2355,"line_end":2355,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425583,"byte_end":425613,"line_start":2356,"line_end":2356,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425615,"byte_end":425618,"line_start":2357,"line_end":2357,"column_start":2,"column_end":5}},{"value":"/ let _: &<u16 as BitStore>::Alias = head.unwrap().1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425620,"byte_end":425675,"line_start":2358,"line_end":2358,"column_start":2,"column_end":57}},{"value":"/ let _: &<u16 as BitStore>::Alias = tail.unwrap().0;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425677,"byte_end":425732,"line_start":2359,"line_end":2359,"column_start":2,"column_end":57}},{"value":"/ let _: &[u16] = body;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425734,"byte_end":425759,"line_start":2360,"line_end":2360,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425761,"byte_end":425768,"line_start":2361,"line_end":2361,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425770,"byte_end":425773,"line_start":2362,"line_end":2362,"column_start":2,"column_end":5}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425775,"byte_end":425812,"line_start":2363,"line_end":2363,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425814,"byte_end":425831,"line_start":2364,"line_end":2364,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425833,"byte_end":425863,"line_start":2365,"line_end":2365,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3305},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427143,"byte_end":427153,"line_start":2407,"line_end":2407,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425926,"byte_end":425994,"line_start":2370,"line_end":2370,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425996,"byte_end":426011,"line_start":2371,"line_end":2371,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426013,"byte_end":426016,"line_start":2372,"line_end":2372,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426018,"byte_end":426094,"line_start":2373,"line_end":2373,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426096,"byte_end":426169,"line_start":2374,"line_end":2374,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426171,"byte_end":426243,"line_start":2375,"line_end":2375,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426245,"byte_end":426320,"line_start":2376,"line_end":2376,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426322,"byte_end":426336,"line_start":2377,"line_end":2377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426338,"byte_end":426341,"line_start":2378,"line_end":2378,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`DomainMut`] splitting in its","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426343,"byte_end":426405,"line_start":2379,"line_end":2379,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426407,"byte_end":426425,"line_start":2380,"line_end":2380,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426427,"byte_end":426430,"line_start":2381,"line_end":2381,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426432,"byte_end":426446,"line_start":2382,"line_end":2382,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426448,"byte_end":426451,"line_start":2383,"line_end":2383,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426453,"byte_end":426456,"line_start":2384,"line_end":2384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426458,"byte_end":426469,"line_start":2385,"line_end":2385,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426471,"byte_end":426498,"line_start":2386,"line_end":2386,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426500,"byte_end":426503,"line_start":2387,"line_end":2387,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426505,"byte_end":426534,"line_start":2388,"line_end":2388,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426536,"byte_end":426579,"line_start":2389,"line_end":2389,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426581,"byte_end":426621,"line_start":2390,"line_end":2390,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = &mut rest[.. 32];","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426623,"byte_end":426702,"line_start":2391,"line_end":2391,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426704,"byte_end":426707,"line_start":2392,"line_end":2392,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426709,"byte_end":426742,"line_start":2393,"line_end":2393,"column_start":2,"column_end":35}},{"value":"/   .domain_mut()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426744,"byte_end":426763,"line_start":2394,"line_end":2394,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426765,"byte_end":426780,"line_start":2395,"line_end":2395,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426782,"byte_end":426798,"line_start":2396,"line_end":2396,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426800,"byte_end":426830,"line_start":2397,"line_end":2397,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426832,"byte_end":426835,"line_start":2398,"line_end":2398,"column_start":2,"column_end":5}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = head.unwrap().1;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426837,"byte_end":426914,"line_start":2399,"line_end":2399,"column_start":2,"column_end":79}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = tail.unwrap().0;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426916,"byte_end":426993,"line_start":2400,"line_end":2400,"column_start":2,"column_end":79}},{"value":"/ let _: &mut [u16] = body;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426995,"byte_end":427024,"line_start":2401,"line_end":2401,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427026,"byte_end":427033,"line_start":2402,"line_end":2402,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427035,"byte_end":427038,"line_start":2403,"line_end":2403,"column_start":2,"column_end":5}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427040,"byte_end":427083,"line_start":2404,"line_end":2404,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427085,"byte_end":427102,"line_start":2405,"line_end":2405,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427104,"byte_end":427134,"line_start":2406,"line_end":2406,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3306},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427606,"byte_end":427618,"line_start":2421,"line_end":2421,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitSlice<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427211,"byte_end":427264,"line_start":2411,"line_end":2411,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427266,"byte_end":427269,"line_start":2412,"line_end":2412,"column_start":2,"column_end":5}},{"value":"/ The returned slice handle views all elements touched by `self`, and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427271,"byte_end":427342,"line_start":2413,"line_end":2413,"column_start":2,"column_end":73}},{"value":"/ marks them all with `self`’s current aliasing state. For a more precise","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427344,"byte_end":427421,"line_start":2414,"line_end":2414,"column_start":2,"column_end":77}},{"value":"/ view, or one that permits mutation, use [`.domain()`] or","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427423,"byte_end":427483,"line_start":2415,"line_end":2415,"column_start":2,"column_end":62}},{"value":"/ [`.domain_mut()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427485,"byte_end":427507,"line_start":2416,"line_end":2416,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427509,"byte_end":427512,"line_start":2417,"line_end":2417,"column_start":2,"column_end":5}},{"value":"/ [`.domain()`]: Self::domain","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427514,"byte_end":427545,"line_start":2418,"line_end":2418,"column_start":2,"column_end":33}},{"value":"/ [`.domain_mut()`]: Self::domain_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427547,"byte_end":427586,"line_start":2419,"line_end":2419,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427588,"byte_end":427597,"line_start":2420,"line_end":2420,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432321,"byte_end":432332,"line_start":2585,"line_end":2585,"column_start":9,"column_end":20},"name":"set_aliased","qualname":"<BitSlice<O, T>>::set_aliased","value":"pub fn set_aliased(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430825,"byte_end":430863,"line_start":2532,"line_end":2532,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430865,"byte_end":430868,"line_start":2533,"line_end":2533,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430870,"byte_end":430943,"line_start":2534,"line_end":2534,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430945,"byte_end":431021,"line_start":2535,"line_end":2535,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431023,"byte_end":431092,"line_start":2536,"line_end":2536,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431094,"byte_end":431116,"line_start":2537,"line_end":2537,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431118,"byte_end":431121,"line_start":2538,"line_end":2538,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431123,"byte_end":431139,"line_start":2539,"line_end":2539,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431141,"byte_end":431144,"line_start":2540,"line_end":2540,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431146,"byte_end":431159,"line_start":2541,"line_end":2541,"column_start":2,"column_end":15}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431161,"byte_end":431235,"line_start":2542,"line_end":2542,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431237,"byte_end":431258,"line_start":2543,"line_end":2543,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431260,"byte_end":431334,"line_start":2544,"line_end":2544,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431336,"byte_end":431339,"line_start":2545,"line_end":2545,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431341,"byte_end":431354,"line_start":2546,"line_end":2546,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431356,"byte_end":431359,"line_start":2547,"line_end":2547,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431361,"byte_end":431436,"line_start":2548,"line_end":2548,"column_start":2,"column_end":77}},{"value":"/ If `T` is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431438,"byte_end":431511,"line_start":2549,"line_end":2549,"column_start":2,"column_end":75}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431513,"byte_end":431547,"line_start":2550,"line_end":2550,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431549,"byte_end":431552,"line_start":2551,"line_end":2551,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431554,"byte_end":431566,"line_start":2552,"line_end":2552,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431568,"byte_end":431571,"line_start":2553,"line_end":2553,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431573,"byte_end":431639,"line_start":2554,"line_end":2554,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431641,"byte_end":431644,"line_start":2555,"line_end":2555,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431646,"byte_end":431660,"line_start":2556,"line_end":2556,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431662,"byte_end":431665,"line_start":2557,"line_end":2557,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431667,"byte_end":431678,"line_start":2558,"line_end":2558,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431680,"byte_end":431707,"line_start":2559,"line_end":2559,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431709,"byte_end":431734,"line_start":2560,"line_end":2560,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431736,"byte_end":431739,"line_start":2561,"line_end":2561,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431741,"byte_end":431771,"line_start":2562,"line_end":2562,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431773,"byte_end":431813,"line_start":2563,"line_end":2563,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431815,"byte_end":431837,"line_start":2564,"line_end":2564,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431839,"byte_end":431842,"line_start":2565,"line_end":2565,"column_start":2,"column_end":5}},{"value":"/ bits.set_aliased(1, true);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431844,"byte_end":431874,"line_start":2566,"line_end":2566,"column_start":2,"column_end":32}},{"value":"/ assert!(bits_2[1]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431876,"byte_end":431899,"line_start":2567,"line_end":2567,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431901,"byte_end":431908,"line_start":2568,"line_end":2568,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431910,"byte_end":431913,"line_start":2569,"line_end":2569,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431915,"byte_end":431991,"line_start":2570,"line_end":2570,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431993,"byte_end":431996,"line_start":2571,"line_end":2571,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431998,"byte_end":432022,"line_start":2572,"line_end":2572,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432024,"byte_end":432051,"line_start":2573,"line_end":2573,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432053,"byte_end":432078,"line_start":2574,"line_end":2574,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432080,"byte_end":432083,"line_start":2575,"line_end":2575,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432085,"byte_end":432115,"line_start":2576,"line_end":2576,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Lsb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432117,"byte_end":432157,"line_start":2577,"line_end":2577,"column_start":2,"column_end":42}},{"value":"/ bits.set_aliased(8, false);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432159,"byte_end":432190,"line_start":2578,"line_end":2578,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432192,"byte_end":432199,"line_start":2579,"line_end":2579,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432201,"byte_end":432204,"line_start":2580,"line_end":2580,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432206,"byte_end":432238,"line_start":2581,"line_end":2581,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432240,"byte_end":432270,"line_start":2582,"line_end":2582,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432272,"byte_end":432301,"line_start":2583,"line_end":2583,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432303,"byte_end":432312,"line_start":2584,"line_end":2584,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434016,"byte_end":434037,"line_start":2637,"line_end":2637,"column_start":16,"column_end":37},"name":"set_aliased_unchecked","qualname":"<BitSlice<O, T>>::set_aliased_unchecked","value":"pub unsafe fn set_aliased_unchecked(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432483,"byte_end":432552,"line_start":2592,"line_end":2592,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432554,"byte_end":432557,"line_start":2593,"line_end":2593,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432559,"byte_end":432632,"line_start":2594,"line_end":2594,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432634,"byte_end":432710,"line_start":2595,"line_end":2595,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432712,"byte_end":432781,"line_start":2596,"line_end":2596,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432783,"byte_end":432805,"line_start":2597,"line_end":2597,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432807,"byte_end":432810,"line_start":2598,"line_end":2598,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432812,"byte_end":432825,"line_start":2599,"line_end":2599,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432827,"byte_end":432830,"line_start":2600,"line_end":2600,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432832,"byte_end":432907,"line_start":2601,"line_end":2601,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified. If `T`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432909,"byte_end":432984,"line_start":2602,"line_end":2602,"column_start":2,"column_end":77}},{"value":"/ is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432986,"byte_end":433052,"line_start":2603,"line_end":2603,"column_start":2,"column_end":68}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433054,"byte_end":433088,"line_start":2604,"line_end":2604,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433090,"byte_end":433093,"line_start":2605,"line_end":2605,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433095,"byte_end":433107,"line_start":2606,"line_end":2606,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433109,"byte_end":433112,"line_start":2607,"line_end":2607,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433114,"byte_end":433189,"line_start":2608,"line_end":2608,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433191,"byte_end":433262,"line_start":2609,"line_end":2609,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433264,"byte_end":433334,"line_start":2610,"line_end":2610,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433336,"byte_end":433384,"line_start":2611,"line_end":2611,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433386,"byte_end":433389,"line_start":2612,"line_end":2612,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433391,"byte_end":433462,"line_start":2613,"line_end":2613,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433464,"byte_end":433537,"line_start":2614,"line_end":2614,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433539,"byte_end":433549,"line_start":2615,"line_end":2615,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433551,"byte_end":433554,"line_start":2616,"line_end":2616,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433556,"byte_end":433570,"line_start":2617,"line_end":2617,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433572,"byte_end":433575,"line_start":2618,"line_end":2618,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433577,"byte_end":433588,"line_start":2619,"line_end":2619,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433590,"byte_end":433617,"line_start":2620,"line_end":2620,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433619,"byte_end":433644,"line_start":2621,"line_end":2621,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433646,"byte_end":433649,"line_start":2622,"line_end":2622,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433651,"byte_end":433681,"line_start":2623,"line_end":2623,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433683,"byte_end":433723,"line_start":2624,"line_end":2624,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433725,"byte_end":433747,"line_start":2625,"line_end":2625,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433749,"byte_end":433752,"line_start":2626,"line_end":2626,"column_start":2,"column_end":5}},{"value":"/ let (first, _) = bits.split_at(1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433754,"byte_end":433792,"line_start":2627,"line_end":2627,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(first.len(), 1);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433794,"byte_end":433825,"line_start":2628,"line_end":2628,"column_start":2,"column_end":33}},{"value":"/ unsafe { first.set_aliased_unchecked(2, true); }","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433827,"byte_end":433879,"line_start":2629,"line_end":2629,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433881,"byte_end":433884,"line_start":2630,"line_end":2630,"column_start":2,"column_end":5}},{"value":"/ assert!(bits_2[2]);","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433886,"byte_end":433909,"line_start":2631,"line_end":2631,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433911,"byte_end":433918,"line_start":2632,"line_end":2632,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433920,"byte_end":433923,"line_start":2633,"line_end":2633,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433925,"byte_end":433957,"line_start":2634,"line_end":2634,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433959,"byte_end":433989,"line_start":2635,"line_end":2635,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":433991,"byte_end":434000,"line_start":2636,"line_end":2636,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3323},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434578,"byte_end":434598,"line_start":2653,"line_end":2653,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434143,"byte_end":434188,"line_start":2641,"line_end":2641,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434190,"byte_end":434193,"line_start":2642,"line_end":2642,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`.split_at_mut()`], except that it","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434195,"byte_end":434271,"line_start":2643,"line_end":2643,"column_start":2,"column_end":78}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434273,"byte_end":434340,"line_start":2644,"line_end":2644,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434342,"byte_end":434345,"line_start":2645,"line_end":2645,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434347,"byte_end":434359,"line_start":2646,"line_end":2646,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434361,"byte_end":434364,"line_start":2647,"line_end":2647,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434366,"byte_end":434438,"line_start":2648,"line_end":2648,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434440,"byte_end":434508,"line_start":2649,"line_end":2649,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434510,"byte_end":434513,"line_start":2650,"line_end":2650,"column_start":2,"column_end":5}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434515,"byte_end":434558,"line_start":2651,"line_end":2651,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434560,"byte_end":434569,"line_start":2652,"line_end":2652,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":3327},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435225,"byte_end":435233,"line_start":2677,"line_end":2677,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":3324},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434867,"byte_end":434922,"line_start":2668,"line_end":2668,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434924,"byte_end":434927,"line_start":2669,"line_end":2669,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434929,"byte_end":435002,"line_start":2670,"line_end":2670,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435004,"byte_end":435024,"line_start":2671,"line_end":2671,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435026,"byte_end":435029,"line_start":2672,"line_end":2672,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435031,"byte_end":435075,"line_start":2673,"line_end":2673,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435077,"byte_end":435121,"line_start":2674,"line_end":2674,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435123,"byte_end":435167,"line_start":2675,"line_end":2675,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435169,"byte_end":435213,"line_start":2676,"line_end":2676,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":3328},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436070,"byte_end":436078,"line_start":2692,"line_end":2692,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":3324},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435285,"byte_end":435347,"line_start":2678,"line_end":2678,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435349,"byte_end":435382,"line_start":2679,"line_end":2679,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435384,"byte_end":435387,"line_start":2680,"line_end":2680,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435389,"byte_end":435457,"line_start":2681,"line_end":2681,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435459,"byte_end":435531,"line_start":2682,"line_end":2682,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435533,"byte_end":435605,"line_start":2683,"line_end":2683,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435607,"byte_end":435675,"line_start":2684,"line_end":2684,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435677,"byte_end":435680,"line_start":2685,"line_end":2685,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435682,"byte_end":435743,"line_start":2686,"line_end":2686,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435745,"byte_end":435806,"line_start":2687,"line_end":2687,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435808,"byte_end":435869,"line_start":2688,"line_end":2688,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435871,"byte_end":435932,"line_start":2689,"line_end":2689,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435934,"byte_end":435995,"line_start":2690,"line_end":2690,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435997,"byte_end":436058,"line_start":2691,"line_end":2691,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":3329},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437768,"byte_end":437792,"line_start":2759,"line_end":2759,"column_start":15,"column_end":39},"name":"from_raw_parts_unchecked","qualname":"::slice::from_raw_parts_unchecked","value":"pub unsafe fn from_raw_parts_unchecked<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> &'a BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437060,"byte_end":437743,"line_start":2735,"line_end":2757,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437744,"byte_end":437753,"line_start":2758,"line_end":2758,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3333},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438680,"byte_end":438708,"line_start":2794,"line_end":2794,"column_start":15,"column_end":43},"name":"from_raw_parts_unchecked_mut","qualname":"::slice::from_raw_parts_unchecked_mut","value":"pub unsafe fn from_raw_parts_unchecked_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&mut BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts_mut`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437952,"byte_end":438655,"line_start":2770,"line_end":2792,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438656,"byte_end":438665,"line_start":2793,"line_end":2793,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3337},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","parent":null,"children":[{"krate":0,"index":3338},{"krate":0,"index":3339},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3345},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3354},{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3361},{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3380},{"krate":0,"index":5567},{"krate":0,"index":5580},{"krate":0,"index":5593},{"krate":0,"index":5605},{"krate":0,"index":5606},{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5621},{"krate":0,"index":5634},{"krate":0,"index":5646},{"krate":0,"index":5647},{"krate":0,"index":5648},{"krate":0,"index":5649},{"krate":0,"index":5662},{"krate":0,"index":5675},{"krate":0,"index":5687},{"krate":0,"index":5688},{"krate":0,"index":5689},{"krate":0,"index":5690},{"krate":0,"index":5703},{"krate":0,"index":5716},{"krate":0,"index":5728},{"krate":0,"index":5729},{"krate":0,"index":5730},{"krate":0,"index":5731},{"krate":0,"index":5744},{"krate":0,"index":5757},{"krate":0,"index":5769},{"krate":0,"index":5770},{"krate":0,"index":5771},{"krate":0,"index":3381},{"krate":0,"index":5772},{"krate":0,"index":5775},{"krate":0,"index":5787},{"krate":0,"index":5788},{"krate":0,"index":5791},{"krate":0,"index":5803},{"krate":0,"index":5804},{"krate":0,"index":5807},{"krate":0,"index":5819},{"krate":0,"index":5820},{"krate":0,"index":5823},{"krate":0,"index":5835},{"krate":0,"index":5836},{"krate":0,"index":5839},{"krate":0,"index":5851},{"krate":0,"index":3382}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides the [`BitStore`] trait, which contains all of the logic\nrequired to perform memory accesses from a data structure handle.\n\n# `bitvec` Memory Model\n\n`bitvec` considers all memory within [`BitSlice`] regions as if it were composed\nof discrete bits, each divisible and indipendent from its neighbors, just as the\nRust memory model considers elements `T` in a slice `[T]`. Much as ordinary byte\nslices `[u8]` provide an API where each byte is distinct and independent from\nits neighbors, but the underlying processor silicon clusters them in words and\ncachelines, both the processor silicon *and* the Rust compiler require that bits\nin a `BitSlice` be grouped into memory elements, and collectively subjected to\naliasing rules within their batch.\n\n`bitvec` manages this through the [`BitStore`] trait. It is implemented on three\ntype families available from the Rust standard libraries:\n\n- [unsigned integers]\n- [atomic] unsigned integers\n- [`Cell`] wrappers of unsigned integers\n\n`bitvec` receives a memory region typed with one of these three families and\nwraps it in one of its data structures based on [`BitSlice`]. The target\nprocessor is responsible for handling any contention between memory elements;\nthis is irrelevant to the `bitvec` model. `bitvec` is solely responsible for\nproving to the Rust compiler that all memory accesses through its types are\ncorrectly managed according to the `&`/`&mut` shared/exclusion reference model,\nand the [`UnsafeCell`] shared-mutation model.\n\nThrough [`BitStore`], `bitvec` is able to demonstrate that `&mut BitSlice`\nreferences to a region of *bits* have no other `BitSlice` references capable of\nviewing those bits. However, `&mut BitSlice` references *may* have other\n`&BitSlice` references capable of viewing the memory elements at locations that\nit modifies, and the Rust compiler considers it undefined behavior for such\nconditions to allow racing writes and reads without synchronization.\n\nAs such, [`BitStore`] provides a closed type-system graph that the [`BitSlice`]\nAPI uses to mark events that can induce aliases to memory locations. When a\n`&mut BitSlice<_, T>` typed with an ordinary unsigned integer use any of the\nAPIs that call [`.split_at_mut()`], it transitions to\n`&mut BitSlice<_, T::Alias>`. The [`::Alias`] associated type is always a type\nthat manages aliasing references to a single memory location: either an [atomic]\nunsigned integer `T` or a [`Cell`] of the unsigned integer `T`. The Rust\nstandard library guarantees that these types will behave correctly when multiple\nreferences to a single location attempt to read from and write to it.\n\nThe [atomic] and [`Cell`] types stay as themselves when [`BitSlice`] introduces\naliasing conditions, as they are already alias-aware.\n\nLastly, the `bitvec` memory description model as implemented in the [`domain`]\nmodule is able to perform the inverse transition: where it can demonstrate a\nstatic awareness that the `&`/`&mut` exclusion rules are satisfied for a\nparticular element slice `[T]`, it may apply the [`::Unalias`] marker to undo\nany `::Alias`ing, and present a type that has no more aliasing protection than\nthat with which the memory region was initially declared.\n\nNamely, this means that the [atomic] and [`Cell`] wrappers will never be removed\nfrom a region that had them before it was given to `bitvec`, while a region of\nordinary integers may regain the ability to be viewed without synchrony guards\nif `bitvec` can prove safety in the [`domain`] module.\n\nIn order to retain `bitvec`’s promise that an `&mut BitSlice<_, T>` has the sole\nright of observation for all bits in its region, the unsigned integers alias to\na crate-internal wrapper over the alias-capable standard-library types. This\nwrapper forbids mutation through shared references, so two [`BitSlice`]\nreferences that alias a memory location, but do not overlap in bits, may not be\ncoërced to interfere with each other.\n\n[atomic]: core::sync::atomic\n[unsigned integers]: core::primitive\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`domain`]: crate::domain\n[`::Alias`]: crate::store::BitStore::Alias\n[`::Unalias`]: crate::store::BitStore::Unalias\n[`.split_at_mut()`]: crate::slice::BitSlice::split_at_mut\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":625331,"byte_end":629675,"line_start":1,"line_end":81,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3367},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632238,"byte_end":632246,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: 'static + seal::Sealed + Debug","parent":null,"children":[{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3372},{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3376},{"krate":0,"index":3378}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is used to describe how [`BitSlice`] regions interact with the memory\nbus when reading to or writing from locations. It manages the behavior required\nwhen locations are contended for write permissions by multiple handles, and\nensures that Rust’s `&`/`&mut` shared/exclusion system, as well as its\n[`UnsafeCell`] shared-mutation system, are upheld for individual bits as well as\nfor the memory operations that power the slice.\n\nThis trait is publicly implemented on the unsigned integers that implement\n[`BitRegister`], their [`Cell`] wrappers, and (if present) their [atomic]\nvariants. You may freely construct [`BitSlice`] regions over elements or slices\nof any of these types.\n\nShared [`BitSlice`] references (`&BitSlice<_, T: BitStore>`) permit multiple\nhandles to view the bits they describe. When `T` is a [`Cell`] or [atom], these\nhandles may use the methods [`.set_aliased()`] and [`.set_aliased_unchecked()`]\nto modify memory; when `T` is an ordinary integer, they may not.\n\nExclusive [`BitSlice`] references (`&mut BitSlice<_, T: BitStore>`) do not allow\nany other handle to view the bits they describe. However, other handles may view\nthe **memory locations** containing their bits! When `T` is a [`Cell`] or\n[atom], no special behavior occurs. When `T` is an ordinary integer, [`bitvec`]\ndetects the creation of multiple `&mut BitSlice<_, T>` handles that do not alias\nbits but *do* alias memory, and enforces that these handles use `Cell` or atomic\nbehavior to access the underlying memory, even though individual bits in the\nslices are not contended.\n\n# Integer Width Restricitons\n\nCurrently, [`bitvec`] is only tested on 32- and 64- bit architectures. This\nmeans that `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`,\nbut `u64` will only do so on 64-bit targets. This is a necessary restriction of\n`bitvec` internals. Please comment on [Issue #76] if this affects you.\n\n[Issue #76]: https://github.com/myrrlyn/bitvec/issues/76\n[atom]: core::sync::atomic\n[atomic]: core::sync::atomic\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`bitvec`]: crate\n[`.set_aliased()`]: crate::slice::BitSlice::set_aliased\n[`.set_aliased_unchecked()`]: crate::slice::BitSlice::set_aliased_unchecked\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":629858,"byte_end":632227,"line_start":103,"line_end":148,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3368},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632455,"byte_end":632458,"line_start":154,"line_end":154,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" The register type used in the slice region underlying a [`BitSlice`]\n handle. It is always an unsigned integer.","sig":null,"attributes":[{"value":"/ The register type used in the slice region underlying a [`BitSlice`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632282,"byte_end":632354,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/ handle. It is always an unsigned integer.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632356,"byte_end":632401,"line_start":151,"line_end":151,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632403,"byte_end":632406,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632408,"byte_end":632448,"line_start":153,"line_end":153,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3369},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632731,"byte_end":632737,"line_start":158,"line_end":158,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem> + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" A type that selects appropriate load/store instructions used for\n accessing the memory bus. It determines what instructions are used when\n moving a `Self::Mem` value between the processor and the memory system.\n","sig":null,"attributes":[{"value":"/ A type that selects appropriate load/store instructions used for","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632502,"byte_end":632570,"line_start":155,"line_end":155,"column_start":2,"column_end":70}},{"value":"/ accessing the memory bus. It determines what instructions are used when","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632572,"byte_end":632647,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/ moving a `Self::Mem` value between the processor and the memory system.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632649,"byte_end":632724,"line_start":157,"line_end":157,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":3370},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633046,"byte_end":633051,"line_start":164,"line_end":164,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor. It is used when a [`BitSlice`]\n introduces multiple handles that view the same memory location, and at\n least one of them has write permission to it.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor. It is used when a [`BitSlice`]","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632797,"byte_end":632865,"line_start":159,"line_end":159,"column_start":2,"column_end":70}},{"value":"/ introduces multiple handles that view the same memory location, and at","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632867,"byte_end":632941,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ least one of them has write permission to it.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632943,"byte_end":632992,"line_start":161,"line_end":161,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632994,"byte_end":632997,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632999,"byte_end":633039,"line_start":163,"line_end":163,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3371},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633265,"byte_end":633272,"line_start":169,"line_end":169,"column_start":7,"column_end":14},"name":"Unalias","qualname":"::store::BitStore::Unalias","value":"type Unalias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" The inverse of `Alias`. It is used when a [`BitSlice`] removes the\n conditions that required a `T -> T::Alias` transition.","sig":null,"attributes":[{"value":"/ The inverse of `Alias`. It is used when a [`BitSlice`] removes the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633081,"byte_end":633151,"line_start":165,"line_end":165,"column_start":2,"column_end":72}},{"value":"/ conditions that required a `T -> T::Alias` transition.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633153,"byte_end":633211,"line_start":166,"line_end":166,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633213,"byte_end":633216,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633218,"byte_end":633258,"line_start":168,"line_end":168,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3372},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633390,"byte_end":633400,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" Loads a value out of the memory system according to the `::Access`\n rules.\n","sig":null,"attributes":[{"value":"/ Loads a value out of the memory system according to the `::Access`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633303,"byte_end":633373,"line_start":171,"line_end":171,"column_start":2,"column_end":72}},{"value":"/ rules.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633375,"byte_end":633385,"line_start":172,"line_end":172,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3373},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633505,"byte_end":633516,"line_start":176,"line_end":176,"column_start":5,"column_end":16},"name":"store_value","qualname":"::store::BitStore::store_value","value":"pub fn store_value(&mut Self, Self::Mem)","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" Stores a value into the memory system according to the `::Access` rules.\n","sig":null,"attributes":[{"value":"/ Stores a value into the memory system according to the `::Access` rules.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633424,"byte_end":633500,"line_start":175,"line_end":175,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634117,"byte_end":634124,"line_start":198,"line_end":198,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" Reads a single bit out of the memory system according to the `::Access`\n rules. This is lifted from [`BitAccess`] so that it can be used\n elsewhere without additional casts.","sig":null,"attributes":[{"value":"/ Reads a single bit out of the memory system according to the `::Access`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633549,"byte_end":633624,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ rules. This is lifted from [`BitAccess`] so that it can be used","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633626,"byte_end":633693,"line_start":179,"line_end":179,"column_start":2,"column_end":69}},{"value":"/ elsewhere without additional casts.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633695,"byte_end":633734,"line_start":180,"line_end":180,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633736,"byte_end":633739,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633741,"byte_end":633762,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633764,"byte_end":633767,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `O`: The ordering of bits within `Self::Mem` to use for looking up the","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633769,"byte_end":633845,"line_start":184,"line_end":184,"column_start":2,"column_end":78}},{"value":"/   bit at `index`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633847,"byte_end":633868,"line_start":185,"line_end":185,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633870,"byte_end":633873,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633875,"byte_end":633891,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633893,"byte_end":633896,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633898,"byte_end":633911,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633913,"byte_end":633977,"line_start":190,"line_end":190,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633979,"byte_end":633982,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633984,"byte_end":633997,"line_start":192,"line_end":192,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":633999,"byte_end":634002,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` at `index`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634004,"byte_end":634051,"line_start":194,"line_end":194,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634053,"byte_end":634056,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ [`BitAccess`]: crate::access::BitAccess","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634058,"byte_end":634101,"line_start":196,"line_end":196,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634103,"byte_end":634112,"line_start":197,"line_end":197,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":3376},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634353,"byte_end":634370,"line_start":207,"line_end":207,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634268,"byte_end":634329,"line_start":205,"line_end":205,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":3378},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634502,"byte_end":634515,"line_start":212,"line_end":212,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":3367},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634383,"byte_end":634452,"line_start":209,"line_end":209,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634454,"byte_end":634478,"line_start":210,"line_end":210,"column_start":2,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":3383},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638491,"byte_end":638497,"line_start":378,"line_end":378,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638123,"byte_end":638193,"line_start":371,"line_end":371,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638195,"byte_end":638198,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638200,"byte_end":638274,"line_start":373,"line_end":373,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638276,"byte_end":638352,"line_start":374,"line_end":374,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638354,"byte_end":638418,"line_start":375,"line_end":375,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638420,"byte_end":638463,"line_start":376,"line_end":376,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3384},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","parent":null,"children":[{"krate":0,"index":3385},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3392},{"krate":0,"index":3395},{"krate":0,"index":3398},{"krate":0,"index":3404},{"krate":0,"index":3411},{"krate":0,"index":3418},{"krate":0,"index":3427},{"krate":0,"index":3430},{"krate":0,"index":3433},{"krate":0,"index":3438},{"krate":0,"index":3442},{"krate":0,"index":3446},{"krate":0,"index":3451}],"decl_id":null,"docs":" [`BitSlice`] view adapters for memory regions.","sig":null,"attributes":[{"value":"* [`BitSlice`] view adapters for memory regions.\n\nThe [`&BitSlice`][`BitSlice`] type is a referential view over existing memory.\nThe inherent constructor functions are awkward to call, as they require function\nsyntax rather than method syntax, and must provide a token for the memory type\nargument even though this is informed by the already-existing reference being\nused.\n\nThis module provides an extension trait, [`BitView`], which provides methods on\nmany memory types (all [`BitRegister`] integers, and slices and arrays of them)\nto construct [`BitSlice`] over those values.\n\nIn addition, the traits [`AsBits`] and [`AsBitsMut`] are analogues of [`AsRef`]\nand [`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitRegister]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because [`BitView`] combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsBits`]: crate::view::AsBits\n[`AsBitsMut`]: crate::view::AsBitsMut\n[`AsMut`]: core::convert::AsMut\n[`AsRef`]: core::convert::AsRef\n[`BitRegister`]: crate::mem::BitRegister\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n!*/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":640926,"byte_end":642369,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3398},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643142,"byte_end":643149,"line_start":56,"line_end":56,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3402}],"decl_id":null,"docs":" Creates a [`BitSlice`] view over some type that supports it.","sig":null,"attributes":[{"value":"* Creates a [`BitSlice`] view over some type that supports it.\n\nThis trait is implemented on all [`BitRegister`] types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitRegister; 0 ..= 64]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a [`BitRegister`] type that can be viewed with\nthis trait, then you can implement this trait by forwarding to the interior\nview.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":642464,"byte_end":643131,"line_start":40,"line_end":55,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3399},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643192,"byte_end":643197,"line_start":58,"line_end":58,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":3398},"children":[],"decl_id":null,"docs":" The region’s storage type.\n","sig":null,"attributes":[{"value":"/ The region’s storage type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643153,"byte_end":643185,"line_start":57,"line_end":57,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643550,"byte_end":643559,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":3398},"children":[],"decl_id":null,"docs":" Views a memory region as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643211,"byte_end":643255,"line_start":60,"line_end":60,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643257,"byte_end":643260,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643262,"byte_end":643283,"line_start":62,"line_end":62,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643285,"byte_end":643288,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643290,"byte_end":643338,"line_start":64,"line_end":64,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643340,"byte_end":643343,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643345,"byte_end":643361,"line_start":66,"line_end":66,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643363,"byte_end":643366,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643368,"byte_end":643421,"line_start":68,"line_end":68,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643423,"byte_end":643426,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643428,"byte_end":643441,"line_start":70,"line_end":70,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643443,"byte_end":643446,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643448,"byte_end":643498,"line_start":72,"line_end":72,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643500,"byte_end":643503,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643505,"byte_end":643545,"line_start":74,"line_end":74,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643984,"byte_end":643997,"line_start":93,"line_end":93,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":3398},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable [`BitSlice`].","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643621,"byte_end":643673,"line_start":78,"line_end":78,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643675,"byte_end":643678,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643680,"byte_end":643701,"line_start":80,"line_end":80,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643703,"byte_end":643706,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643708,"byte_end":643756,"line_start":82,"line_end":82,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643758,"byte_end":643761,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643763,"byte_end":643779,"line_start":84,"line_end":84,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643781,"byte_end":643784,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The region to view as individual mutable bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643786,"byte_end":643851,"line_start":86,"line_end":86,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643853,"byte_end":643856,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643858,"byte_end":643871,"line_start":88,"line_end":88,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643873,"byte_end":643876,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643878,"byte_end":643932,"line_start":90,"line_end":90,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643934,"byte_end":643937,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":643939,"byte_end":643979,"line_start":92,"line_end":92,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3427},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645298,"byte_end":645310,"line_start":156,"line_end":156,"column_start":11,"column_end":23},"name":"BitViewSized","qualname":"::view::BitViewSized","value":"BitViewSized: BitView + Sized","parent":null,"children":[{"krate":0,"index":3428},{"krate":0,"index":3429}],"decl_id":null,"docs":" Helper for size awareness on `Sized` storage regions.\n","sig":null,"attributes":[{"value":"/ Helper for size awareness on `Sized` storage regions.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645230,"byte_end":645287,"line_start":155,"line_end":155,"column_start":1,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":3428},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645399,"byte_end":645403,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"ELTS","qualname":"::view::BitViewSized::ELTS","value":"usize","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Counts the number of elements `T` contained in the type.\n","sig":null,"attributes":[{"value":"/ Counts the number of elements `T` contained in the type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645331,"byte_end":645391,"line_start":157,"line_end":157,"column_start":2,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":3429},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645473,"byte_end":645477,"line_start":160,"line_end":160,"column_start":8,"column_end":12},"name":"BITS","qualname":"::view::BitViewSized::BITS","value":"usize","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Counts the number of bits contained in the type.\n","sig":null,"attributes":[{"value":"/ Counts the number of bits contained in the type.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645413,"byte_end":645465,"line_start":159,"line_end":159,"column_start":2,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":3438},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646761,"byte_end":646767,"line_start":204,"line_end":204,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":3440}],"decl_id":null,"docs":" Views a region as an immutable [`BitSlice`] only.","sig":null,"attributes":[{"value":"* Views a region as an immutable [`BitSlice`] only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: core::convert::AsRef\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645776,"byte_end":646750,"line_start":177,"line_end":203,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647130,"byte_end":647137,"line_start":222,"line_end":222,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3438},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646792,"byte_end":646838,"line_start":207,"line_end":207,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646840,"byte_end":646843,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646845,"byte_end":646866,"line_start":209,"line_end":209,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646868,"byte_end":646871,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646873,"byte_end":646921,"line_start":211,"line_end":211,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646923,"byte_end":646926,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646928,"byte_end":646944,"line_start":213,"line_end":213,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646946,"byte_end":646949,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":646951,"byte_end":647014,"line_start":215,"line_end":215,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647016,"byte_end":647019,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647021,"byte_end":647034,"line_start":217,"line_end":217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647036,"byte_end":647039,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647041,"byte_end":647078,"line_start":219,"line_end":219,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647080,"byte_end":647083,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647085,"byte_end":647125,"line_start":221,"line_end":221,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3442},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648162,"byte_end":648171,"line_start":253,"line_end":253,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":3444}],"decl_id":null,"docs":" Views a region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"* Views a region as a mutable [`BitSlice`].\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: core::convert::AsMut\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647190,"byte_end":648151,"line_start":226,"line_end":252,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648533,"byte_end":648544,"line_start":271,"line_end":271,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3442},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648196,"byte_end":648240,"line_start":256,"line_end":256,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648242,"byte_end":648245,"line_start":257,"line_end":257,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648247,"byte_end":648268,"line_start":258,"line_end":258,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648270,"byte_end":648273,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648275,"byte_end":648323,"line_start":260,"line_end":260,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648325,"byte_end":648328,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648330,"byte_end":648346,"line_start":262,"line_end":262,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648348,"byte_end":648351,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648353,"byte_end":648420,"line_start":264,"line_end":264,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648422,"byte_end":648425,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648427,"byte_end":648440,"line_start":266,"line_end":266,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648442,"byte_end":648445,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648447,"byte_end":648481,"line_start":268,"line_end":268,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648483,"byte_end":648486,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648488,"byte_end":648528,"line_start":270,"line_end":270,"column_start":2,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52459,"byte_end":52460,"line_start":191,"line_end":191,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65551,"byte_end":65559,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67212,"byte_end":67220,"line_start":124,"line_end":124,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67435,"byte_end":67443,"line_start":137,"line_end":137,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68083,"byte_end":68091,"line_start":173,"line_end":173,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68441,"byte_end":68449,"line_start":190,"line_end":190,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68595,"byte_end":68603,"line_start":201,"line_end":201,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69016,"byte_end":69024,"line_start":26,"line_end":26,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69293,"byte_end":69301,"line_start":42,"line_end":42,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69545,"byte_end":69553,"line_start":55,"line_end":55,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69819,"byte_end":69827,"line_start":71,"line_end":71,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70070,"byte_end":70078,"line_start":84,"line_end":84,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70347,"byte_end":70355,"line_start":100,"line_end":100,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70589,"byte_end":70597,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70820,"byte_end":70828,"line_start":127,"line_end":127,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71035,"byte_end":71043,"line_start":139,"line_end":139,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71353,"byte_end":71361,"line_start":154,"line_end":154,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71585,"byte_end":71593,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72298,"byte_end":72306,"line_start":41,"line_end":41,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72524,"byte_end":72532,"line_start":53,"line_end":53,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72708,"byte_end":72716,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72991,"byte_end":72999,"line_start":81,"line_end":81,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73068,"byte_end":73076,"line_start":88,"line_end":88,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73284,"byte_end":73292,"line_start":99,"line_end":99,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73501,"byte_end":73509,"line_start":112,"line_end":112,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73739,"byte_end":73747,"line_start":125,"line_end":125,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73975,"byte_end":73983,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74280,"byte_end":74288,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74502,"byte_end":74510,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74715,"byte_end":74723,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74888,"byte_end":74896,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":75302,"byte_end":75310,"line_start":205,"line_end":205,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":77863,"byte_end":77871,"line_start":308,"line_end":308,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78037,"byte_end":78045,"line_start":320,"line_end":320,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78222,"byte_end":78230,"line_start":331,"line_end":331,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78499,"byte_end":78507,"line_start":345,"line_end":345,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78719,"byte_end":78727,"line_start":357,"line_end":357,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78937,"byte_end":78945,"line_start":369,"line_end":369,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79155,"byte_end":79163,"line_start":381,"line_end":381,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79372,"byte_end":79380,"line_start":393,"line_end":393,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79591,"byte_end":79599,"line_start":406,"line_end":406,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80520,"byte_end":80528,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80606,"byte_end":80614,"line_start":457,"line_end":457,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81065,"byte_end":81085,"line_start":481,"line_end":481,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81290,"byte_end":81310,"line_start":493,"line_end":493,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81569,"byte_end":81589,"line_start":507,"line_end":507,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62202,"byte_end":62210,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95690,"byte_end":95699,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95826,"byte_end":95835,"line_start":378,"line_end":378,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104068,"byte_end":104074,"line_start":656,"line_end":656,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104187,"byte_end":104193,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104840,"byte_end":104846,"line_start":692,"line_end":692,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105469,"byte_end":105475,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105748,"byte_end":105754,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105802,"byte_end":105808,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131305,"byte_end":131313,"line_start":719,"line_end":719,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":141464,"byte_end":141472,"line_start":1048,"line_end":1048,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":150935,"byte_end":150943,"line_start":1366,"line_end":1366,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163098,"byte_end":163104,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172645,"byte_end":172651,"line_start":423,"line_end":423,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172858,"byte_end":172864,"line_start":435,"line_end":435,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173064,"byte_end":173070,"line_start":445,"line_end":445,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173279,"byte_end":173285,"line_start":455,"line_end":455,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173787,"byte_end":173798,"line_start":478,"line_end":478,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174647,"byte_end":174658,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174874,"byte_end":174885,"line_start":527,"line_end":527,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176941,"byte_end":176947,"line_start":597,"line_end":597,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181346,"byte_end":181352,"line_start":756,"line_end":756,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181556,"byte_end":181562,"line_start":766,"line_end":766,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181771,"byte_end":181777,"line_start":776,"line_end":776,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183328,"byte_end":183334,"line_start":827,"line_end":827,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185548,"byte_end":185554,"line_start":916,"line_end":916,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185754,"byte_end":185760,"line_start":926,"line_end":926,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185969,"byte_end":185975,"line_start":936,"line_end":936,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187281,"byte_end":187287,"line_start":985,"line_end":985,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189429,"byte_end":189435,"line_start":1065,"line_end":1065,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189635,"byte_end":189641,"line_start":1075,"line_end":1075,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189850,"byte_end":189856,"line_start":1085,"line_end":1085,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190771,"byte_end":190778,"line_start":1122,"line_end":1122,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193023,"byte_end":193030,"line_start":1213,"line_end":1213,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193231,"byte_end":193238,"line_start":1223,"line_end":1223,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193448,"byte_end":193455,"line_start":1233,"line_end":1233,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193644,"byte_end":193651,"line_start":1243,"line_end":1243,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193854,"byte_end":193861,"line_start":1254,"line_end":1254,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194061,"byte_end":194068,"line_start":1268,"line_end":1268,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194262,"byte_end":194269,"line_start":1282,"line_end":1282,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217851,"byte_end":217855,"line_start":266,"line_end":266,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219203,"byte_end":219207,"line_start":312,"line_end":312,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251344,"byte_end":251357,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251488,"byte_end":251501,"line_start":104,"line_end":104,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251699,"byte_end":251712,"line_start":114,"line_end":114,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":252021,"byte_end":252034,"line_start":128,"line_end":128,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":252067,"byte_end":252080,"line_start":131,"line_end":131,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256152,"byte_end":256158,"line_start":127,"line_end":127,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257673,"byte_end":257679,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259372,"byte_end":259378,"line_start":259,"line_end":259,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259587,"byte_end":259593,"line_start":271,"line_end":271,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259778,"byte_end":259784,"line_start":281,"line_end":281,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260283,"byte_end":260289,"line_start":301,"line_end":301,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260580,"byte_end":260586,"line_start":317,"line_end":317,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260803,"byte_end":260809,"line_start":330,"line_end":330,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261275,"byte_end":261281,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261618,"byte_end":261624,"line_start":369,"line_end":369,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261877,"byte_end":261883,"line_start":382,"line_end":382,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262095,"byte_end":262101,"line_start":394,"line_end":394,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262398,"byte_end":262404,"line_start":408,"line_end":408,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262637,"byte_end":262643,"line_start":421,"line_end":421,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262875,"byte_end":262881,"line_start":434,"line_end":434,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263276,"byte_end":263282,"line_start":453,"line_end":453,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263499,"byte_end":263505,"line_start":468,"line_end":468,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263670,"byte_end":263676,"line_start":479,"line_end":479,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264006,"byte_end":264012,"line_start":497,"line_end":497,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267576,"byte_end":267587,"line_start":81,"line_end":81,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271411,"byte_end":271422,"line_start":218,"line_end":218,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271576,"byte_end":271587,"line_start":230,"line_end":230,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271746,"byte_end":271757,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272114,"byte_end":272125,"line_start":258,"line_end":258,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272328,"byte_end":272339,"line_start":271,"line_end":271,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272589,"byte_end":272594,"line_start":284,"line_end":284,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272809,"byte_end":272820,"line_start":297,"line_end":297,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273169,"byte_end":273180,"line_start":313,"line_end":313,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273389,"byte_end":273400,"line_start":327,"line_end":327,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274235,"byte_end":274246,"line_start":373,"line_end":373,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274713,"byte_end":274724,"line_start":399,"line_end":399,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274960,"byte_end":274971,"line_start":411,"line_end":411,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275114,"byte_end":275125,"line_start":420,"line_end":420,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278560,"byte_end":278566,"line_start":121,"line_end":121,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1717},{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301907,"byte_end":301913,"line_start":888,"line_end":888,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303860,"byte_end":303866,"line_start":960,"line_end":960,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311902,"byte_end":311908,"line_start":1237,"line_end":1237,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1753}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312736,"byte_end":312742,"line_start":1263,"line_end":1263,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312927,"byte_end":312933,"line_start":1278,"line_end":1278,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313051,"byte_end":313057,"line_start":1287,"line_end":1287,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313379,"byte_end":313385,"line_start":1302,"line_end":1302,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313845,"byte_end":313851,"line_start":1322,"line_end":1322,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314389,"byte_end":314395,"line_start":1347,"line_end":1347,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314589,"byte_end":314595,"line_start":1359,"line_end":1359,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314796,"byte_end":314802,"line_start":1371,"line_end":1371,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1793},{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315055,"byte_end":315061,"line_start":1385,"line_end":1385,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315272,"byte_end":315278,"line_start":1398,"line_end":1398,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315573,"byte_end":315579,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315877,"byte_end":315883,"line_start":1433,"line_end":1433,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316094,"byte_end":316100,"line_start":1447,"line_end":1447,"column_start":24,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316624,"byte_end":316635,"line_start":1469,"line_end":1469,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1822}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316806,"byte_end":316817,"line_start":1479,"line_end":1479,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317001,"byte_end":317012,"line_start":1489,"line_end":1489,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317188,"byte_end":317199,"line_start":1499,"line_end":1499,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317392,"byte_end":317403,"line_start":1509,"line_end":1509,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":325528,"byte_end":325535,"line_start":202,"line_end":202,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":346455,"byte_end":346462,"line_start":900,"line_end":900,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":347518,"byte_end":347525,"line_start":940,"line_end":940,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":348857,"byte_end":348864,"line_start":985,"line_end":985,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349007,"byte_end":349014,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349137,"byte_end":349144,"line_start":1005,"line_end":1005,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1992}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349791,"byte_end":349798,"line_start":1027,"line_end":1027,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349978,"byte_end":349985,"line_start":1040,"line_end":1040,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350208,"byte_end":350215,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350410,"byte_end":350417,"line_start":1065,"line_end":1065,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350913,"byte_end":350925,"line_start":1087,"line_end":1087,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351101,"byte_end":351113,"line_start":1097,"line_end":1097,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2017}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351304,"byte_end":351316,"line_start":1107,"line_end":1107,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351832,"byte_end":351844,"line_start":1129,"line_end":1129,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2023}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352337,"byte_end":352349,"line_start":1150,"line_end":1150,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352400,"byte_end":352412,"line_start":1154,"line_end":1154,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439637,"byte_end":439645,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2438},{"krate":0,"index":2441},{"krate":0,"index":2444},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2480},{"krate":0,"index":2482},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2505}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519150,"byte_end":519159,"line_start":2697,"line_end":2697,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521626,"byte_end":521630,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525961,"byte_end":525965,"line_start":265,"line_end":265,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526186,"byte_end":526190,"line_start":280,"line_end":280,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2658}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526374,"byte_end":526378,"line_start":292,"line_end":292,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526858,"byte_end":526868,"line_start":315,"line_end":315,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527557,"byte_end":527567,"line_start":354,"line_end":354,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2679},{"krate":0,"index":2681}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527956,"byte_end":527966,"line_start":374,"line_end":374,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528112,"byte_end":528122,"line_start":385,"line_end":385,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528462,"byte_end":528472,"line_start":404,"line_end":404,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529086,"byte_end":529096,"line_start":437,"line_end":437,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2704},{"krate":0,"index":2706}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529455,"byte_end":529465,"line_start":453,"line_end":453,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529611,"byte_end":529621,"line_start":464,"line_end":464,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530627,"byte_end":530634,"line_start":513,"line_end":513,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532722,"byte_end":532729,"line_start":596,"line_end":596,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2732}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544446,"byte_end":544457,"line_start":1119,"line_end":1119,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2739},{"krate":0,"index":2740}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":547628,"byte_end":547642,"line_start":1247,"line_end":1247,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2745},{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":556950,"byte_end":556962,"line_start":1599,"line_end":1599,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2751},{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560222,"byte_end":560237,"line_start":1727,"line_end":1727,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2757},{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577039,"byte_end":577047,"line_start":2455,"line_end":2455,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2812}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577306,"byte_end":577314,"line_start":2470,"line_end":2470,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2816}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577490,"byte_end":577498,"line_start":2484,"line_end":2484,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":578862,"byte_end":578870,"line_start":2544,"line_end":2544,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2829}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579613,"byte_end":579621,"line_start":2580,"line_end":2580,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579766,"byte_end":579774,"line_start":2591,"line_end":2591,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580377,"byte_end":580386,"line_start":2617,"line_end":2617,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580645,"byte_end":580654,"line_start":2632,"line_end":2632,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2846}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580830,"byte_end":580839,"line_start":2646,"line_end":2646,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2850},{"krate":0,"index":2851},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582018,"byte_end":582027,"line_start":2702,"line_end":2702,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582773,"byte_end":582782,"line_start":2738,"line_end":2738,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582928,"byte_end":582937,"line_start":2749,"line_end":2749,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590081,"byte_end":590089,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590356,"byte_end":590364,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2937}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590631,"byte_end":590639,"line_start":55,"line_end":55,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2943}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590897,"byte_end":590905,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2948},{"krate":0,"index":2949}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":594113,"byte_end":594121,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2999},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3005},{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":602559,"byte_end":602567,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3014},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610033,"byte_end":610041,"line_start":44,"line_end":44,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610106,"byte_end":610114,"line_start":51,"line_end":51,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610616,"byte_end":610624,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3110}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612157,"byte_end":612165,"line_start":147,"line_end":147,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3130}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612414,"byte_end":612422,"line_start":161,"line_end":161,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3136}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612990,"byte_end":612998,"line_start":181,"line_end":181,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3142}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":614129,"byte_end":614137,"line_start":234,"line_end":234,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3160}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":614426,"byte_end":614434,"line_start":248,"line_end":248,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3166}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":616264,"byte_end":616272,"line_start":344,"line_end":344,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":616537,"byte_end":616545,"line_start":358,"line_end":358,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":622518,"byte_end":622526,"line_start":533,"line_end":533,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3213}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":623831,"byte_end":623839,"line_start":569,"line_end":569,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":625015,"byte_end":625023,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373709,"byte_end":373717,"line_start":491,"line_end":491,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3236},{"krate":0,"index":3238},{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3245},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3256},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3270},{"krate":0,"index":3272},{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3279},{"krate":0,"index":3280},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3284},{"krate":0,"index":3285}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410788,"byte_end":410796,"line_start":1880,"line_end":1880,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":3293}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415954,"byte_end":415962,"line_start":2067,"line_end":2067,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3298},{"krate":0,"index":3299},{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302},{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427838,"byte_end":427846,"line_start":2429,"line_end":2429,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3314},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430764,"byte_end":430772,"line_start":2527,"line_end":2527,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434815,"byte_end":434823,"line_start":2663,"line_end":2663,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3327},{"krate":0,"index":3328}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":644119,"byte_end":644120,"line_start":98,"line_end":98,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3406},{"krate":0,"index":3407},{"krate":0,"index":3409}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645632,"byte_end":645633,"line_start":165,"line_end":165,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3432}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648661,"byte_end":648662,"line_start":276,"line_end":276,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3449}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648872,"byte_end":648873,"line_start":289,"line_end":289,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11533,"byte_end":11539,"line_start":284,"line_end":284,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11973,"byte_end":11981,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11550,"byte_end":11556,"line_start":286,"line_end":286,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11566,"byte_end":11571,"line_start":287,"line_end":287,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11592,"byte_end":11598,"line_start":289,"line_end":289,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":581}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11608,"byte_end":11613,"line_start":290,"line_end":290,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":673}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11623,"byte_end":11628,"line_start":291,"line_end":291,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":788}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11638,"byte_end":11641,"line_start":292,"line_end":292,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":978}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11651,"byte_end":11656,"line_start":293,"line_end":293,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1008}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11666,"byte_end":11673,"line_start":294,"line_end":294,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1067}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11683,"byte_end":11686,"line_start":295,"line_end":295,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1116}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11696,"byte_end":11701,"line_start":296,"line_end":296,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2123}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11711,"byte_end":11716,"line_start":297,"line_end":297,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3337}},{"kind":"Mod","span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11726,"byte_end":11730,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3384}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47931,"byte_end":47937,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":5,"index":31},"to":{"krate":0,"index":50}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52459,"byte_end":52460,"line_start":191,"line_end":191,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":59},"to":{"krate":0,"index":50}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65551,"byte_end":65559,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67212,"byte_end":67220,"line_start":124,"line_end":124,"column_start":22,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3501},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67435,"byte_end":67443,"line_start":137,"line_end":137,"column_start":25,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3501},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68083,"byte_end":68091,"line_start":173,"line_end":173,"column_start":36,"column_end":44},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3501},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68441,"byte_end":68449,"line_start":190,"line_end":190,"column_start":34,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3501},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68595,"byte_end":68603,"line_start":201,"line_end":201,"column_start":30,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3501},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69016,"byte_end":69024,"line_start":26,"line_end":26,"column_start":33,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3139}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69293,"byte_end":69301,"line_start":42,"line_end":42,"column_start":39,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3166}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69545,"byte_end":69553,"line_start":55,"line_end":55,"column_start":32,"column_end":40},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3144}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69819,"byte_end":69827,"line_start":71,"line_end":71,"column_start":38,"column_end":46},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3170}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70070,"byte_end":70078,"line_start":84,"line_end":84,"column_start":33,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3149}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70347,"byte_end":70355,"line_start":100,"line_end":100,"column_start":39,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3174}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70589,"byte_end":70597,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70820,"byte_end":70828,"line_start":127,"line_end":127,"column_start":25,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71035,"byte_end":71043,"line_start":139,"line_end":139,"column_start":32,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71353,"byte_end":71361,"line_start":154,"line_end":154,"column_start":35,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71585,"byte_end":71593,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3135}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72298,"byte_end":72306,"line_start":41,"line_end":41,"column_start":46,"column_end":54},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2615}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72524,"byte_end":72532,"line_start":53,"line_end":53,"column_start":49,"column_end":57},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2618}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72708,"byte_end":72716,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72991,"byte_end":72999,"line_start":81,"line_end":81,"column_start":19,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73068,"byte_end":73076,"line_start":88,"line_end":88,"column_start":20,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73284,"byte_end":73292,"line_start":99,"line_end":99,"column_start":51,"column_end":59},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73501,"byte_end":73509,"line_start":112,"line_end":112,"column_start":36,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73739,"byte_end":73747,"line_start":125,"line_end":125,"column_start":46,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73975,"byte_end":73983,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74280,"byte_end":74288,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74502,"byte_end":74510,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74715,"byte_end":74723,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74888,"byte_end":74896,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2929}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":75302,"byte_end":75310,"line_start":205,"line_end":205,"column_start":6,"column_end":14},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2929}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":77863,"byte_end":77871,"line_start":308,"line_end":308,"column_start":24,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78037,"byte_end":78045,"line_start":320,"line_end":320,"column_start":23,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78222,"byte_end":78230,"line_start":331,"line_end":331,"column_start":22,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78499,"byte_end":78507,"line_start":345,"line_end":345,"column_start":24,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78719,"byte_end":78727,"line_start":357,"line_end":357,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9416}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78937,"byte_end":78945,"line_start":369,"line_end":369,"column_start":22,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9412}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79155,"byte_end":79163,"line_start":381,"line_end":381,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9418}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79372,"byte_end":79380,"line_start":393,"line_end":393,"column_start":21,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79591,"byte_end":79599,"line_start":406,"line_end":406,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":7473}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80520,"byte_end":80528,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80606,"byte_end":80614,"line_start":457,"line_end":457,"column_start":22,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":3057}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81065,"byte_end":81085,"line_start":481,"line_end":481,"column_start":16,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81290,"byte_end":81310,"line_start":493,"line_end":493,"column_start":22,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3510},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81569,"byte_end":81589,"line_start":507,"line_end":507,"column_start":24,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3510},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62202,"byte_end":62210,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95690,"byte_end":95699,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3566},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95826,"byte_end":95835,"line_start":378,"line_end":378,"column_start":21,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3566},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104068,"byte_end":104074,"line_start":656,"line_end":656,"column_start":19,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104187,"byte_end":104193,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104840,"byte_end":104846,"line_start":692,"line_end":692,"column_start":37,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105469,"byte_end":105475,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105748,"byte_end":105754,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105802,"byte_end":105808,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3626},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131305,"byte_end":131313,"line_start":719,"line_end":719,"column_start":22,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3221},"to":{"krate":0,"index":726}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":141464,"byte_end":141472,"line_start":1048,"line_end":1048,"column_start":22,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3221},"to":{"krate":0,"index":726}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":150935,"byte_end":150943,"line_start":1366,"line_end":1366,"column_start":25,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":524},"to":{"krate":0,"index":726}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":163098,"byte_end":163104,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172645,"byte_end":172651,"line_start":423,"line_end":423,"column_start":25,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3681},"to":{"krate":1,"index":2929}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172858,"byte_end":172864,"line_start":435,"line_end":435,"column_start":20,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3681},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173064,"byte_end":173070,"line_start":445,"line_end":445,"column_start":19,"column_end":25},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3681},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173279,"byte_end":173285,"line_start":455,"line_end":455,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3681},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173787,"byte_end":173798,"line_start":478,"line_end":478,"column_start":9,"column_end":20},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174647,"byte_end":174658,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3714},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174874,"byte_end":174885,"line_start":527,"line_end":527,"column_start":21,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3714},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176941,"byte_end":176947,"line_start":597,"line_end":597,"column_start":9,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181346,"byte_end":181352,"line_start":756,"line_end":756,"column_start":20,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3747},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181556,"byte_end":181562,"line_start":766,"line_end":766,"column_start":19,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3747},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181771,"byte_end":181777,"line_start":776,"line_end":776,"column_start":21,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3747},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183328,"byte_end":183334,"line_start":827,"line_end":827,"column_start":9,"column_end":15},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185548,"byte_end":185554,"line_start":916,"line_end":916,"column_start":20,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3780},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185754,"byte_end":185760,"line_start":926,"line_end":926,"column_start":19,"column_end":25},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3780},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185969,"byte_end":185975,"line_start":936,"line_end":936,"column_start":21,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3780},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":187281,"byte_end":187287,"line_start":985,"line_end":985,"column_start":9,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189429,"byte_end":189435,"line_start":1065,"line_end":1065,"column_start":20,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3813},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189635,"byte_end":189641,"line_start":1075,"line_end":1075,"column_start":19,"column_end":25},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3813},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189850,"byte_end":189856,"line_start":1085,"line_end":1085,"column_start":21,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3813},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190771,"byte_end":190778,"line_start":1122,"line_end":1122,"column_start":9,"column_end":16},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3845},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193023,"byte_end":193030,"line_start":1213,"line_end":1213,"column_start":20,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":9414}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193231,"byte_end":193238,"line_start":1223,"line_end":1223,"column_start":19,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193448,"byte_end":193455,"line_start":1233,"line_end":1233,"column_start":21,"column_end":28},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193644,"byte_end":193651,"line_start":1243,"line_end":1243,"column_start":28,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":7432}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193854,"byte_end":193861,"line_start":1254,"line_end":1254,"column_start":23,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":3139}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194061,"byte_end":194068,"line_start":1268,"line_end":1268,"column_start":22,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":3144}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194262,"byte_end":194269,"line_start":1282,"line_end":1282,"column_start":17,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3845},"to":{"krate":1,"index":3135}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205109,"byte_end":205119,"line_start":33,"line_end":33,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":4,"index":268},"to":{"krate":0,"index":988}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205128,"byte_end":205134,"line_start":33,"line_end":33,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1007},"to":{"krate":0,"index":988}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205775,"byte_end":205784,"line_start":49,"line_end":49,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":988},"to":{"krate":0,"index":991}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":205787,"byte_end":205793,"line_start":49,"line_end":49,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":5,"index":50},"to":{"krate":0,"index":991}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217851,"byte_end":217855,"line_start":266,"line_end":266,"column_start":26,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3901},"to":{"krate":0,"index":1029}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219203,"byte_end":219207,"line_start":312,"line_end":312,"column_start":26,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3923},"to":{"krate":0,"index":1029}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251344,"byte_end":251357,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251488,"byte_end":251501,"line_start":104,"line_end":104,"column_start":19,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3945},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":251699,"byte_end":251712,"line_start":114,"line_end":114,"column_start":21,"column_end":34},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3945},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":252021,"byte_end":252034,"line_start":128,"line_end":128,"column_start":25,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3945},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":252067,"byte_end":252080,"line_start":131,"line_end":131,"column_start":25,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3945},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":256152,"byte_end":256158,"line_start":127,"line_end":127,"column_start":15,"column_end":21},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":257673,"byte_end":257679,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259372,"byte_end":259378,"line_start":259,"line_end":259,"column_start":22,"column_end":28},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259587,"byte_end":259593,"line_start":271,"line_end":271,"column_start":22,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":259778,"byte_end":259784,"line_start":281,"line_end":281,"column_start":23,"column_end":29},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260283,"byte_end":260289,"line_start":301,"line_end":301,"column_start":6,"column_end":12},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260580,"byte_end":260586,"line_start":317,"line_end":317,"column_start":35,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260803,"byte_end":260809,"line_start":330,"line_end":330,"column_start":36,"column_end":42},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261275,"byte_end":261281,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261618,"byte_end":261624,"line_start":369,"line_end":369,"column_start":36,"column_end":42},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261877,"byte_end":261883,"line_start":382,"line_end":382,"column_start":37,"column_end":43},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262095,"byte_end":262101,"line_start":394,"line_end":394,"column_start":25,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262398,"byte_end":262404,"line_start":408,"line_end":408,"column_start":27,"column_end":33},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262637,"byte_end":262643,"line_start":421,"line_end":421,"column_start":27,"column_end":33},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":9420}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262875,"byte_end":262881,"line_start":434,"line_end":434,"column_start":24,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263276,"byte_end":263282,"line_start":453,"line_end":453,"column_start":25,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263499,"byte_end":263505,"line_start":468,"line_end":468,"column_start":25,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263670,"byte_end":263676,"line_start":479,"line_end":479,"column_start":24,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264006,"byte_end":264012,"line_start":497,"line_end":497,"column_start":23,"column_end":29},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3135}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":267576,"byte_end":267587,"line_start":81,"line_end":81,"column_start":15,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271411,"byte_end":271422,"line_start":218,"line_end":218,"column_start":25,"column_end":36},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271576,"byte_end":271587,"line_start":230,"line_end":230,"column_start":22,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271746,"byte_end":271757,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272114,"byte_end":272125,"line_start":258,"line_end":258,"column_start":27,"column_end":38},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272328,"byte_end":272339,"line_start":271,"line_end":271,"column_start":48,"column_end":59},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272589,"byte_end":272594,"line_start":284,"line_end":284,"column_start":46,"column_end":51},"kind":{"Impl":{"id":119}},"from":{"krate":1,"index":36720},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272809,"byte_end":272820,"line_start":297,"line_end":297,"column_start":25,"column_end":36},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273169,"byte_end":273180,"line_start":313,"line_end":313,"column_start":24,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273389,"byte_end":273400,"line_start":327,"line_end":327,"column_start":28,"column_end":39},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274235,"byte_end":274246,"line_start":373,"line_end":373,"column_start":39,"column_end":50},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274713,"byte_end":274724,"line_start":399,"line_end":399,"column_start":37,"column_end":48},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274960,"byte_end":274971,"line_start":411,"line_end":411,"column_start":33,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275114,"byte_end":275125,"line_start":420,"line_end":420,"column_start":48,"column_end":59},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":3383}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":278560,"byte_end":278566,"line_start":121,"line_end":121,"column_start":15,"column_end":21},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301907,"byte_end":301913,"line_start":888,"line_end":888,"column_start":12,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303860,"byte_end":303866,"line_start":960,"line_end":960,"column_start":12,"column_end":18},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311902,"byte_end":311908,"line_start":1237,"line_end":1237,"column_start":15,"column_end":21},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312736,"byte_end":312742,"line_start":1263,"line_end":1263,"column_start":25,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312927,"byte_end":312933,"line_start":1278,"line_end":1278,"column_start":22,"column_end":28},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313051,"byte_end":313057,"line_start":1287,"line_end":1287,"column_start":23,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313379,"byte_end":313385,"line_start":1302,"line_end":1302,"column_start":58,"column_end":64},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313845,"byte_end":313851,"line_start":1322,"line_end":1322,"column_start":59,"column_end":65},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314389,"byte_end":314395,"line_start":1347,"line_end":1347,"column_start":25,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314589,"byte_end":314595,"line_start":1359,"line_end":1359,"column_start":29,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314796,"byte_end":314802,"line_start":1371,"line_end":1371,"column_start":34,"column_end":40},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2929}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315055,"byte_end":315061,"line_start":1385,"line_end":1385,"column_start":32,"column_end":38},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2929}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315272,"byte_end":315278,"line_start":1398,"line_end":1398,"column_start":25,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315573,"byte_end":315579,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":9420}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315877,"byte_end":315883,"line_start":1433,"line_end":1433,"column_start":24,"column_end":30},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316094,"byte_end":316100,"line_start":1447,"line_end":1447,"column_start":24,"column_end":30},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316624,"byte_end":316635,"line_start":1469,"line_end":1469,"column_start":32,"column_end":43},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3974},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316806,"byte_end":316817,"line_start":1479,"line_end":1479,"column_start":36,"column_end":47},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3974},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317001,"byte_end":317012,"line_start":1489,"line_end":1489,"column_start":39,"column_end":50},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3974},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317188,"byte_end":317199,"line_start":1499,"line_end":1499,"column_start":30,"column_end":41},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3974},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317392,"byte_end":317403,"line_start":1509,"line_end":1509,"column_start":21,"column_end":32},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3974},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":325528,"byte_end":325535,"line_start":202,"line_end":202,"column_start":15,"column_end":22},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":346455,"byte_end":346462,"line_start":900,"line_end":900,"column_start":12,"column_end":19},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":347518,"byte_end":347525,"line_start":940,"line_end":940,"column_start":12,"column_end":19},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":348857,"byte_end":348864,"line_start":985,"line_end":985,"column_start":25,"column_end":32},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349007,"byte_end":349014,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349137,"byte_end":349144,"line_start":1005,"line_end":1005,"column_start":59,"column_end":66},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349791,"byte_end":349798,"line_start":1027,"line_end":1027,"column_start":27,"column_end":34},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":349978,"byte_end":349985,"line_start":1040,"line_end":1040,"column_start":25,"column_end":32},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350208,"byte_end":350215,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":9420}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350410,"byte_end":350417,"line_start":1065,"line_end":1065,"column_start":24,"column_end":31},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1924},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":350913,"byte_end":350925,"line_start":1087,"line_end":1087,"column_start":34,"column_end":46},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351101,"byte_end":351113,"line_start":1097,"line_end":1097,"column_start":30,"column_end":42},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351304,"byte_end":351316,"line_start":1107,"line_end":1107,"column_start":19,"column_end":31},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351832,"byte_end":351844,"line_start":1129,"line_end":1129,"column_start":21,"column_end":33},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352337,"byte_end":352349,"line_start":1150,"line_end":1150,"column_start":25,"column_end":37},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352400,"byte_end":352412,"line_start":1154,"line_end":1154,"column_start":25,"column_end":37},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4014},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":439637,"byte_end":439645,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519150,"byte_end":519159,"line_start":2697,"line_end":2697,"column_start":44,"column_end":53},"kind":{"Impl":{"id":172}},"from":{"krate":1,"index":36704},"to":{"krate":0,"index":2521}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":521626,"byte_end":521630,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525961,"byte_end":525965,"line_start":265,"line_end":265,"column_start":22,"column_end":26},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2635},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526186,"byte_end":526190,"line_start":280,"line_end":280,"column_start":38,"column_end":42},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2635},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526374,"byte_end":526378,"line_start":292,"line_end":292,"column_start":22,"column_end":26},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2635},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526858,"byte_end":526868,"line_start":315,"line_end":315,"column_start":29,"column_end":39},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4137},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527557,"byte_end":527567,"line_start":354,"line_end":354,"column_start":36,"column_end":46},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4137},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527956,"byte_end":527966,"line_start":374,"line_end":374,"column_start":34,"column_end":44},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4137},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528112,"byte_end":528122,"line_start":385,"line_end":385,"column_start":30,"column_end":40},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4137},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528462,"byte_end":528472,"line_start":404,"line_end":404,"column_start":25,"column_end":35},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4152},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529086,"byte_end":529096,"line_start":437,"line_end":437,"column_start":36,"column_end":46},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4152},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529455,"byte_end":529465,"line_start":453,"line_end":453,"column_start":34,"column_end":44},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4152},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529611,"byte_end":529621,"line_start":464,"line_end":464,"column_start":30,"column_end":40},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4152},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530627,"byte_end":530634,"line_start":513,"line_end":513,"column_start":16,"column_end":23},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532722,"byte_end":532729,"line_start":596,"line_end":596,"column_start":22,"column_end":29},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2715},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":544446,"byte_end":544457,"line_start":1119,"line_end":1119,"column_start":16,"column_end":27},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":547628,"byte_end":547642,"line_start":1247,"line_end":1247,"column_start":16,"column_end":30},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":556950,"byte_end":556962,"line_start":1599,"line_end":1599,"column_start":16,"column_end":28},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560222,"byte_end":560237,"line_start":1727,"line_end":1727,"column_start":16,"column_end":31},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":571281,"byte_end":571300,"line_start":2222,"line_end":2222,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":7517},"to":{"krate":0,"index":2777}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577039,"byte_end":577047,"line_start":2455,"line_end":2455,"column_start":16,"column_end":24},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577306,"byte_end":577314,"line_start":2470,"line_end":2470,"column_start":24,"column_end":32},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4865},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577490,"byte_end":577498,"line_start":2484,"line_end":2484,"column_start":25,"column_end":33},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4865},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":578862,"byte_end":578870,"line_start":2544,"line_end":2544,"column_start":36,"column_end":44},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4865},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579613,"byte_end":579621,"line_start":2580,"line_end":2580,"column_start":34,"column_end":42},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4865},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579766,"byte_end":579774,"line_start":2591,"line_end":2591,"column_start":30,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4865},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580377,"byte_end":580386,"line_start":2617,"line_end":2617,"column_start":16,"column_end":25},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580645,"byte_end":580654,"line_start":2632,"line_end":2632,"column_start":24,"column_end":33},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4914},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":580830,"byte_end":580839,"line_start":2646,"line_end":2646,"column_start":25,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4914},"to":{"krate":1,"index":7653}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582018,"byte_end":582027,"line_start":2702,"line_end":2702,"column_start":36,"column_end":45},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4914},"to":{"krate":1,"index":7517}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582773,"byte_end":582782,"line_start":2738,"line_end":2738,"column_start":34,"column_end":43},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4914},"to":{"krate":1,"index":7542}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582928,"byte_end":582937,"line_start":2749,"line_end":2749,"column_start":30,"column_end":39},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4914},"to":{"krate":1,"index":7921}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590081,"byte_end":590089,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3166}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590356,"byte_end":590364,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3170}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590631,"byte_end":590639,"line_start":55,"line_end":55,"column_start":39,"column_end":47},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3174}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":590897,"byte_end":590905,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":594113,"byte_end":594121,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":602559,"byte_end":602567,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610033,"byte_end":610041,"line_start":44,"line_end":44,"column_start":19,"column_end":27},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610106,"byte_end":610114,"line_start":51,"line_end":51,"column_start":20,"column_end":28},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":610616,"byte_end":610624,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612157,"byte_end":612165,"line_start":147,"line_end":147,"column_start":55,"column_end":63},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612414,"byte_end":612422,"line_start":161,"line_end":161,"column_start":59,"column_end":67},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":612990,"byte_end":612998,"line_start":181,"line_end":181,"column_start":55,"column_end":63},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":614129,"byte_end":614137,"line_start":234,"line_end":234,"column_start":56,"column_end":64},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":614426,"byte_end":614434,"line_start":248,"line_end":248,"column_start":60,"column_end":68},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":616264,"byte_end":616272,"line_start":344,"line_end":344,"column_start":22,"column_end":30},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":9403}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":616537,"byte_end":616545,"line_start":358,"line_end":358,"column_start":24,"column_end":32},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":9410}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":622518,"byte_end":622526,"line_start":533,"line_end":533,"column_start":21,"column_end":29},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":623831,"byte_end":623839,"line_start":569,"line_end":569,"column_start":28,"column_end":36},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":625015,"byte_end":625023,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":3221},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":373709,"byte_end":373717,"line_start":491,"line_end":491,"column_start":12,"column_end":20},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410788,"byte_end":410796,"line_start":1880,"line_end":1880,"column_start":12,"column_end":20},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415954,"byte_end":415962,"line_start":2067,"line_end":2067,"column_start":12,"column_end":20},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427838,"byte_end":427846,"line_start":2429,"line_end":2429,"column_start":12,"column_end":20},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430764,"byte_end":430772,"line_start":2527,"line_end":2527,"column_start":12,"column_end":20},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":434815,"byte_end":434823,"line_start":2663,"line_end":2663,"column_start":12,"column_end":20},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632264,"byte_end":632270,"line_start":149,"line_end":149,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":3383},"to":{"krate":0,"index":3367}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":632273,"byte_end":632278,"line_start":149,"line_end":149,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":9403},"to":{"krate":0,"index":3367}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":644119,"byte_end":644120,"line_start":98,"line_end":98,"column_start":21,"column_end":22},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3405},"to":{"krate":0,"index":3398}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645312,"byte_end":645319,"line_start":156,"line_end":156,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3398},"to":{"krate":0,"index":3427}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645322,"byte_end":645327,"line_start":156,"line_end":156,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":3427}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645632,"byte_end":645633,"line_start":165,"line_end":165,"column_start":26,"column_end":27},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3431},"to":{"krate":0,"index":3427}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648661,"byte_end":648662,"line_start":276,"line_end":276,"column_start":26,"column_end":27},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3447},"to":{"krate":0,"index":3438}},{"span":{"file_name":"/Users/idok/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648872,"byte_end":648873,"line_start":289,"line_end":289,"column_start":29,"column_end":30},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3452},"to":{"krate":0,"index":3442}}]}